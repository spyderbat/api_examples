/**
 * Spyderbat API UI & Public APIs
 * Restful APIs for use by UI & customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import User from '../model/User';
import UserAuthInput from '../model/UserAuthInput';
import ValidationError from '../model/ValidationError';

/**
* User service.
* @module api/UserApi
* @version 1.0.0
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the userAuth operation.
     * @callback module:api/UserApi~userAuthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authenticate a user, returns token required for authentication
     *  Users may be authenticate by providing their email address and password as a JSON object, in response an authentication token will be returned in the header 'Authorization-Token'. The returned token must be used in a request header with the name 'Authorization' when making other authenticated API calls, for example 'Authorization: Bearer TOKEN'. 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserAuthInput} opts.userAuthInput 
     * @param {module:api/UserApi~userAuthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    userAuth(opts, callback) {
      opts = opts || {};
      let postBody = opts['userAuthInput'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/api/v1/app/user/auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCurrent operation.
     * @callback module:api/UserApi~userCurrentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the current user
     *  This api call will return the current user as a JSON object, or 404 if there is no user associated with the current authentication token or JWT. When a 403 is received the message will indicate if the user is expired or is pending approval, i.e. \"user is expired\", or if the user is in a pending state \"user is in a pending state\". 
     * @param {module:api/UserApi~userCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    userCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/api/v1/app/user/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userLoad operation.
     * @callback module:api/UserApi~userLoadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load a user by ID
     *  Loads a user given the user's user ID.    * By default users may only load their own user ID  * The action *user:Load* may be placed upon the users role to allowed loading other users 
     * @param {String} userUID User UID
     * @param {module:api/UserApi~userLoadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    userLoad(userUID, callback) {
      let postBody = null;
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling userLoad");
      }

      let pathParams = {
        'userUID': userUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/api/v1/user/{userUID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userSignup operation.
     * @callback module:api/UserApi~userSignupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sign up a new user
     *  Users can sign up by providing an email address. If the email is invalid or a user with the same existing email address has already registered an error is returned  ### Default configuration  By default the user will have an organization created for them, with the all actions allowed on the organization. The user can discover their organization id by  list all organizations.     
     * @param {Object} opts Optional parameters
     * @param {String} opts.auth 
     * @param {String} opts.confirm 
     * @param {String} opts.email 
     * @param {Boolean} opts.enable 
     * @param {module:api/UserApi~userSignupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userSignup(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'auth': opts['auth'],
        'confirm': opts['confirm'],
        'email': opts['email'],
        'enable': opts['enable']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/app/signup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
