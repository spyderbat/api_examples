/**
 * Spyderbat API UI & Public APIs
 * Restful APIs for use by UI & customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@spyderbat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DaoOrgType from '../model/DaoOrgType';
import SessionOrgTypeMaxLimit from '../model/SessionOrgTypeMaxLimit';

/**
* OrgType service.
* @module api/OrgTypeApi
* @version 0.1.0
*/
export default class OrgTypeApi {

    /**
    * Constructs a new OrgTypeApi. 
    * @alias module:api/OrgTypeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the orgTypeLimitActiveSources operation.
     * @callback module:api/OrgTypeApi~orgTypeLimitActiveSourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SessionOrgTypeMaxLimit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Loads limits regarding active sources
     *  Loads the limits regarding active sources allowed on the organization, the active sources in an org are calculated on a 5m0s basis.    * Requires action *org:Load* 
     * @param {String} orgUID 
     * @param {module:api/OrgTypeApi~orgTypeLimitActiveSourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SessionOrgTypeMaxLimit}
     */
    orgTypeLimitActiveSources(orgUID, callback) {
      let postBody = null;
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling orgTypeLimitActiveSources");
      }

      let pathParams = {
        'orgUID': orgUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SessionOrgTypeMaxLimit;
      return this.apiClient.callApi(
        '/api/v1/org/{orgUID}/type/limit/active_sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgTypeLimitOrgRoles operation.
     * @callback module:api/OrgTypeApi~orgTypeLimitOrgRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SessionOrgTypeMaxLimit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Loads limits regarding org roles
     *  Loads the limit information regarding the number of associated roles allowed per an organization   * Requires action *org:Load* 
     * @param {String} orgUID 
     * @param {module:api/OrgTypeApi~orgTypeLimitOrgRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SessionOrgTypeMaxLimit}
     */
    orgTypeLimitOrgRoles(orgUID, callback) {
      let postBody = null;
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling orgTypeLimitOrgRoles");
      }

      let pathParams = {
        'orgUID': orgUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SessionOrgTypeMaxLimit;
      return this.apiClient.callApi(
        '/api/v1/org/{orgUID}/type/limit/org_roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orgTypeLoad operation.
     * @callback module:api/OrgTypeApi~orgTypeLoadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DaoOrgType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load the org type for the organization
     *  Loads the org type for the organiation   * Requires action *org:Load* 
     * @param {String} orgUID 
     * @param {module:api/OrgTypeApi~orgTypeLoadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DaoOrgType}
     */
    orgTypeLoad(orgUID, callback) {
      let postBody = null;
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling orgTypeLoad");
      }

      let pathParams = {
        'orgUID': orgUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DaoOrgType;
      return this.apiClient.callApi(
        '/api/v1/org/{orgUID}/type', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
