/**
 * Spyderbat API UI & Public APIs
 * Restful APIs for use by UI & customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@spyderbat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIKey from '../model/APIKey';
import ApiKeyCreateInput from '../model/ApiKeyCreateInput';
import ApiKeyUpdateInput from '../model/ApiKeyUpdateInput';
import ValidationError from '../model/ValidationError';

/**
* APIKey service.
* @module api/APIKeyApi
* @version 1.0.0
*/
export default class APIKeyApi {

    /**
    * Constructs a new APIKeyApi. 
    * @alias module:api/APIKeyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiKeyCreate operation.
     * @callback module:api/APIKeyApi~apiKeyCreateCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new API key
     *  Creates a new API key which is associated with the user    * Requires global action *user:APIKeyCreate* 
     * @param {String} userUID User UID
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiKeyCreateInput} opts.apiKeyCreateInput 
     * @param {module:api/APIKeyApi~apiKeyCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    apiKeyCreate(userUID, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiKeyCreateInput'];
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling apiKeyCreate");
      }

      let pathParams = {
        'userUID': userUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v1/user/{userUID}/apikey/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiKeyDelete operation.
     * @callback module:api/APIKeyApi~apiKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an API key
     *  Deletes a specific API key   * Requires global action *user:APIKeyDelete* 
     * @param {String} uid API Key UID
     * @param {String} userUID User UID
     * @param {module:api/APIKeyApi~apiKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiKeyDelete(uid, userUID, callback) {
      let postBody = null;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling apiKeyDelete");
      }
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling apiKeyDelete");
      }

      let pathParams = {
        'uid': uid,
        'userUID': userUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/user/{userUID}/apikey/{uid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiKeyList operation.
     * @callback module:api/APIKeyApi~apiKeyListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/APIKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists an API key
     *  Lists API keys associated with a user   * Requires global action *user:APIKeyList*  
     * @param {String} userUID User UID
     * @param {module:api/APIKeyApi~apiKeyListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/APIKey>}
     */
    apiKeyList(userUID, callback) {
      let postBody = null;
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling apiKeyList");
      }

      let pathParams = {
        'userUID': userUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [APIKey];
      return this.apiClient.callApi(
        '/api/v1/user/{userUID}/apikey/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiKeyUpdate operation.
     * @callback module:api/APIKeyApi~apiKeyUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an API key
     *  Updates a specific API Key, the only fields which can be updated are description and enabled   * Requires global action *user:APIKeyUpdate* 
     * @param {String} uid API Key UID
     * @param {String} userUID User UID
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiKeyUpdateInput} opts.apiKeyUpdateInput 
     * @param {module:api/APIKeyApi~apiKeyUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiKeyUpdate(uid, userUID, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiKeyUpdateInput'];
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling apiKeyUpdate");
      }
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling apiKeyUpdate");
      }

      let pathParams = {
        'uid': uid,
        'userUID': userUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/user/{userUID}/apikey/{uid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
