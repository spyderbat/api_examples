/**
 * Spyderbat API UI & Public APIs
 * Restful APIs for use by UI & customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UIData from '../model/UIData';
import UiDataSetOrgDataInput from '../model/UiDataSetOrgDataInput';
import UiDataSetSourceDataInput from '../model/UiDataSetSourceDataInput';
import UiDataSetUserDataInput from '../model/UiDataSetUserDataInput';
import UiDataSetUserOrgDataInput from '../model/UiDataSetUserOrgDataInput';
import UiDataSetUserSourceDataInput from '../model/UiDataSetUserSourceDataInput';
import ValidationError from '../model/ValidationError';

/**
* UIData service.
* @module api/UIDataApi
* @version 1.0.0
*/
export default class UIDataApi {

    /**
    * Constructs a new UIDataApi. 
    * @alias module:api/UIDataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the uiDataDeleteOrgData operation.
     * @callback module:api/UIDataApi~uiDataDeleteOrgDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Org UI Data
     *  Sets UI Data   * Requires *uidata:Delete*  
     * @param {String} dataKey Key for the data
     * @param {String} orgUID Org UID
     * @param {String} sourceUID Src UID
     * @param {String} userUID Owner UID
     * @param {module:api/UIDataApi~uiDataDeleteOrgDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uiDataDeleteOrgData(dataKey, orgUID, sourceUID, userUID, callback) {
      let postBody = null;
      // verify the required parameter 'dataKey' is set
      if (dataKey === undefined || dataKey === null) {
        throw new Error("Missing the required parameter 'dataKey' when calling uiDataDeleteOrgData");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling uiDataDeleteOrgData");
      }
      // verify the required parameter 'sourceUID' is set
      if (sourceUID === undefined || sourceUID === null) {
        throw new Error("Missing the required parameter 'sourceUID' when calling uiDataDeleteOrgData");
      }
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling uiDataDeleteOrgData");
      }

      let pathParams = {
        'dataKey': dataKey,
        'orgUID': orgUID,
        'sourceUID': sourceUID,
        'userUID': userUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/org/{orgUID}/uidata/{dataKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uiDataDeleteSourceData operation.
     * @callback module:api/UIDataApi~uiDataDeleteSourceDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Source UI Data
     *  Sets UI Data   * Requires *uidata:Delete*  
     * @param {String} dataKey Key for the data
     * @param {String} orgUID Org UID
     * @param {String} sourceUID Src UID
     * @param {String} userUID Owner UID
     * @param {module:api/UIDataApi~uiDataDeleteSourceDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uiDataDeleteSourceData(dataKey, orgUID, sourceUID, userUID, callback) {
      let postBody = null;
      // verify the required parameter 'dataKey' is set
      if (dataKey === undefined || dataKey === null) {
        throw new Error("Missing the required parameter 'dataKey' when calling uiDataDeleteSourceData");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling uiDataDeleteSourceData");
      }
      // verify the required parameter 'sourceUID' is set
      if (sourceUID === undefined || sourceUID === null) {
        throw new Error("Missing the required parameter 'sourceUID' when calling uiDataDeleteSourceData");
      }
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling uiDataDeleteSourceData");
      }

      let pathParams = {
        'dataKey': dataKey,
        'orgUID': orgUID,
        'sourceUID': sourceUID,
        'userUID': userUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/org/{orgUID}/source/{sourceUID}/uidata/{dataKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uiDataDeleteUserData operation.
     * @callback module:api/UIDataApi~uiDataDeleteUserDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete User UI Data
     *  Sets UI Data   * Requires *uidata:Delete*  
     * @param {String} dataKey Key for the data
     * @param {String} orgUID Org UID
     * @param {String} sourceUID Src UID
     * @param {String} userUID Owner UID
     * @param {module:api/UIDataApi~uiDataDeleteUserDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uiDataDeleteUserData(dataKey, orgUID, sourceUID, userUID, callback) {
      let postBody = null;
      // verify the required parameter 'dataKey' is set
      if (dataKey === undefined || dataKey === null) {
        throw new Error("Missing the required parameter 'dataKey' when calling uiDataDeleteUserData");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling uiDataDeleteUserData");
      }
      // verify the required parameter 'sourceUID' is set
      if (sourceUID === undefined || sourceUID === null) {
        throw new Error("Missing the required parameter 'sourceUID' when calling uiDataDeleteUserData");
      }
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling uiDataDeleteUserData");
      }

      let pathParams = {
        'dataKey': dataKey,
        'orgUID': orgUID,
        'sourceUID': sourceUID,
        'userUID': userUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/user/{userUID}/uidata/{dataKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uiDataDeleteUserOrgData operation.
     * @callback module:api/UIDataApi~uiDataDeleteUserOrgDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete UserOrg UI Data
     *  Sets UI Data   * Requires *uidata:Delete*  
     * @param {String} dataKey Key for the data
     * @param {String} orgUID Org UID
     * @param {String} sourceUID Src UID
     * @param {String} userUID Owner UID
     * @param {module:api/UIDataApi~uiDataDeleteUserOrgDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uiDataDeleteUserOrgData(dataKey, orgUID, sourceUID, userUID, callback) {
      let postBody = null;
      // verify the required parameter 'dataKey' is set
      if (dataKey === undefined || dataKey === null) {
        throw new Error("Missing the required parameter 'dataKey' when calling uiDataDeleteUserOrgData");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling uiDataDeleteUserOrgData");
      }
      // verify the required parameter 'sourceUID' is set
      if (sourceUID === undefined || sourceUID === null) {
        throw new Error("Missing the required parameter 'sourceUID' when calling uiDataDeleteUserOrgData");
      }
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling uiDataDeleteUserOrgData");
      }

      let pathParams = {
        'dataKey': dataKey,
        'orgUID': orgUID,
        'sourceUID': sourceUID,
        'userUID': userUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/user/{userUID}/org/{orgUID}/uidata/{dataKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uiDataDeleteUserSourceData operation.
     * @callback module:api/UIDataApi~uiDataDeleteUserSourceDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete UserSource UI Data
     *  Sets UI Data   * Requires *uidata:Delete*  
     * @param {String} dataKey Key for the data
     * @param {String} orgUID Org UID
     * @param {String} sourceUID Src UID
     * @param {String} userUID Owner UID
     * @param {module:api/UIDataApi~uiDataDeleteUserSourceDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uiDataDeleteUserSourceData(dataKey, orgUID, sourceUID, userUID, callback) {
      let postBody = null;
      // verify the required parameter 'dataKey' is set
      if (dataKey === undefined || dataKey === null) {
        throw new Error("Missing the required parameter 'dataKey' when calling uiDataDeleteUserSourceData");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling uiDataDeleteUserSourceData");
      }
      // verify the required parameter 'sourceUID' is set
      if (sourceUID === undefined || sourceUID === null) {
        throw new Error("Missing the required parameter 'sourceUID' when calling uiDataDeleteUserSourceData");
      }
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling uiDataDeleteUserSourceData");
      }

      let pathParams = {
        'dataKey': dataKey,
        'orgUID': orgUID,
        'sourceUID': sourceUID,
        'userUID': userUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/user/{userUID}/org/{orgUID}/source/{sourceUID}/uidata/{dataKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uiDataGetOrgData operation.
     * @callback module:api/UIDataApi~uiDataGetOrgDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UIData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Org UI Data
     *  Gets UI Data   * Updates lastused  * Requires *uidata:Get*  
     * @param {String} dataKey Key for the data
     * @param {String} orgUID Org UID
     * @param {String} sourceUID Src UID
     * @param {String} userUID Owner UID
     * @param {module:api/UIDataApi~uiDataGetOrgDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UIData}
     */
    uiDataGetOrgData(dataKey, orgUID, sourceUID, userUID, callback) {
      let postBody = null;
      // verify the required parameter 'dataKey' is set
      if (dataKey === undefined || dataKey === null) {
        throw new Error("Missing the required parameter 'dataKey' when calling uiDataGetOrgData");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling uiDataGetOrgData");
      }
      // verify the required parameter 'sourceUID' is set
      if (sourceUID === undefined || sourceUID === null) {
        throw new Error("Missing the required parameter 'sourceUID' when calling uiDataGetOrgData");
      }
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling uiDataGetOrgData");
      }

      let pathParams = {
        'dataKey': dataKey,
        'orgUID': orgUID,
        'sourceUID': sourceUID,
        'userUID': userUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UIData;
      return this.apiClient.callApi(
        '/api/v1/org/{orgUID}/uidata/{dataKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uiDataGetSourceData operation.
     * @callback module:api/UIDataApi~uiDataGetSourceDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UIData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Source UI Data
     *  Gets UI Data   * Updates lastused  * Requires *uidata:Get*  
     * @param {String} dataKey Key for the data
     * @param {String} orgUID Org UID
     * @param {String} sourceUID Src UID
     * @param {String} userUID Owner UID
     * @param {module:api/UIDataApi~uiDataGetSourceDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UIData}
     */
    uiDataGetSourceData(dataKey, orgUID, sourceUID, userUID, callback) {
      let postBody = null;
      // verify the required parameter 'dataKey' is set
      if (dataKey === undefined || dataKey === null) {
        throw new Error("Missing the required parameter 'dataKey' when calling uiDataGetSourceData");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling uiDataGetSourceData");
      }
      // verify the required parameter 'sourceUID' is set
      if (sourceUID === undefined || sourceUID === null) {
        throw new Error("Missing the required parameter 'sourceUID' when calling uiDataGetSourceData");
      }
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling uiDataGetSourceData");
      }

      let pathParams = {
        'dataKey': dataKey,
        'orgUID': orgUID,
        'sourceUID': sourceUID,
        'userUID': userUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UIData;
      return this.apiClient.callApi(
        '/api/v1/org/{orgUID}/source/{sourceUID}/uidata/{dataKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uiDataGetUserData operation.
     * @callback module:api/UIDataApi~uiDataGetUserDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UIData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User UI Data
     *  Gets UI Data   * Updates lastused  * Requires *uidata:Get*  
     * @param {String} dataKey Key for the data
     * @param {String} orgUID Org UID
     * @param {String} sourceUID Src UID
     * @param {String} userUID Owner UID
     * @param {module:api/UIDataApi~uiDataGetUserDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UIData}
     */
    uiDataGetUserData(dataKey, orgUID, sourceUID, userUID, callback) {
      let postBody = null;
      // verify the required parameter 'dataKey' is set
      if (dataKey === undefined || dataKey === null) {
        throw new Error("Missing the required parameter 'dataKey' when calling uiDataGetUserData");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling uiDataGetUserData");
      }
      // verify the required parameter 'sourceUID' is set
      if (sourceUID === undefined || sourceUID === null) {
        throw new Error("Missing the required parameter 'sourceUID' when calling uiDataGetUserData");
      }
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling uiDataGetUserData");
      }

      let pathParams = {
        'dataKey': dataKey,
        'orgUID': orgUID,
        'sourceUID': sourceUID,
        'userUID': userUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UIData;
      return this.apiClient.callApi(
        '/api/v1/user/{userUID}/uidata/{dataKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uiDataGetUserOrgData operation.
     * @callback module:api/UIDataApi~uiDataGetUserOrgDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UIData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get UserOrg UI Data
     *  Gets UI Data   * Updates lastused  * Requires *uidata:Get*  
     * @param {String} dataKey Key for the data
     * @param {String} orgUID Org UID
     * @param {String} sourceUID Src UID
     * @param {String} userUID Owner UID
     * @param {module:api/UIDataApi~uiDataGetUserOrgDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UIData}
     */
    uiDataGetUserOrgData(dataKey, orgUID, sourceUID, userUID, callback) {
      let postBody = null;
      // verify the required parameter 'dataKey' is set
      if (dataKey === undefined || dataKey === null) {
        throw new Error("Missing the required parameter 'dataKey' when calling uiDataGetUserOrgData");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling uiDataGetUserOrgData");
      }
      // verify the required parameter 'sourceUID' is set
      if (sourceUID === undefined || sourceUID === null) {
        throw new Error("Missing the required parameter 'sourceUID' when calling uiDataGetUserOrgData");
      }
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling uiDataGetUserOrgData");
      }

      let pathParams = {
        'dataKey': dataKey,
        'orgUID': orgUID,
        'sourceUID': sourceUID,
        'userUID': userUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UIData;
      return this.apiClient.callApi(
        '/api/v1/user/{userUID}/org/{orgUID}/uidata/{dataKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uiDataGetUserSourceData operation.
     * @callback module:api/UIDataApi~uiDataGetUserSourceDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UIData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get UserSource UI Data
     *  Gets UI Data   * Updates lastused  * Requires *uidata:Get*  
     * @param {String} dataKey Key for the data
     * @param {String} orgUID Org UID
     * @param {String} sourceUID Src UID
     * @param {String} userUID Owner UID
     * @param {module:api/UIDataApi~uiDataGetUserSourceDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UIData}
     */
    uiDataGetUserSourceData(dataKey, orgUID, sourceUID, userUID, callback) {
      let postBody = null;
      // verify the required parameter 'dataKey' is set
      if (dataKey === undefined || dataKey === null) {
        throw new Error("Missing the required parameter 'dataKey' when calling uiDataGetUserSourceData");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling uiDataGetUserSourceData");
      }
      // verify the required parameter 'sourceUID' is set
      if (sourceUID === undefined || sourceUID === null) {
        throw new Error("Missing the required parameter 'sourceUID' when calling uiDataGetUserSourceData");
      }
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling uiDataGetUserSourceData");
      }

      let pathParams = {
        'dataKey': dataKey,
        'orgUID': orgUID,
        'sourceUID': sourceUID,
        'userUID': userUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UIData;
      return this.apiClient.callApi(
        '/api/v1/user/{userUID}/org/{orgUID}/source/{sourceUID}/uidata/{dataKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uiDataQueryOrgData operation.
     * @callback module:api/UIDataApi~uiDataQueryOrgDataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UIData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query Org UI Data
     *  Query UI Data   * Requires *uidata:Query*  
     * @param {String} dataKey Key for the data
     * @param {String} orgUID Org UID
     * @param {String} sourceUID Src UID
     * @param {String} userUID Owner UID
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.tags Tags to search for
     * @param {module:api/UIDataApi~uiDataQueryOrgDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UIData>}
     */
    uiDataQueryOrgData(dataKey, orgUID, sourceUID, userUID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataKey' is set
      if (dataKey === undefined || dataKey === null) {
        throw new Error("Missing the required parameter 'dataKey' when calling uiDataQueryOrgData");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling uiDataQueryOrgData");
      }
      // verify the required parameter 'sourceUID' is set
      if (sourceUID === undefined || sourceUID === null) {
        throw new Error("Missing the required parameter 'sourceUID' when calling uiDataQueryOrgData");
      }
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling uiDataQueryOrgData");
      }

      let pathParams = {
        'dataKey': dataKey,
        'orgUID': orgUID,
        'sourceUID': sourceUID,
        'userUID': userUID
      };
      let queryParams = {
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UIData];
      return this.apiClient.callApi(
        '/api/v1/org/{orgUID}/uidata/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uiDataQuerySourceData operation.
     * @callback module:api/UIDataApi~uiDataQuerySourceDataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UIData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query Source UI Data
     *  Query UI Data   * Requires *uidata:Query*  
     * @param {String} dataKey Key for the data
     * @param {String} orgUID Org UID
     * @param {String} sourceUID Src UID
     * @param {String} userUID Owner UID
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.tags Tags to search for
     * @param {module:api/UIDataApi~uiDataQuerySourceDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UIData>}
     */
    uiDataQuerySourceData(dataKey, orgUID, sourceUID, userUID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataKey' is set
      if (dataKey === undefined || dataKey === null) {
        throw new Error("Missing the required parameter 'dataKey' when calling uiDataQuerySourceData");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling uiDataQuerySourceData");
      }
      // verify the required parameter 'sourceUID' is set
      if (sourceUID === undefined || sourceUID === null) {
        throw new Error("Missing the required parameter 'sourceUID' when calling uiDataQuerySourceData");
      }
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling uiDataQuerySourceData");
      }

      let pathParams = {
        'dataKey': dataKey,
        'orgUID': orgUID,
        'sourceUID': sourceUID,
        'userUID': userUID
      };
      let queryParams = {
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UIData];
      return this.apiClient.callApi(
        '/api/v1/org/{orgUID}/source/{sourceUID}/uidata/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uiDataQueryUserData operation.
     * @callback module:api/UIDataApi~uiDataQueryUserDataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UIData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query User UI Data
     *  Query UI Data   * Requires *uidata:Query*  
     * @param {String} dataKey Key for the data
     * @param {String} orgUID Org UID
     * @param {String} sourceUID Src UID
     * @param {String} userUID Owner UID
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.tags Tags to search for
     * @param {module:api/UIDataApi~uiDataQueryUserDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UIData>}
     */
    uiDataQueryUserData(dataKey, orgUID, sourceUID, userUID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataKey' is set
      if (dataKey === undefined || dataKey === null) {
        throw new Error("Missing the required parameter 'dataKey' when calling uiDataQueryUserData");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling uiDataQueryUserData");
      }
      // verify the required parameter 'sourceUID' is set
      if (sourceUID === undefined || sourceUID === null) {
        throw new Error("Missing the required parameter 'sourceUID' when calling uiDataQueryUserData");
      }
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling uiDataQueryUserData");
      }

      let pathParams = {
        'dataKey': dataKey,
        'orgUID': orgUID,
        'sourceUID': sourceUID,
        'userUID': userUID
      };
      let queryParams = {
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UIData];
      return this.apiClient.callApi(
        '/api/v1/user/{userUID}/uidata/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uiDataQueryUserOrgData operation.
     * @callback module:api/UIDataApi~uiDataQueryUserOrgDataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UIData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query UserOrg UI Data
     *  Query UI Data   * Requires *uidata:Query*  
     * @param {String} dataKey Key for the data
     * @param {String} orgUID Org UID
     * @param {String} sourceUID Src UID
     * @param {String} userUID Owner UID
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.tags Tags to search for
     * @param {module:api/UIDataApi~uiDataQueryUserOrgDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UIData>}
     */
    uiDataQueryUserOrgData(dataKey, orgUID, sourceUID, userUID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataKey' is set
      if (dataKey === undefined || dataKey === null) {
        throw new Error("Missing the required parameter 'dataKey' when calling uiDataQueryUserOrgData");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling uiDataQueryUserOrgData");
      }
      // verify the required parameter 'sourceUID' is set
      if (sourceUID === undefined || sourceUID === null) {
        throw new Error("Missing the required parameter 'sourceUID' when calling uiDataQueryUserOrgData");
      }
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling uiDataQueryUserOrgData");
      }

      let pathParams = {
        'dataKey': dataKey,
        'orgUID': orgUID,
        'sourceUID': sourceUID,
        'userUID': userUID
      };
      let queryParams = {
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UIData];
      return this.apiClient.callApi(
        '/api/v1/user/{userUID}/org/{orgUID}/uidata/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uiDataQueryUserSourceData operation.
     * @callback module:api/UIDataApi~uiDataQueryUserSourceDataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UIData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query UserSource UI Data
     *  Query UI Data   * Requires *uidata:Query*  
     * @param {String} dataKey Key for the data
     * @param {String} orgUID Org UID
     * @param {String} sourceUID Src UID
     * @param {String} userUID Owner UID
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.tags Tags to search for
     * @param {module:api/UIDataApi~uiDataQueryUserSourceDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UIData>}
     */
    uiDataQueryUserSourceData(dataKey, orgUID, sourceUID, userUID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataKey' is set
      if (dataKey === undefined || dataKey === null) {
        throw new Error("Missing the required parameter 'dataKey' when calling uiDataQueryUserSourceData");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling uiDataQueryUserSourceData");
      }
      // verify the required parameter 'sourceUID' is set
      if (sourceUID === undefined || sourceUID === null) {
        throw new Error("Missing the required parameter 'sourceUID' when calling uiDataQueryUserSourceData");
      }
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling uiDataQueryUserSourceData");
      }

      let pathParams = {
        'dataKey': dataKey,
        'orgUID': orgUID,
        'sourceUID': sourceUID,
        'userUID': userUID
      };
      let queryParams = {
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UIData];
      return this.apiClient.callApi(
        '/api/v1/user/{userUID}/org/{orgUID}/source/{sourceUID}/uidata/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uiDataSetOrgData operation.
     * @callback module:api/UIDataApi~uiDataSetOrgDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Org UI Data
     *  Sets UI Data   * Updates data, valid_to (if set), lastused  * Requires *uidata:Set*  
     * @param {String} dataKey Key for the data
     * @param {String} orgUID Org UID
     * @param {String} sourceUID Source UID
     * @param {String} userUID Owner UID
     * @param {Object} opts Optional parameters
     * @param {module:model/UiDataSetOrgDataInput} opts.uiDataSetOrgDataInput 
     * @param {module:api/UIDataApi~uiDataSetOrgDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uiDataSetOrgData(dataKey, orgUID, sourceUID, userUID, opts, callback) {
      opts = opts || {};
      let postBody = opts['uiDataSetOrgDataInput'];
      // verify the required parameter 'dataKey' is set
      if (dataKey === undefined || dataKey === null) {
        throw new Error("Missing the required parameter 'dataKey' when calling uiDataSetOrgData");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling uiDataSetOrgData");
      }
      // verify the required parameter 'sourceUID' is set
      if (sourceUID === undefined || sourceUID === null) {
        throw new Error("Missing the required parameter 'sourceUID' when calling uiDataSetOrgData");
      }
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling uiDataSetOrgData");
      }

      let pathParams = {
        'dataKey': dataKey,
        'orgUID': orgUID,
        'sourceUID': sourceUID,
        'userUID': userUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/org/{orgUID}/uidata/{dataKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uiDataSetSourceData operation.
     * @callback module:api/UIDataApi~uiDataSetSourceDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Source UI Data
     *  Sets UI Data   * Updates data, valid_to (if set), lastused  * Requires *uidata:Set*  
     * @param {String} dataKey Key for the data
     * @param {String} orgUID Org UID
     * @param {String} sourceUID Source UID
     * @param {String} userUID Owner UID
     * @param {Object} opts Optional parameters
     * @param {module:model/UiDataSetSourceDataInput} opts.uiDataSetSourceDataInput 
     * @param {module:api/UIDataApi~uiDataSetSourceDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uiDataSetSourceData(dataKey, orgUID, sourceUID, userUID, opts, callback) {
      opts = opts || {};
      let postBody = opts['uiDataSetSourceDataInput'];
      // verify the required parameter 'dataKey' is set
      if (dataKey === undefined || dataKey === null) {
        throw new Error("Missing the required parameter 'dataKey' when calling uiDataSetSourceData");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling uiDataSetSourceData");
      }
      // verify the required parameter 'sourceUID' is set
      if (sourceUID === undefined || sourceUID === null) {
        throw new Error("Missing the required parameter 'sourceUID' when calling uiDataSetSourceData");
      }
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling uiDataSetSourceData");
      }

      let pathParams = {
        'dataKey': dataKey,
        'orgUID': orgUID,
        'sourceUID': sourceUID,
        'userUID': userUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/org/{orgUID}/source/{sourceUID}/uidata/{dataKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uiDataSetUserData operation.
     * @callback module:api/UIDataApi~uiDataSetUserDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set User UI Data
     *  Sets UI Data   * Updates data, valid_to (if set), lastused  * Requires *uidata:Set*  
     * @param {String} dataKey Key for the data
     * @param {String} orgUID Org UID
     * @param {String} sourceUID Source UID
     * @param {String} userUID Owner UID
     * @param {Object} opts Optional parameters
     * @param {module:model/UiDataSetUserDataInput} opts.uiDataSetUserDataInput 
     * @param {module:api/UIDataApi~uiDataSetUserDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uiDataSetUserData(dataKey, orgUID, sourceUID, userUID, opts, callback) {
      opts = opts || {};
      let postBody = opts['uiDataSetUserDataInput'];
      // verify the required parameter 'dataKey' is set
      if (dataKey === undefined || dataKey === null) {
        throw new Error("Missing the required parameter 'dataKey' when calling uiDataSetUserData");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling uiDataSetUserData");
      }
      // verify the required parameter 'sourceUID' is set
      if (sourceUID === undefined || sourceUID === null) {
        throw new Error("Missing the required parameter 'sourceUID' when calling uiDataSetUserData");
      }
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling uiDataSetUserData");
      }

      let pathParams = {
        'dataKey': dataKey,
        'orgUID': orgUID,
        'sourceUID': sourceUID,
        'userUID': userUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/user/{userUID}/uidata/{dataKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uiDataSetUserOrgData operation.
     * @callback module:api/UIDataApi~uiDataSetUserOrgDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set UserOrg UI Data
     *  Sets UI Data   * Updates data, valid_to (if set), lastused  * Requires *uidata:Set*  
     * @param {String} dataKey Key for the data
     * @param {String} orgUID Org UID
     * @param {String} sourceUID Source UID
     * @param {String} userUID Owner UID
     * @param {Object} opts Optional parameters
     * @param {module:model/UiDataSetUserOrgDataInput} opts.uiDataSetUserOrgDataInput 
     * @param {module:api/UIDataApi~uiDataSetUserOrgDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uiDataSetUserOrgData(dataKey, orgUID, sourceUID, userUID, opts, callback) {
      opts = opts || {};
      let postBody = opts['uiDataSetUserOrgDataInput'];
      // verify the required parameter 'dataKey' is set
      if (dataKey === undefined || dataKey === null) {
        throw new Error("Missing the required parameter 'dataKey' when calling uiDataSetUserOrgData");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling uiDataSetUserOrgData");
      }
      // verify the required parameter 'sourceUID' is set
      if (sourceUID === undefined || sourceUID === null) {
        throw new Error("Missing the required parameter 'sourceUID' when calling uiDataSetUserOrgData");
      }
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling uiDataSetUserOrgData");
      }

      let pathParams = {
        'dataKey': dataKey,
        'orgUID': orgUID,
        'sourceUID': sourceUID,
        'userUID': userUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/user/{userUID}/org/{orgUID}/uidata/{dataKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uiDataSetUserSourceData operation.
     * @callback module:api/UIDataApi~uiDataSetUserSourceDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set UserSource UI Data
     *  Sets UI Data   * Updates data, valid_to (if set), lastused  * Requires *uidata:Set*  
     * @param {String} dataKey Key for the data
     * @param {String} orgUID Org UID
     * @param {String} sourceUID Source UID
     * @param {String} userUID Owner UID
     * @param {Object} opts Optional parameters
     * @param {module:model/UiDataSetUserSourceDataInput} opts.uiDataSetUserSourceDataInput 
     * @param {module:api/UIDataApi~uiDataSetUserSourceDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uiDataSetUserSourceData(dataKey, orgUID, sourceUID, userUID, opts, callback) {
      opts = opts || {};
      let postBody = opts['uiDataSetUserSourceDataInput'];
      // verify the required parameter 'dataKey' is set
      if (dataKey === undefined || dataKey === null) {
        throw new Error("Missing the required parameter 'dataKey' when calling uiDataSetUserSourceData");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling uiDataSetUserSourceData");
      }
      // verify the required parameter 'sourceUID' is set
      if (sourceUID === undefined || sourceUID === null) {
        throw new Error("Missing the required parameter 'sourceUID' when calling uiDataSetUserSourceData");
      }
      // verify the required parameter 'userUID' is set
      if (userUID === undefined || userUID === null) {
        throw new Error("Missing the required parameter 'userUID' when calling uiDataSetUserSourceData");
      }

      let pathParams = {
        'dataKey': dataKey,
        'orgUID': orgUID,
        'sourceUID': sourceUID,
        'userUID': userUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/user/{userUID}/org/{orgUID}/source/{sourceUID}/uidata/{dataKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
