/**
 * Spyderbat API UI & Public APIs
 * Restful APIs for use by UI & customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@spyderbat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiInvestigationCreateOutput from '../model/ApiInvestigationCreateOutput';
import DaoInvestigation from '../model/DaoInvestigation';
import InvestigationCreateInput from '../model/InvestigationCreateInput';
import InvestigationUpdateInput from '../model/InvestigationUpdateInput';
import ValidationError from '../model/ValidationError';

/**
* Investigation service.
* @module api/InvestigationApi
* @version 1.0.0
*/
export default class InvestigationApi {

    /**
    * Constructs a new InvestigationApi. 
    * @alias module:api/InvestigationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the investigationCreate operation.
     * @callback module:api/InvestigationApi~investigationCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiInvestigationCreateOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an investigation
     *  Create an investigationan   * Requires the user have the action *investigation:Create* 
     * @param {String} orgUID Investigation OrgUID
     * @param {Object} opts Optional parameters
     * @param {module:model/InvestigationCreateInput} opts.investigationCreateInput 
     * @param {module:api/InvestigationApi~investigationCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiInvestigationCreateOutput}
     */
    investigationCreate(orgUID, opts, callback) {
      opts = opts || {};
      let postBody = opts['investigationCreateInput'];
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling investigationCreate");
      }

      let pathParams = {
        'orgUID': orgUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiInvestigationCreateOutput;
      return this.apiClient.callApi(
        '/api/v1/org/{orgUID}/investigation/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the investigationDelete operation.
     * @callback module:api/InvestigationApi~investigationDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an investigation
     *  Deletes an investigation, by setting valid_to=now so that the investigation is virtually deleted.   * Requires the user have the action *investigation:Delete* 
     * @param {String} investigationUID Investigation UID
     * @param {String} orgUID Investigation OrgUID
     * @param {module:api/InvestigationApi~investigationDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    investigationDelete(investigationUID, orgUID, callback) {
      let postBody = null;
      // verify the required parameter 'investigationUID' is set
      if (investigationUID === undefined || investigationUID === null) {
        throw new Error("Missing the required parameter 'investigationUID' when calling investigationDelete");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling investigationDelete");
      }

      let pathParams = {
        'investigationUID': investigationUID,
        'orgUID': orgUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/org/{orgUID}/investigation/{investigationUID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the investigationList operation.
     * @callback module:api/InvestigationApi~investigationListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DaoInvestigation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List investigations
     *  Lists investigations   * Will list investigations which the user has the action *investigation:Load* or *investigation:LoadExpired* on 
     * @param {String} orgUID 
     * @param {module:api/InvestigationApi~investigationListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DaoInvestigation>}
     */
    investigationList(orgUID, callback) {
      let postBody = null;
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling investigationList");
      }

      let pathParams = {
        'orgUID': orgUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DaoInvestigation];
      return this.apiClient.callApi(
        '/api/v1/org/{orgUID}/investigation/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the investigationListVersions operation.
     * @callback module:api/InvestigationApi~investigationListVersionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DaoInvestigation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Investigation Versions
     *  Lists prior version of this investigation   * Requires the user have the action *investigation:ListVersions* 
     * @param {String} investigationUID 
     * @param {String} orgUID 
     * @param {module:api/InvestigationApi~investigationListVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DaoInvestigation>}
     */
    investigationListVersions(investigationUID, orgUID, callback) {
      let postBody = null;
      // verify the required parameter 'investigationUID' is set
      if (investigationUID === undefined || investigationUID === null) {
        throw new Error("Missing the required parameter 'investigationUID' when calling investigationListVersions");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling investigationListVersions");
      }

      let pathParams = {
        'investigationUID': investigationUID,
        'orgUID': orgUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DaoInvestigation];
      return this.apiClient.callApi(
        '/api/v1/org/{orgUID}/investigation/{investigationUID}/version/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the investigationLoad operation.
     * @callback module:api/InvestigationApi~investigationLoadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DaoInvestigation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load an investigation
     *  Loads an investigation by UID.    * Requires action  *investigation:Load* to load an active investigation  * Requires action *investigation:LoadExpired* to load expired investigations  
     * @param {String} investigationUID 
     * @param {String} orgUID 
     * @param {module:api/InvestigationApi~investigationLoadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DaoInvestigation}
     */
    investigationLoad(investigationUID, orgUID, callback) {
      let postBody = null;
      // verify the required parameter 'investigationUID' is set
      if (investigationUID === undefined || investigationUID === null) {
        throw new Error("Missing the required parameter 'investigationUID' when calling investigationLoad");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling investigationLoad");
      }

      let pathParams = {
        'investigationUID': investigationUID,
        'orgUID': orgUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DaoInvestigation;
      return this.apiClient.callApi(
        '/api/v1/org/{orgUID}/investigation/{investigationUID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the investigationLoadVersion operation.
     * @callback module:api/InvestigationApi~investigationLoadVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DaoInvestigation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load Investigation Version
     *  Loads a specific version of an investigation   * Requires the user have the action *investigation:LoadVersion* 
     * @param {String} investigationUID 
     * @param {String} orgUID 
     * @param {Number} version 
     * @param {module:api/InvestigationApi~investigationLoadVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DaoInvestigation}
     */
    investigationLoadVersion(investigationUID, orgUID, version, callback) {
      let postBody = null;
      // verify the required parameter 'investigationUID' is set
      if (investigationUID === undefined || investigationUID === null) {
        throw new Error("Missing the required parameter 'investigationUID' when calling investigationLoadVersion");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling investigationLoadVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling investigationLoadVersion");
      }

      let pathParams = {
        'investigationUID': investigationUID,
        'orgUID': orgUID,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DaoInvestigation;
      return this.apiClient.callApi(
        '/api/v1/org/{orgUID}/investigation/{investigationUID}/version/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the investigationUpdate operation.
     * @callback module:api/InvestigationApi~investigationUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an investigation
     *  Updates the investigationan   * Requires the user have the action *investigation:Update* 
     * @param {String} investigationUID Investigation UID
     * @param {String} orgUID Investigation OrgUID
     * @param {Object} opts Optional parameters
     * @param {module:model/InvestigationUpdateInput} opts.investigationUpdateInput 
     * @param {module:api/InvestigationApi~investigationUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    investigationUpdate(investigationUID, orgUID, opts, callback) {
      opts = opts || {};
      let postBody = opts['investigationUpdateInput'];
      // verify the required parameter 'investigationUID' is set
      if (investigationUID === undefined || investigationUID === null) {
        throw new Error("Missing the required parameter 'investigationUID' when calling investigationUpdate");
      }
      // verify the required parameter 'orgUID' is set
      if (orgUID === undefined || orgUID === null) {
        throw new Error("Missing the required parameter 'orgUID' when calling investigationUpdate");
      }

      let pathParams = {
        'investigationUID': investigationUID,
        'orgUID': orgUID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/org/{orgUID}/investigation/{investigationUID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
