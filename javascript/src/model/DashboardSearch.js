/**
 * Spyderbat API UI & Public APIs
 * Restful APIs for use by UI & customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@spyderbat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DashboardSearch model module.
 * @module model/DashboardSearch
 * @version 0.1.0
 */
class DashboardSearch {
    /**
     * Constructs a new <code>DashboardSearch</code>.
     * @alias module:model/DashboardSearch
     */
    constructor() { 
        
        DashboardSearch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DashboardSearch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DashboardSearch} obj Optional instance to populate.
     * @return {module:model/DashboardSearch} The populated <code>DashboardSearch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DashboardSearch();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], {'String': Object});
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('notify')) {
                obj['notify'] = ApiClient.convertToType(data['notify'], 'Boolean');
            }
            if (data.hasOwnProperty('notify_frequency')) {
                obj['notify_frequency'] = ApiClient.convertToType(data['notify_frequency'], 'Number');
            }
            if (data.hasOwnProperty('org_uid')) {
                obj['org_uid'] = ApiClient.convertToType(data['org_uid'], 'String');
            }
            if (data.hasOwnProperty('search')) {
                obj['search'] = ApiClient.convertToType(data['search'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }


}

/**
 * UI supplied JSON object
 * @member {Object.<String, Object>} data
 */
DashboardSearch.prototype['data'] = undefined;

/**
 * Description of query (max 64 chars)
 * @member {String} description
 */
DashboardSearch.prototype['description'] = undefined;

/**
 * Are notifications generated from this search
 * @member {Boolean} notify
 */
DashboardSearch.prototype['notify'] = undefined;

/**
 * Frequency of notification in seconds. One of 300, 3600, or 86400.
 * @member {Number} notify_frequency
 */
DashboardSearch.prototype['notify_frequency'] = undefined;

/**
 * Org UID
 * @member {String} org_uid
 */
DashboardSearch.prototype['org_uid'] = undefined;

/**
 * Search query to run
 * @member {String} search
 */
DashboardSearch.prototype['search'] = undefined;

/**
 * User supplied tags
 * @member {Array.<String>} tags
 */
DashboardSearch.prototype['tags'] = undefined;

/**
 * UID for the DashboardSearch
 * @member {String} uid
 */
DashboardSearch.prototype['uid'] = undefined;






export default DashboardSearch;

