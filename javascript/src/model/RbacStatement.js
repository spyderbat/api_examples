/**
 * Spyderbat API UI & Public APIs
 * Restful APIs for use by UI & customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RbacStatement model module.
 * @module model/RbacStatement
 * @version 1.0.0
 */
class RbacStatement {
    /**
     * Constructs a new <code>RbacStatement</code>.
     * @alias module:model/RbacStatement
     * @param effect {String} The effect of the statement, i.e. allow or deny
     * @param sid {String} Statement ID, used to identify the statement in audit logs
     */
    constructor(effect, sid) { 
        
        RbacStatement.initialize(this, effect, sid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, effect, sid) { 
        obj['effect'] = effect;
        obj['sid'] = sid;
    }

    /**
     * Constructs a <code>RbacStatement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RbacStatement} obj Optional instance to populate.
     * @return {module:model/RbacStatement} The populated <code>RbacStatement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RbacStatement();

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], ['String']);
            }
            if (data.hasOwnProperty('condition')) {
                obj['condition'] = ApiClient.convertToType(data['condition'], Object);
            }
            if (data.hasOwnProperty('effect')) {
                obj['effect'] = ApiClient.convertToType(data['effect'], 'String');
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = ApiClient.convertToType(data['resources'], ['String']);
            }
            if (data.hasOwnProperty('sid')) {
                obj['sid'] = ApiClient.convertToType(data['sid'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The actions that may be performed
 * @member {Array.<String>} actions
 */
RbacStatement.prototype['actions'] = undefined;

/**
 * Additional conditions which may be applied
 * @member {Object} condition
 */
RbacStatement.prototype['condition'] = undefined;

/**
 * The effect of the statement, i.e. allow or deny
 * @member {String} effect
 */
RbacStatement.prototype['effect'] = undefined;

/**
 * The resource the statement applies to
 * @member {Array.<String>} resources
 */
RbacStatement.prototype['resources'] = undefined;

/**
 * Statement ID, used to identify the statement in audit logs
 * @member {String} sid
 */
RbacStatement.prototype['sid'] = undefined;






export default RbacStatement;

