/**
 * Spyderbat API UI & Public APIs
 * Restful APIs for use by UI & customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@spyderbat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RstoreCausalQuery model module.
 * @module model/RstoreCausalQuery
 * @version 1.0.0
 */
class RstoreCausalQuery {
    /**
     * Constructs a new <code>RstoreCausalQuery</code>.
     * @alias module:model/RstoreCausalQuery
     */
    constructor() { 
        
        RstoreCausalQuery.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RstoreCausalQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RstoreCausalQuery} obj Optional instance to populate.
     * @return {module:model/RstoreCausalQuery} The populated <code>RstoreCausalQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RstoreCausalQuery();

            if (data.hasOwnProperty('peer')) {
                obj['peer'] = ApiClient.convertToType(data['peer'], [Object]);
            }
            if (data.hasOwnProperty('post')) {
                obj['post'] = ApiClient.convertToType(data['post'], [Object]);
            }
            if (data.hasOwnProperty('pre')) {
                obj['pre'] = ApiClient.convertToType(data['pre'], [Object]);
            }
        }
        return obj;
    }


}

/**
 * Causal tree matching rules for peer causal records
 * @member {Array.<Object>} peer
 */
RstoreCausalQuery.prototype['peer'] = undefined;

/**
 * Causal tree matching rules for post causal records
 * @member {Array.<Object>} post
 */
RstoreCausalQuery.prototype['post'] = undefined;

/**
 * Causal tree matching rules for pre causal records
 * @member {Array.<Object>} pre
 */
RstoreCausalQuery.prototype['pre'] = undefined;






export default RstoreCausalQuery;

