/**
 * Spyderbat API UI & Public APIs
 * Restful APIs for use by UI & customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@spyderbat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RstreamTimeRange from './RstreamTimeRange';

/**
 * The Expr model module.
 * @module model/Expr
 * @version 0.1.0
 */
class Expr {
    /**
     * Constructs a new <code>Expr</code>.
     * Data which matches this expression are returned
     * @alias module:model/Expr
     */
    constructor() { 
        
        Expr.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Expr</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Expr} obj Optional instance to populate.
     * @return {module:model/Expr} The populated <code>Expr</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Expr();

            if (data.hasOwnProperty('and')) {
                obj['and'] = ApiClient.convertToType(data['and'], [Expr]);
            }
            if (data.hasOwnProperty('contains_str')) {
                obj['contains_str'] = ApiClient.convertToType(data['contains_str'], 'String');
            }
            if (data.hasOwnProperty('equals')) {
                obj['equals'] = ApiClient.convertToType(data['equals'], Object);
            }
            if (data.hasOwnProperty('exists')) {
                obj['exists'] = ApiClient.convertToType(data['exists'], 'Boolean');
            }
            if (data.hasOwnProperty('greater_than')) {
                obj['greater_than'] = ApiClient.convertToType(data['greater_than'], Object);
            }
            if (data.hasOwnProperty('has_prefix')) {
                obj['has_prefix'] = ApiClient.convertToType(data['has_prefix'], 'String');
            }
            if (data.hasOwnProperty('has_suffix')) {
                obj['has_suffix'] = ApiClient.convertToType(data['has_suffix'], 'String');
            }
            if (data.hasOwnProperty('in')) {
                obj['in'] = ApiClient.convertToType(data['in'], [Object]);
            }
            if (data.hasOwnProperty('less_than')) {
                obj['less_than'] = ApiClient.convertToType(data['less_than'], Object);
            }
            if (data.hasOwnProperty('not')) {
                obj['not'] = Expr.constructFromObject(data['not']);
            }
            if (data.hasOwnProperty('or')) {
                obj['or'] = ApiClient.convertToType(data['or'], [Expr]);
            }
            if (data.hasOwnProperty('property')) {
                obj['property'] = ApiClient.convertToType(data['property'], 'String');
            }
            if (data.hasOwnProperty('re_match')) {
                obj['re_match'] = ApiClient.convertToType(data['re_match'], 'String');
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = ApiClient.convertToType(data['schema'], 'String');
            }
            if (data.hasOwnProperty('time_range')) {
                obj['time_range'] = RstreamTimeRange.constructFromObject(data['time_range']);
            }
        }
        return obj;
    }


}

/**
 * returns true if all of the contained expressions are true
 * @member {Array.<module:model/Expr>} and
 */
Expr.prototype['and'] = undefined;

/**
 * returns true if the property is a string and contains the specified value
 * @member {String} contains_str
 */
Expr.prototype['contains_str'] = undefined;

/**
 * returns true if the property matches the supplied value
 * @member {Object} equals
 */
Expr.prototype['equals'] = undefined;

/**
 * returns true if the property exists
 * @member {Boolean} exists
 */
Expr.prototype['exists'] = undefined;

/**
 * returns true if the property is a number and is greater than this value
 * @member {Object} greater_than
 */
Expr.prototype['greater_than'] = undefined;

/**
 * returns true if the property is a string and has the specified prefix
 * @member {String} has_prefix
 */
Expr.prototype['has_prefix'] = undefined;

/**
 * returns true if the property is a string and has the specified suffix
 * @member {String} has_suffix
 */
Expr.prototype['has_suffix'] = undefined;

/**
 * returns true if the property matches any of the values specified
 * @member {Array.<Object>} in
 */
Expr.prototype['in'] = undefined;

/**
 * returns true if te property is a number and is less than this value
 * @member {Object} less_than
 */
Expr.prototype['less_than'] = undefined;

/**
 * @member {module:model/Expr} not
 */
Expr.prototype['not'] = undefined;

/**
 * returns true if any of the contained expressions are true
 * @member {Array.<module:model/Expr>} or
 */
Expr.prototype['or'] = undefined;

/**
 * property to match against, in dotted property notation
 * @member {String} property
 */
Expr.prototype['property'] = undefined;

/**
 * returns true if the property is a string and matches the specified regex
 * @member {String} re_match
 */
Expr.prototype['re_match'] = undefined;

/**
 * matches only records with the specified schema
 * @member {String} schema
 */
Expr.prototype['schema'] = undefined;

/**
 * @member {module:model/RstreamTimeRange} time_range
 */
Expr.prototype['time_range'] = undefined;






export default Expr;

