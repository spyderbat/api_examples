/*
 * Spyderbat API UI & Public APIs
 *
 * Restful APIs for use by UI & customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@spyderbat.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`integration_soar_src_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IntegrationSoarSrcListError {
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`src_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SrcCreateError {
    Status400(crate::models::ValidationError),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`src_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SrcDeleteError {
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`src_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SrcListError {
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`src_load`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SrcLoadError {
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`src_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SrcUpdateError {
    Status400(crate::models::ValidationError),
    Status403(),
    UnknownValue(serde_json::Value),
}


///  Lists the sources of data that match the specified query parameters, and return  URL entry points into the UI for matching sources.   * Requires the action  *org:ListSources* on the organization 
pub async fn integration_soar_src_list(configuration: &configuration::Configuration, org_uid: &str, et: Option<i64>, hostname: Option<&str>, ip_address: Option<&str>, mac_address: Option<&str>, page: Option<i32>, page_size: Option<i32>, st: Option<i64>) -> Result<Vec<crate::models::ApiSoarListHandlerOutput>, Error<IntegrationSoarSrcListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/integration/soar/org/{orgUID}/source/", local_var_configuration.base_path, orgUID=crate::apis::urlencode(org_uid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = et {
        local_var_req_builder = local_var_req_builder.query(&[("et", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hostname {
        local_var_req_builder = local_var_req_builder.query(&[("hostname", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ip_address {
        local_var_req_builder = local_var_req_builder.query(&[("ip_address", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address {
        local_var_req_builder = local_var_req_builder.query(&[("mac_address", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = st {
        local_var_req_builder = local_var_req_builder.query(&[("st", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<IntegrationSoarSrcListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

///  Creates a new source of data  * Requires the action  *org:CreateSource* on the organization 
pub async fn src_create(configuration: &configuration::Configuration, org_uid: &str, src_create_input: Option<crate::models::SrcCreateInput>) -> Result<crate::models::ApiSourceCreateHandlerOutput, Error<SrcCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/org/{orgUID}/source/", local_var_configuration.base_path, orgUID=crate::apis::urlencode(org_uid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&src_create_input);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SrcCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

///  Delete a source  * Requires the action  *org:DeleteSource* on the organization 
pub async fn src_delete(configuration: &configuration::Configuration, org_uid: &str, source_uid: &str) -> Result<(), Error<SrcDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/org/{orgUID}/source/{sourceUID}", local_var_configuration.base_path, orgUID=crate::apis::urlencode(org_uid), sourceUID=crate::apis::urlencode(source_uid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<SrcDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

///  Lists the sources of data for an organization  * Requires the action  *org:ListSources* on the organization 
pub async fn src_list(configuration: &configuration::Configuration, org_uid: &str, agent_uid_equals: Option<&str>, description_contains: Option<&str>, has_tags: Option<Vec<String>>, original_association: Option<bool>, page: Option<i32>, page_size: Option<i32>) -> Result<Vec<crate::models::Source>, Error<SrcListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/org/{orgUID}/source/", local_var_configuration.base_path, orgUID=crate::apis::urlencode(org_uid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = agent_uid_equals {
        local_var_req_builder = local_var_req_builder.query(&[("agent_uid_equals", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description_contains {
        local_var_req_builder = local_var_req_builder.query(&[("description_contains", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = has_tags {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("has_tags".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("has_tags", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = original_association {
        local_var_req_builder = local_var_req_builder.query(&[("original_association", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SrcListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

///  Loads the meta data for a source of data  * Requires the action  *org:LoadSource* on the organization 
pub async fn src_load(configuration: &configuration::Configuration, org_uid: &str, source_uid: &str) -> Result<crate::models::Source, Error<SrcLoadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/org/{orgUID}/source/{sourceUID}", local_var_configuration.base_path, orgUID=crate::apis::urlencode(org_uid), sourceUID=crate::apis::urlencode(source_uid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SrcLoadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

///  Updates the meta data for a source of data  * Requires the action  *org:UpdateSource* on the organization 
pub async fn src_update(configuration: &configuration::Configuration, org_uid: &str, source_uid: &str, src_update_input: Option<crate::models::SrcUpdateInput>) -> Result<(), Error<SrcUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v1/org/{orgUID}/source/{sourceUID}", local_var_configuration.base_path, orgUID=crate::apis::urlencode(org_uid), sourceUID=crate::apis::urlencode(source_uid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&src_update_input);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<SrcUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

