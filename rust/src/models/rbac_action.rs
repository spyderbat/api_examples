/*
 * Spyderbat API UI & Public APIs
 *
 * Restful APIs for use by UI & customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@spyderbat.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RbacAction {
    /// Action which meets the requirements of RBAC action naming
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    /// Return result of querying the users RBAC capabilities
    #[serde(rename = "can_perform", skip_serializing_if = "Option::is_none")]
    pub can_perform: Option<bool>,
    /// Error returned from permission checking
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    /// ResourceName which meets the requirements of RBAC resource naming
    #[serde(rename = "resource_name", skip_serializing_if = "Option::is_none")]
    pub resource_name: Option<String>,
}

impl RbacAction {
    pub fn new() -> RbacAction {
        RbacAction {
            action: None,
            can_perform: None,
            error: None,
            resource_name: None,
        }
    }
}


