/*
 * Spyderbat API UI & Public APIs
 *
 * Restful APIs for use by UI & customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@spyderbat.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct OrcApiBatWork {
    /// arguments to pass to the commandline
    #[serde(rename = "arguments", skip_serializing_if = "Option::is_none")]
    pub arguments: Option<Vec<String>>,
    /// ID of this specific type of bat, specified by Spyderbat
    #[serde(rename = "bat_uid", skip_serializing_if = "Option::is_none")]
    pub bat_uid: Option<String>,
    /// Execute this bat or not?
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// input parameters to the bat
    #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
    pub parameters: Option<::std::collections::HashMap<String, serde_json::Value>>,
    /// Order in which to start this bat
    #[serde(rename = "start_order", skip_serializing_if = "Option::is_none")]
    pub start_order: Option<i32>,
    /// uid of the specific bat work for a specific agent
    #[serde(rename = "uid", skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
    /// Newest version of the bat from the repository
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<::std::collections::HashMap<String, serde_json::Value>>,
}

impl OrcApiBatWork {
    pub fn new() -> OrcApiBatWork {
        OrcApiBatWork {
            arguments: None,
            bat_uid: None,
            enabled: None,
            parameters: None,
            start_order: None,
            uid: None,
            version: None,
        }
    }
}


