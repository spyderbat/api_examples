/*
 * Spyderbat API UI & Public APIs
 *
 * Restful APIs for use by UI & customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@spyderbat.com
 * Generated by: https://openapi-generator.tech
 */

/// NotificationPolicyDestination : A notification policy destination, containing one and only one of the available types



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct NotificationPolicyDestination {
    /// UI-supplied data
    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
    pub data: Option<serde_json::Value>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<Vec<String>>,
    #[serde(rename = "org_uid", skip_serializing_if = "Option::is_none")]
    pub org_uid: Option<String>,
    #[serde(rename = "slack", skip_serializing_if = "Option::is_none")]
    pub slack: Option<Box<crate::models::NotificationPolicyDestinationSlack>>,
    #[serde(rename = "users", skip_serializing_if = "Option::is_none")]
    pub users: Option<Vec<String>>,
    #[serde(rename = "webhook", skip_serializing_if = "Option::is_none")]
    pub webhook: Option<Box<crate::models::NotificationPolicyDestinationWebhook>>,
}

impl NotificationPolicyDestination {
    /// A notification policy destination, containing one and only one of the available types
    pub fn new() -> NotificationPolicyDestination {
        NotificationPolicyDestination {
            data: None,
            description: None,
            email: None,
            org_uid: None,
            slack: None,
            users: None,
            webhook: None,
        }
    }
}


