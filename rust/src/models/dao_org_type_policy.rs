/*
 * Spyderbat API UI & Public APIs
 *
 * Restful APIs for use by UI & customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@spyderbat.com
 * Generated by: https://openapi-generator.tech
 */

/// DaoOrgTypePolicy : Policy for the org



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DaoOrgTypePolicy {
    /// Maximum number of active sources
    #[serde(rename = "max_active_sources", skip_serializing_if = "Option::is_none")]
    pub max_active_sources: Option<i32>,
    /// Maximum number of associated organizational roles
    #[serde(rename = "max_org_roles", skip_serializing_if = "Option::is_none")]
    pub max_org_roles: Option<i32>,
    /// Name of the processing stack
    #[serde(rename = "processing_stack", skip_serializing_if = "Option::is_none")]
    pub processing_stack: Option<String>,
    /// Retention period for stored data, in days
    #[serde(rename = "retention_period", skip_serializing_if = "Option::is_none")]
    pub retention_period: Option<i32>,
}

impl DaoOrgTypePolicy {
    /// Policy for the org
    pub fn new() -> DaoOrgTypePolicy {
        DaoOrgTypePolicy {
            max_active_sources: None,
            max_org_roles: None,
            processing_stack: None,
            retention_period: None,
        }
    }
}


