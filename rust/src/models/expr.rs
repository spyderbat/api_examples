/*
 * Spyderbat API UI & Public APIs
 *
 * Restful APIs for use by UI & customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@spyderbat.com
 * Generated by: https://openapi-generator.tech
 */

/// Expr : Data which matches this expression are returned



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Expr {
    /// returns true if all of the contained expressions are true
    #[serde(rename = "and", skip_serializing_if = "Option::is_none")]
    pub and: Option<Vec<crate::models::Expr>>,
    /// returns true if the property is a string and contains the specified value
    #[serde(rename = "contains_str", skip_serializing_if = "Option::is_none")]
    pub contains_str: Option<String>,
    /// returns true if the property matches the supplied value
    #[serde(rename = "equals", skip_serializing_if = "Option::is_none")]
    pub equals: Option<serde_json::Value>,
    /// returns true if the property exists
    #[serde(rename = "exists", skip_serializing_if = "Option::is_none")]
    pub exists: Option<bool>,
    /// returns true if the property is a number and is greater than this value
    #[serde(rename = "greater_than", skip_serializing_if = "Option::is_none")]
    pub greater_than: Option<serde_json::Value>,
    /// returns true if the property is a string and has the specified prefix
    #[serde(rename = "has_prefix", skip_serializing_if = "Option::is_none")]
    pub has_prefix: Option<String>,
    /// returns true if the property is a string and has the specified suffix
    #[serde(rename = "has_suffix", skip_serializing_if = "Option::is_none")]
    pub has_suffix: Option<String>,
    /// returns true if the property matches any of the values specified
    #[serde(rename = "in", skip_serializing_if = "Option::is_none")]
    pub _in: Option<Vec<serde_json::Value>>,
    /// returns true if te property is a number and is less than this value
    #[serde(rename = "less_than", skip_serializing_if = "Option::is_none")]
    pub less_than: Option<serde_json::Value>,
    #[serde(rename = "not", skip_serializing_if = "Option::is_none")]
    pub not: Option<Box<crate::models::Expr>>,
    /// returns true if any of the contained expressions are true
    #[serde(rename = "or", skip_serializing_if = "Option::is_none")]
    pub or: Option<Vec<crate::models::Expr>>,
    /// property to match against, in dotted property notation
    #[serde(rename = "property", skip_serializing_if = "Option::is_none")]
    pub property: Option<String>,
    /// returns true if the property is a string and matches the specified regex
    #[serde(rename = "re_match", skip_serializing_if = "Option::is_none")]
    pub re_match: Option<String>,
    /// matches only records with the specified schema
    #[serde(rename = "schema", skip_serializing_if = "Option::is_none")]
    pub schema: Option<String>,
    #[serde(rename = "time_range", skip_serializing_if = "Option::is_none")]
    pub time_range: Option<Box<crate::models::RstreamTimeRange>>,
}

impl Expr {
    /// Data which matches this expression are returned
    pub fn new() -> Expr {
        Expr {
            and: None,
            contains_str: None,
            equals: None,
            exists: None,
            greater_than: None,
            has_prefix: None,
            has_suffix: None,
            _in: None,
            less_than: None,
            not: None,
            or: None,
            property: None,
            re_match: None,
            schema: None,
            time_range: None,
        }
    }
}


