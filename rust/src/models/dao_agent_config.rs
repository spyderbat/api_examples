/*
 * Spyderbat API UI & Public APIs
 *
 * Restful APIs for use by UI & customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@spyderbat.com
 * Generated by: https://openapi-generator.tech
 */

/// DaoAgentConfig : Initial configuration to use when creating an agent



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DaoAgentConfig {
    /// Agent classes
    #[serde(rename = "classes")]
    pub classes: Vec<crate::models::DaoAgentClass>,
    /// Description of the agent config
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Name of the agent config
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Tags to be applied to a source upon agent registration
    #[serde(rename = "source_tags", skip_serializing_if = "Option::is_none")]
    pub source_tags: Option<Vec<String>>,
    /// Type of agent config
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
}

impl DaoAgentConfig {
    /// Initial configuration to use when creating an agent
    pub fn new(classes: Vec<crate::models::DaoAgentClass>) -> DaoAgentConfig {
        DaoAgentConfig {
            classes,
            description: None,
            name: None,
            source_tags: None,
            _type: None,
        }
    }
}


