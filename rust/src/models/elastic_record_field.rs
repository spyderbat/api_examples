/*
 * Spyderbat API UI & Public APIs
 *
 * Restful APIs for use by UI & customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@spyderbat.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ElasticRecordField {
    #[serde(rename = "dynamic", skip_serializing_if = "Option::is_none")]
    pub dynamic: Option<bool>,
    #[serde(rename = "fields", skip_serializing_if = "Option::is_none")]
    pub fields: Option<::std::collections::HashMap<String, crate::models::ElasticRecordField>>,
    #[serde(rename = "index", skip_serializing_if = "Option::is_none")]
    pub index: Option<bool>,
    /// The properties associated with this field
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<::std::collections::HashMap<String, crate::models::ElasticRecordField>>,
    #[serde(rename = "store", skip_serializing_if = "Option::is_none")]
    pub store: Option<bool>,
    /// The type used for indexing, keyword=matches entire seaerch term, text=partial match, ip=ip address, float=number
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
}

impl ElasticRecordField {
    pub fn new() -> ElasticRecordField {
        ElasticRecordField {
            dynamic: None,
            fields: None,
            index: None,
            properties: None,
            store: None,
            _type: None,
        }
    }
}


