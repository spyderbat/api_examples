/*
 * Spyderbat API UI & Public APIs
 *
 * Restful APIs for use by UI & customers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@spyderbat.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RbacStatement {
    /// The actions that may be performed
    #[serde(rename = "actions", skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<String>>,
    /// Additional conditions which may be applied
    #[serde(rename = "condition", skip_serializing_if = "Option::is_none")]
    pub condition: Option<serde_json::Value>,
    /// The effect of the statement, i.e. allow or deny
    #[serde(rename = "effect")]
    pub effect: String,
    /// The resource the statement applies to
    #[serde(rename = "resources", skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<String>>,
    /// Statement ID, used to identify the statement in audit logs
    #[serde(rename = "sid")]
    pub sid: String,
}

impl RbacStatement {
    pub fn new(effect: String, sid: String) -> RbacStatement {
        RbacStatement {
            actions: None,
            condition: None,
            effect,
            resources: None,
            sid,
        }
    }
}


