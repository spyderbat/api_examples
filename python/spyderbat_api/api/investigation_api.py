"""
    Spyderbat API UI & Public APIs

    Restful APIs for use by UI & customers.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: apisupport@spyderbat.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from spyderbat_api.api_client import ApiClient, Endpoint as _Endpoint
from spyderbat_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from spyderbat_api.model.api_investigation_create_output import ApiInvestigationCreateOutput
from spyderbat_api.model.dao_investigation import DaoInvestigation
from spyderbat_api.model.investigation_create_input import InvestigationCreateInput
from spyderbat_api.model.investigation_update_input import InvestigationUpdateInput
from spyderbat_api.model.validation_error import ValidationError


class InvestigationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.investigation_create_endpoint = _Endpoint(
            settings={
                'response_type': (ApiInvestigationCreateOutput,),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/investigation/',
                'operation_id': 'investigation_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_uid',
                    'investigation_create_input',
                ],
                'required': [
                    'org_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_uid':
                        (str,),
                    'investigation_create_input':
                        (InvestigationCreateInput,),
                },
                'attribute_map': {
                    'org_uid': 'orgUID',
                },
                'location_map': {
                    'org_uid': 'path',
                    'investigation_create_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.investigation_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/investigation/{investigationUID}',
                'operation_id': 'investigation_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'investigation_uid',
                    'org_uid',
                ],
                'required': [
                    'investigation_uid',
                    'org_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'investigation_uid':
                        (str,),
                    'org_uid':
                        (str,),
                },
                'attribute_map': {
                    'investigation_uid': 'investigationUID',
                    'org_uid': 'orgUID',
                },
                'location_map': {
                    'investigation_uid': 'path',
                    'org_uid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.investigation_list_endpoint = _Endpoint(
            settings={
                'response_type': ([DaoInvestigation],),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/investigation/',
                'operation_id': 'investigation_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_uid',
                ],
                'required': [
                    'org_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_uid':
                        (str,),
                },
                'attribute_map': {
                    'org_uid': 'orgUID',
                },
                'location_map': {
                    'org_uid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.investigation_list_versions_endpoint = _Endpoint(
            settings={
                'response_type': ([DaoInvestigation],),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/investigation/{investigationUID}/version/',
                'operation_id': 'investigation_list_versions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'investigation_uid',
                    'org_uid',
                ],
                'required': [
                    'investigation_uid',
                    'org_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'investigation_uid':
                        (str,),
                    'org_uid':
                        (str,),
                },
                'attribute_map': {
                    'investigation_uid': 'investigationUID',
                    'org_uid': 'orgUID',
                },
                'location_map': {
                    'investigation_uid': 'path',
                    'org_uid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.investigation_load_endpoint = _Endpoint(
            settings={
                'response_type': (DaoInvestigation,),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/investigation/{investigationUID}',
                'operation_id': 'investigation_load',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'investigation_uid',
                    'org_uid',
                ],
                'required': [
                    'investigation_uid',
                    'org_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'investigation_uid',
                ]
            },
            root_map={
                'validations': {
                    ('investigation_uid',): {
                        'max_length': 64,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'investigation_uid':
                        (str,),
                    'org_uid':
                        (str,),
                },
                'attribute_map': {
                    'investigation_uid': 'investigationUID',
                    'org_uid': 'orgUID',
                },
                'location_map': {
                    'investigation_uid': 'path',
                    'org_uid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.investigation_load_version_endpoint = _Endpoint(
            settings={
                'response_type': (DaoInvestigation,),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/investigation/{investigationUID}/version/{version}',
                'operation_id': 'investigation_load_version',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'investigation_uid',
                    'org_uid',
                    'version',
                ],
                'required': [
                    'investigation_uid',
                    'org_uid',
                    'version',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'investigation_uid':
                        (str,),
                    'org_uid':
                        (str,),
                    'version':
                        (int,),
                },
                'attribute_map': {
                    'investigation_uid': 'investigationUID',
                    'org_uid': 'orgUID',
                    'version': 'version',
                },
                'location_map': {
                    'investigation_uid': 'path',
                    'org_uid': 'path',
                    'version': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.investigation_update_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/investigation/{investigationUID}',
                'operation_id': 'investigation_update',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'investigation_uid',
                    'org_uid',
                    'investigation_update_input',
                ],
                'required': [
                    'investigation_uid',
                    'org_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'investigation_uid':
                        (str,),
                    'org_uid':
                        (str,),
                    'investigation_update_input':
                        (InvestigationUpdateInput,),
                },
                'attribute_map': {
                    'investigation_uid': 'investigationUID',
                    'org_uid': 'orgUID',
                },
                'location_map': {
                    'investigation_uid': 'path',
                    'org_uid': 'path',
                    'investigation_update_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def investigation_create(
        self,
        org_uid,
        **kwargs
    ):
        """Create an investigation  # noqa: E501

         Create an investigationan   * Requires the user have the action *investigation:Create*   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investigation_create(org_uid, async_req=True)
        >>> result = thread.get()

        Args:
            org_uid (str): Investigation OrgUID

        Keyword Args:
            investigation_create_input (InvestigationCreateInput): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiInvestigationCreateOutput
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['org_uid'] = \
            org_uid
        return self.investigation_create_endpoint.call_with_http_info(**kwargs)

    def investigation_delete(
        self,
        investigation_uid,
        org_uid,
        **kwargs
    ):
        """Delete an investigation  # noqa: E501

         Deletes an investigation, by setting valid_to=now so that the investigation is virtually deleted.   * Requires the user have the action *investigation:Delete*   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investigation_delete(investigation_uid, org_uid, async_req=True)
        >>> result = thread.get()

        Args:
            investigation_uid (str): Investigation UID
            org_uid (str): Investigation OrgUID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['investigation_uid'] = \
            investigation_uid
        kwargs['org_uid'] = \
            org_uid
        return self.investigation_delete_endpoint.call_with_http_info(**kwargs)

    def investigation_list(
        self,
        org_uid,
        **kwargs
    ):
        """List investigations  # noqa: E501

         Lists investigations   * Will list investigations which the user has the action *investigation:Load* or *investigation:LoadExpired* on   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investigation_list(org_uid, async_req=True)
        >>> result = thread.get()

        Args:
            org_uid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [DaoInvestigation]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['org_uid'] = \
            org_uid
        return self.investigation_list_endpoint.call_with_http_info(**kwargs)

    def investigation_list_versions(
        self,
        investigation_uid,
        org_uid,
        **kwargs
    ):
        """List Investigation Versions  # noqa: E501

         Lists prior version of this investigation   * Requires the user have the action *investigation:ListVersions*   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investigation_list_versions(investigation_uid, org_uid, async_req=True)
        >>> result = thread.get()

        Args:
            investigation_uid (str):
            org_uid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [DaoInvestigation]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['investigation_uid'] = \
            investigation_uid
        kwargs['org_uid'] = \
            org_uid
        return self.investigation_list_versions_endpoint.call_with_http_info(**kwargs)

    def investigation_load(
        self,
        investigation_uid,
        org_uid,
        **kwargs
    ):
        """Load an investigation  # noqa: E501

         Loads an investigation by UID.    * Requires action  *investigation:Load* to load an active investigation  * Requires action *investigation:LoadExpired* to load expired investigations    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investigation_load(investigation_uid, org_uid, async_req=True)
        >>> result = thread.get()

        Args:
            investigation_uid (str):
            org_uid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DaoInvestigation
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['investigation_uid'] = \
            investigation_uid
        kwargs['org_uid'] = \
            org_uid
        return self.investigation_load_endpoint.call_with_http_info(**kwargs)

    def investigation_load_version(
        self,
        investigation_uid,
        org_uid,
        version,
        **kwargs
    ):
        """Load Investigation Version  # noqa: E501

         Loads a specific version of an investigation   * Requires the user have the action *investigation:LoadVersion*   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investigation_load_version(investigation_uid, org_uid, version, async_req=True)
        >>> result = thread.get()

        Args:
            investigation_uid (str):
            org_uid (str):
            version (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DaoInvestigation
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['investigation_uid'] = \
            investigation_uid
        kwargs['org_uid'] = \
            org_uid
        kwargs['version'] = \
            version
        return self.investigation_load_version_endpoint.call_with_http_info(**kwargs)

    def investigation_update(
        self,
        investigation_uid,
        org_uid,
        **kwargs
    ):
        """Update an investigation  # noqa: E501

         Updates the investigationan   * Requires the user have the action *investigation:Update*   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.investigation_update(investigation_uid, org_uid, async_req=True)
        >>> result = thread.get()

        Args:
            investigation_uid (str): Investigation UID
            org_uid (str): Investigation OrgUID

        Keyword Args:
            investigation_update_input (InvestigationUpdateInput): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['investigation_uid'] = \
            investigation_uid
        kwargs['org_uid'] = \
            org_uid
        return self.investigation_update_endpoint.call_with_http_info(**kwargs)

