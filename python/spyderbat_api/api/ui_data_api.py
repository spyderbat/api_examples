"""
    Spyderbat API UI & Public APIs

    Restful APIs for use by UI & customers.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: apisupport@spyderbat.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from spyderbat_api.api_client import ApiClient, Endpoint as _Endpoint
from spyderbat_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from spyderbat_api.model.ui_data import UIData
from spyderbat_api.model.ui_data_set_org_data_input import UiDataSetOrgDataInput
from spyderbat_api.model.ui_data_set_source_data_input import UiDataSetSourceDataInput
from spyderbat_api.model.ui_data_set_user_data_input import UiDataSetUserDataInput
from spyderbat_api.model.ui_data_set_user_org_data_input import UiDataSetUserOrgDataInput
from spyderbat_api.model.ui_data_set_user_source_data_input import UiDataSetUserSourceDataInput
from spyderbat_api.model.validation_error import ValidationError


class UIDataApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.ui_data_delete_org_data_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/uidata/{dataKey}',
                'operation_id': 'ui_data_delete_org_data',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'required': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ]
            },
            root_map={
                'validations': {
                    ('data_key',): {
                        'max_length': 32,
                    },
                    ('org_uid',): {
                        'max_length': 32,
                    },
                    ('source_uid',): {
                        'max_length': 32,
                    },
                    ('user_uid',): {
                        'max_length': 32,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_key':
                        (str,),
                    'org_uid':
                        (str,),
                    'source_uid':
                        (str,),
                    'user_uid':
                        (str,),
                },
                'attribute_map': {
                    'data_key': 'dataKey',
                    'org_uid': 'orgUID',
                    'source_uid': 'sourceUID',
                    'user_uid': 'userUID',
                },
                'location_map': {
                    'data_key': 'path',
                    'org_uid': 'path',
                    'source_uid': 'path',
                    'user_uid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.ui_data_delete_source_data_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/source/{sourceUID}/uidata/{dataKey}',
                'operation_id': 'ui_data_delete_source_data',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'required': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ]
            },
            root_map={
                'validations': {
                    ('data_key',): {
                        'max_length': 32,
                    },
                    ('org_uid',): {
                        'max_length': 32,
                    },
                    ('source_uid',): {
                        'max_length': 32,
                    },
                    ('user_uid',): {
                        'max_length': 32,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_key':
                        (str,),
                    'org_uid':
                        (str,),
                    'source_uid':
                        (str,),
                    'user_uid':
                        (str,),
                },
                'attribute_map': {
                    'data_key': 'dataKey',
                    'org_uid': 'orgUID',
                    'source_uid': 'sourceUID',
                    'user_uid': 'userUID',
                },
                'location_map': {
                    'data_key': 'path',
                    'org_uid': 'path',
                    'source_uid': 'path',
                    'user_uid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.ui_data_delete_user_data_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/user/{userUID}/uidata/{dataKey}',
                'operation_id': 'ui_data_delete_user_data',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'required': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ]
            },
            root_map={
                'validations': {
                    ('data_key',): {
                        'max_length': 32,
                    },
                    ('org_uid',): {
                        'max_length': 32,
                    },
                    ('source_uid',): {
                        'max_length': 32,
                    },
                    ('user_uid',): {
                        'max_length': 32,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_key':
                        (str,),
                    'org_uid':
                        (str,),
                    'source_uid':
                        (str,),
                    'user_uid':
                        (str,),
                },
                'attribute_map': {
                    'data_key': 'dataKey',
                    'org_uid': 'orgUID',
                    'source_uid': 'sourceUID',
                    'user_uid': 'userUID',
                },
                'location_map': {
                    'data_key': 'path',
                    'org_uid': 'path',
                    'source_uid': 'path',
                    'user_uid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.ui_data_delete_user_org_data_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/user/{userUID}/org/{orgUID}/uidata/{dataKey}',
                'operation_id': 'ui_data_delete_user_org_data',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'required': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ]
            },
            root_map={
                'validations': {
                    ('data_key',): {
                        'max_length': 32,
                    },
                    ('org_uid',): {
                        'max_length': 32,
                    },
                    ('source_uid',): {
                        'max_length': 32,
                    },
                    ('user_uid',): {
                        'max_length': 32,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_key':
                        (str,),
                    'org_uid':
                        (str,),
                    'source_uid':
                        (str,),
                    'user_uid':
                        (str,),
                },
                'attribute_map': {
                    'data_key': 'dataKey',
                    'org_uid': 'orgUID',
                    'source_uid': 'sourceUID',
                    'user_uid': 'userUID',
                },
                'location_map': {
                    'data_key': 'path',
                    'org_uid': 'path',
                    'source_uid': 'path',
                    'user_uid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.ui_data_delete_user_source_data_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/user/{userUID}/org/{orgUID}/source/{sourceUID}/uidata/{dataKey}',
                'operation_id': 'ui_data_delete_user_source_data',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'required': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ]
            },
            root_map={
                'validations': {
                    ('data_key',): {
                        'max_length': 32,
                    },
                    ('org_uid',): {
                        'max_length': 32,
                    },
                    ('source_uid',): {
                        'max_length': 32,
                    },
                    ('user_uid',): {
                        'max_length': 32,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_key':
                        (str,),
                    'org_uid':
                        (str,),
                    'source_uid':
                        (str,),
                    'user_uid':
                        (str,),
                },
                'attribute_map': {
                    'data_key': 'dataKey',
                    'org_uid': 'orgUID',
                    'source_uid': 'sourceUID',
                    'user_uid': 'userUID',
                },
                'location_map': {
                    'data_key': 'path',
                    'org_uid': 'path',
                    'source_uid': 'path',
                    'user_uid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.ui_data_get_org_data_endpoint = _Endpoint(
            settings={
                'response_type': (UIData,),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/uidata/{dataKey}',
                'operation_id': 'ui_data_get_org_data',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'required': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ]
            },
            root_map={
                'validations': {
                    ('data_key',): {
                        'max_length': 32,
                    },
                    ('org_uid',): {
                        'max_length': 32,
                    },
                    ('source_uid',): {
                        'max_length': 32,
                    },
                    ('user_uid',): {
                        'max_length': 32,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_key':
                        (str,),
                    'org_uid':
                        (str,),
                    'source_uid':
                        (str,),
                    'user_uid':
                        (str,),
                },
                'attribute_map': {
                    'data_key': 'dataKey',
                    'org_uid': 'orgUID',
                    'source_uid': 'sourceUID',
                    'user_uid': 'userUID',
                },
                'location_map': {
                    'data_key': 'path',
                    'org_uid': 'path',
                    'source_uid': 'path',
                    'user_uid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.ui_data_get_source_data_endpoint = _Endpoint(
            settings={
                'response_type': (UIData,),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/source/{sourceUID}/uidata/{dataKey}',
                'operation_id': 'ui_data_get_source_data',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'required': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ]
            },
            root_map={
                'validations': {
                    ('data_key',): {
                        'max_length': 32,
                    },
                    ('org_uid',): {
                        'max_length': 32,
                    },
                    ('source_uid',): {
                        'max_length': 32,
                    },
                    ('user_uid',): {
                        'max_length': 32,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_key':
                        (str,),
                    'org_uid':
                        (str,),
                    'source_uid':
                        (str,),
                    'user_uid':
                        (str,),
                },
                'attribute_map': {
                    'data_key': 'dataKey',
                    'org_uid': 'orgUID',
                    'source_uid': 'sourceUID',
                    'user_uid': 'userUID',
                },
                'location_map': {
                    'data_key': 'path',
                    'org_uid': 'path',
                    'source_uid': 'path',
                    'user_uid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.ui_data_get_user_data_endpoint = _Endpoint(
            settings={
                'response_type': (UIData,),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/user/{userUID}/uidata/{dataKey}',
                'operation_id': 'ui_data_get_user_data',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'required': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ]
            },
            root_map={
                'validations': {
                    ('data_key',): {
                        'max_length': 32,
                    },
                    ('org_uid',): {
                        'max_length': 32,
                    },
                    ('source_uid',): {
                        'max_length': 32,
                    },
                    ('user_uid',): {
                        'max_length': 32,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_key':
                        (str,),
                    'org_uid':
                        (str,),
                    'source_uid':
                        (str,),
                    'user_uid':
                        (str,),
                },
                'attribute_map': {
                    'data_key': 'dataKey',
                    'org_uid': 'orgUID',
                    'source_uid': 'sourceUID',
                    'user_uid': 'userUID',
                },
                'location_map': {
                    'data_key': 'path',
                    'org_uid': 'path',
                    'source_uid': 'path',
                    'user_uid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.ui_data_get_user_org_data_endpoint = _Endpoint(
            settings={
                'response_type': (UIData,),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/user/{userUID}/org/{orgUID}/uidata/{dataKey}',
                'operation_id': 'ui_data_get_user_org_data',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'required': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ]
            },
            root_map={
                'validations': {
                    ('data_key',): {
                        'max_length': 32,
                    },
                    ('org_uid',): {
                        'max_length': 32,
                    },
                    ('source_uid',): {
                        'max_length': 32,
                    },
                    ('user_uid',): {
                        'max_length': 32,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_key':
                        (str,),
                    'org_uid':
                        (str,),
                    'source_uid':
                        (str,),
                    'user_uid':
                        (str,),
                },
                'attribute_map': {
                    'data_key': 'dataKey',
                    'org_uid': 'orgUID',
                    'source_uid': 'sourceUID',
                    'user_uid': 'userUID',
                },
                'location_map': {
                    'data_key': 'path',
                    'org_uid': 'path',
                    'source_uid': 'path',
                    'user_uid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.ui_data_get_user_source_data_endpoint = _Endpoint(
            settings={
                'response_type': (UIData,),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/user/{userUID}/org/{orgUID}/source/{sourceUID}/uidata/{dataKey}',
                'operation_id': 'ui_data_get_user_source_data',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'required': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ]
            },
            root_map={
                'validations': {
                    ('data_key',): {
                        'max_length': 32,
                    },
                    ('org_uid',): {
                        'max_length': 32,
                    },
                    ('source_uid',): {
                        'max_length': 32,
                    },
                    ('user_uid',): {
                        'max_length': 32,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_key':
                        (str,),
                    'org_uid':
                        (str,),
                    'source_uid':
                        (str,),
                    'user_uid':
                        (str,),
                },
                'attribute_map': {
                    'data_key': 'dataKey',
                    'org_uid': 'orgUID',
                    'source_uid': 'sourceUID',
                    'user_uid': 'userUID',
                },
                'location_map': {
                    'data_key': 'path',
                    'org_uid': 'path',
                    'source_uid': 'path',
                    'user_uid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.ui_data_query_org_data_endpoint = _Endpoint(
            settings={
                'response_type': ([UIData],),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/uidata/',
                'operation_id': 'ui_data_query_org_data',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                    'tags',
                ],
                'required': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                    'tags',
                ]
            },
            root_map={
                'validations': {
                    ('data_key',): {
                        'max_length': 32,
                    },
                    ('org_uid',): {
                        'max_length': 32,
                    },
                    ('source_uid',): {
                        'max_length': 32,
                    },
                    ('user_uid',): {
                        'max_length': 32,
                    },
                    ('tags',): {

                        'max_items': 5,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_key':
                        (str,),
                    'org_uid':
                        (str,),
                    'source_uid':
                        (str,),
                    'user_uid':
                        (str,),
                    'tags':
                        ([str],),
                },
                'attribute_map': {
                    'data_key': 'dataKey',
                    'org_uid': 'orgUID',
                    'source_uid': 'sourceUID',
                    'user_uid': 'userUID',
                    'tags': 'tags',
                },
                'location_map': {
                    'data_key': 'path',
                    'org_uid': 'path',
                    'source_uid': 'path',
                    'user_uid': 'path',
                    'tags': 'query',
                },
                'collection_format_map': {
                    'tags': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.ui_data_query_source_data_endpoint = _Endpoint(
            settings={
                'response_type': ([UIData],),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/source/{sourceUID}/uidata/',
                'operation_id': 'ui_data_query_source_data',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                    'tags',
                ],
                'required': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                    'tags',
                ]
            },
            root_map={
                'validations': {
                    ('data_key',): {
                        'max_length': 32,
                    },
                    ('org_uid',): {
                        'max_length': 32,
                    },
                    ('source_uid',): {
                        'max_length': 32,
                    },
                    ('user_uid',): {
                        'max_length': 32,
                    },
                    ('tags',): {

                        'max_items': 5,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_key':
                        (str,),
                    'org_uid':
                        (str,),
                    'source_uid':
                        (str,),
                    'user_uid':
                        (str,),
                    'tags':
                        ([str],),
                },
                'attribute_map': {
                    'data_key': 'dataKey',
                    'org_uid': 'orgUID',
                    'source_uid': 'sourceUID',
                    'user_uid': 'userUID',
                    'tags': 'tags',
                },
                'location_map': {
                    'data_key': 'path',
                    'org_uid': 'path',
                    'source_uid': 'path',
                    'user_uid': 'path',
                    'tags': 'query',
                },
                'collection_format_map': {
                    'tags': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.ui_data_query_user_data_endpoint = _Endpoint(
            settings={
                'response_type': ([UIData],),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/user/{userUID}/uidata/',
                'operation_id': 'ui_data_query_user_data',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                    'tags',
                ],
                'required': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                    'tags',
                ]
            },
            root_map={
                'validations': {
                    ('data_key',): {
                        'max_length': 32,
                    },
                    ('org_uid',): {
                        'max_length': 32,
                    },
                    ('source_uid',): {
                        'max_length': 32,
                    },
                    ('user_uid',): {
                        'max_length': 32,
                    },
                    ('tags',): {

                        'max_items': 5,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_key':
                        (str,),
                    'org_uid':
                        (str,),
                    'source_uid':
                        (str,),
                    'user_uid':
                        (str,),
                    'tags':
                        ([str],),
                },
                'attribute_map': {
                    'data_key': 'dataKey',
                    'org_uid': 'orgUID',
                    'source_uid': 'sourceUID',
                    'user_uid': 'userUID',
                    'tags': 'tags',
                },
                'location_map': {
                    'data_key': 'path',
                    'org_uid': 'path',
                    'source_uid': 'path',
                    'user_uid': 'path',
                    'tags': 'query',
                },
                'collection_format_map': {
                    'tags': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.ui_data_query_user_org_data_endpoint = _Endpoint(
            settings={
                'response_type': ([UIData],),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/user/{userUID}/org/{orgUID}/uidata/',
                'operation_id': 'ui_data_query_user_org_data',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                    'tags',
                ],
                'required': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                    'tags',
                ]
            },
            root_map={
                'validations': {
                    ('data_key',): {
                        'max_length': 32,
                    },
                    ('org_uid',): {
                        'max_length': 32,
                    },
                    ('source_uid',): {
                        'max_length': 32,
                    },
                    ('user_uid',): {
                        'max_length': 32,
                    },
                    ('tags',): {

                        'max_items': 5,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_key':
                        (str,),
                    'org_uid':
                        (str,),
                    'source_uid':
                        (str,),
                    'user_uid':
                        (str,),
                    'tags':
                        ([str],),
                },
                'attribute_map': {
                    'data_key': 'dataKey',
                    'org_uid': 'orgUID',
                    'source_uid': 'sourceUID',
                    'user_uid': 'userUID',
                    'tags': 'tags',
                },
                'location_map': {
                    'data_key': 'path',
                    'org_uid': 'path',
                    'source_uid': 'path',
                    'user_uid': 'path',
                    'tags': 'query',
                },
                'collection_format_map': {
                    'tags': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.ui_data_query_user_source_data_endpoint = _Endpoint(
            settings={
                'response_type': ([UIData],),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/user/{userUID}/org/{orgUID}/source/{sourceUID}/uidata/',
                'operation_id': 'ui_data_query_user_source_data',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                    'tags',
                ],
                'required': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                    'tags',
                ]
            },
            root_map={
                'validations': {
                    ('data_key',): {
                        'max_length': 32,
                    },
                    ('org_uid',): {
                        'max_length': 32,
                    },
                    ('source_uid',): {
                        'max_length': 32,
                    },
                    ('user_uid',): {
                        'max_length': 32,
                    },
                    ('tags',): {

                        'max_items': 5,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_key':
                        (str,),
                    'org_uid':
                        (str,),
                    'source_uid':
                        (str,),
                    'user_uid':
                        (str,),
                    'tags':
                        ([str],),
                },
                'attribute_map': {
                    'data_key': 'dataKey',
                    'org_uid': 'orgUID',
                    'source_uid': 'sourceUID',
                    'user_uid': 'userUID',
                    'tags': 'tags',
                },
                'location_map': {
                    'data_key': 'path',
                    'org_uid': 'path',
                    'source_uid': 'path',
                    'user_uid': 'path',
                    'tags': 'query',
                },
                'collection_format_map': {
                    'tags': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.ui_data_set_org_data_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/uidata/{dataKey}',
                'operation_id': 'ui_data_set_org_data',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                    'ui_data_set_org_data_input',
                ],
                'required': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ]
            },
            root_map={
                'validations': {
                    ('data_key',): {
                        'max_length': 32,
                    },
                    ('org_uid',): {
                        'max_length': 32,
                    },
                    ('source_uid',): {
                        'max_length': 32,
                    },
                    ('user_uid',): {
                        'max_length': 32,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_key':
                        (str,),
                    'org_uid':
                        (str,),
                    'source_uid':
                        (str,),
                    'user_uid':
                        (str,),
                    'ui_data_set_org_data_input':
                        (UiDataSetOrgDataInput,),
                },
                'attribute_map': {
                    'data_key': 'dataKey',
                    'org_uid': 'orgUID',
                    'source_uid': 'sourceUID',
                    'user_uid': 'userUID',
                },
                'location_map': {
                    'data_key': 'path',
                    'org_uid': 'path',
                    'source_uid': 'path',
                    'user_uid': 'path',
                    'ui_data_set_org_data_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.ui_data_set_source_data_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/source/{sourceUID}/uidata/{dataKey}',
                'operation_id': 'ui_data_set_source_data',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                    'ui_data_set_source_data_input',
                ],
                'required': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ]
            },
            root_map={
                'validations': {
                    ('data_key',): {
                        'max_length': 32,
                    },
                    ('org_uid',): {
                        'max_length': 32,
                    },
                    ('source_uid',): {
                        'max_length': 32,
                    },
                    ('user_uid',): {
                        'max_length': 32,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_key':
                        (str,),
                    'org_uid':
                        (str,),
                    'source_uid':
                        (str,),
                    'user_uid':
                        (str,),
                    'ui_data_set_source_data_input':
                        (UiDataSetSourceDataInput,),
                },
                'attribute_map': {
                    'data_key': 'dataKey',
                    'org_uid': 'orgUID',
                    'source_uid': 'sourceUID',
                    'user_uid': 'userUID',
                },
                'location_map': {
                    'data_key': 'path',
                    'org_uid': 'path',
                    'source_uid': 'path',
                    'user_uid': 'path',
                    'ui_data_set_source_data_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.ui_data_set_user_data_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/user/{userUID}/uidata/{dataKey}',
                'operation_id': 'ui_data_set_user_data',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                    'ui_data_set_user_data_input',
                ],
                'required': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ]
            },
            root_map={
                'validations': {
                    ('data_key',): {
                        'max_length': 32,
                    },
                    ('org_uid',): {
                        'max_length': 32,
                    },
                    ('source_uid',): {
                        'max_length': 32,
                    },
                    ('user_uid',): {
                        'max_length': 32,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_key':
                        (str,),
                    'org_uid':
                        (str,),
                    'source_uid':
                        (str,),
                    'user_uid':
                        (str,),
                    'ui_data_set_user_data_input':
                        (UiDataSetUserDataInput,),
                },
                'attribute_map': {
                    'data_key': 'dataKey',
                    'org_uid': 'orgUID',
                    'source_uid': 'sourceUID',
                    'user_uid': 'userUID',
                },
                'location_map': {
                    'data_key': 'path',
                    'org_uid': 'path',
                    'source_uid': 'path',
                    'user_uid': 'path',
                    'ui_data_set_user_data_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.ui_data_set_user_org_data_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/user/{userUID}/org/{orgUID}/uidata/{dataKey}',
                'operation_id': 'ui_data_set_user_org_data',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                    'ui_data_set_user_org_data_input',
                ],
                'required': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ]
            },
            root_map={
                'validations': {
                    ('data_key',): {
                        'max_length': 32,
                    },
                    ('org_uid',): {
                        'max_length': 32,
                    },
                    ('source_uid',): {
                        'max_length': 32,
                    },
                    ('user_uid',): {
                        'max_length': 32,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_key':
                        (str,),
                    'org_uid':
                        (str,),
                    'source_uid':
                        (str,),
                    'user_uid':
                        (str,),
                    'ui_data_set_user_org_data_input':
                        (UiDataSetUserOrgDataInput,),
                },
                'attribute_map': {
                    'data_key': 'dataKey',
                    'org_uid': 'orgUID',
                    'source_uid': 'sourceUID',
                    'user_uid': 'userUID',
                },
                'location_map': {
                    'data_key': 'path',
                    'org_uid': 'path',
                    'source_uid': 'path',
                    'user_uid': 'path',
                    'ui_data_set_user_org_data_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.ui_data_set_user_source_data_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/user/{userUID}/org/{orgUID}/source/{sourceUID}/uidata/{dataKey}',
                'operation_id': 'ui_data_set_user_source_data',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                    'ui_data_set_user_source_data_input',
                ],
                'required': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'data_key',
                    'org_uid',
                    'source_uid',
                    'user_uid',
                ]
            },
            root_map={
                'validations': {
                    ('data_key',): {
                        'max_length': 32,
                    },
                    ('org_uid',): {
                        'max_length': 32,
                    },
                    ('source_uid',): {
                        'max_length': 32,
                    },
                    ('user_uid',): {
                        'max_length': 32,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_key':
                        (str,),
                    'org_uid':
                        (str,),
                    'source_uid':
                        (str,),
                    'user_uid':
                        (str,),
                    'ui_data_set_user_source_data_input':
                        (UiDataSetUserSourceDataInput,),
                },
                'attribute_map': {
                    'data_key': 'dataKey',
                    'org_uid': 'orgUID',
                    'source_uid': 'sourceUID',
                    'user_uid': 'userUID',
                },
                'location_map': {
                    'data_key': 'path',
                    'org_uid': 'path',
                    'source_uid': 'path',
                    'user_uid': 'path',
                    'ui_data_set_user_source_data_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def ui_data_delete_org_data(
        self,
        data_key,
        org_uid,
        source_uid,
        user_uid,
        **kwargs
    ):
        """Delete Org UI Data  # noqa: E501

         Sets UI Data   * Requires *uidata:Delete*    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ui_data_delete_org_data(data_key, org_uid, source_uid, user_uid, async_req=True)
        >>> result = thread.get()

        Args:
            data_key (str): Key for the data
            org_uid (str): Org UID
            source_uid (str): Src UID
            user_uid (str): Owner UID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_key'] = \
            data_key
        kwargs['org_uid'] = \
            org_uid
        kwargs['source_uid'] = \
            source_uid
        kwargs['user_uid'] = \
            user_uid
        return self.ui_data_delete_org_data_endpoint.call_with_http_info(**kwargs)

    def ui_data_delete_source_data(
        self,
        data_key,
        org_uid,
        source_uid,
        user_uid,
        **kwargs
    ):
        """Delete Source UI Data  # noqa: E501

         Sets UI Data   * Requires *uidata:Delete*    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ui_data_delete_source_data(data_key, org_uid, source_uid, user_uid, async_req=True)
        >>> result = thread.get()

        Args:
            data_key (str): Key for the data
            org_uid (str): Org UID
            source_uid (str): Src UID
            user_uid (str): Owner UID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_key'] = \
            data_key
        kwargs['org_uid'] = \
            org_uid
        kwargs['source_uid'] = \
            source_uid
        kwargs['user_uid'] = \
            user_uid
        return self.ui_data_delete_source_data_endpoint.call_with_http_info(**kwargs)

    def ui_data_delete_user_data(
        self,
        data_key,
        org_uid,
        source_uid,
        user_uid,
        **kwargs
    ):
        """Delete User UI Data  # noqa: E501

         Sets UI Data   * Requires *uidata:Delete*    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ui_data_delete_user_data(data_key, org_uid, source_uid, user_uid, async_req=True)
        >>> result = thread.get()

        Args:
            data_key (str): Key for the data
            org_uid (str): Org UID
            source_uid (str): Src UID
            user_uid (str): Owner UID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_key'] = \
            data_key
        kwargs['org_uid'] = \
            org_uid
        kwargs['source_uid'] = \
            source_uid
        kwargs['user_uid'] = \
            user_uid
        return self.ui_data_delete_user_data_endpoint.call_with_http_info(**kwargs)

    def ui_data_delete_user_org_data(
        self,
        data_key,
        org_uid,
        source_uid,
        user_uid,
        **kwargs
    ):
        """Delete UserOrg UI Data  # noqa: E501

         Sets UI Data   * Requires *uidata:Delete*    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ui_data_delete_user_org_data(data_key, org_uid, source_uid, user_uid, async_req=True)
        >>> result = thread.get()

        Args:
            data_key (str): Key for the data
            org_uid (str): Org UID
            source_uid (str): Src UID
            user_uid (str): Owner UID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_key'] = \
            data_key
        kwargs['org_uid'] = \
            org_uid
        kwargs['source_uid'] = \
            source_uid
        kwargs['user_uid'] = \
            user_uid
        return self.ui_data_delete_user_org_data_endpoint.call_with_http_info(**kwargs)

    def ui_data_delete_user_source_data(
        self,
        data_key,
        org_uid,
        source_uid,
        user_uid,
        **kwargs
    ):
        """Delete UserSource UI Data  # noqa: E501

         Sets UI Data   * Requires *uidata:Delete*    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ui_data_delete_user_source_data(data_key, org_uid, source_uid, user_uid, async_req=True)
        >>> result = thread.get()

        Args:
            data_key (str): Key for the data
            org_uid (str): Org UID
            source_uid (str): Src UID
            user_uid (str): Owner UID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_key'] = \
            data_key
        kwargs['org_uid'] = \
            org_uid
        kwargs['source_uid'] = \
            source_uid
        kwargs['user_uid'] = \
            user_uid
        return self.ui_data_delete_user_source_data_endpoint.call_with_http_info(**kwargs)

    def ui_data_get_org_data(
        self,
        data_key,
        org_uid,
        source_uid,
        user_uid,
        **kwargs
    ):
        """Get Org UI Data  # noqa: E501

         Gets UI Data   * Updates lastused  * Requires *uidata:Get*    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ui_data_get_org_data(data_key, org_uid, source_uid, user_uid, async_req=True)
        >>> result = thread.get()

        Args:
            data_key (str): Key for the data
            org_uid (str): Org UID
            source_uid (str): Src UID
            user_uid (str): Owner UID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            UIData
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_key'] = \
            data_key
        kwargs['org_uid'] = \
            org_uid
        kwargs['source_uid'] = \
            source_uid
        kwargs['user_uid'] = \
            user_uid
        return self.ui_data_get_org_data_endpoint.call_with_http_info(**kwargs)

    def ui_data_get_source_data(
        self,
        data_key,
        org_uid,
        source_uid,
        user_uid,
        **kwargs
    ):
        """Get Source UI Data  # noqa: E501

         Gets UI Data   * Updates lastused  * Requires *uidata:Get*    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ui_data_get_source_data(data_key, org_uid, source_uid, user_uid, async_req=True)
        >>> result = thread.get()

        Args:
            data_key (str): Key for the data
            org_uid (str): Org UID
            source_uid (str): Src UID
            user_uid (str): Owner UID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            UIData
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_key'] = \
            data_key
        kwargs['org_uid'] = \
            org_uid
        kwargs['source_uid'] = \
            source_uid
        kwargs['user_uid'] = \
            user_uid
        return self.ui_data_get_source_data_endpoint.call_with_http_info(**kwargs)

    def ui_data_get_user_data(
        self,
        data_key,
        org_uid,
        source_uid,
        user_uid,
        **kwargs
    ):
        """Get User UI Data  # noqa: E501

         Gets UI Data   * Updates lastused  * Requires *uidata:Get*    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ui_data_get_user_data(data_key, org_uid, source_uid, user_uid, async_req=True)
        >>> result = thread.get()

        Args:
            data_key (str): Key for the data
            org_uid (str): Org UID
            source_uid (str): Src UID
            user_uid (str): Owner UID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            UIData
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_key'] = \
            data_key
        kwargs['org_uid'] = \
            org_uid
        kwargs['source_uid'] = \
            source_uid
        kwargs['user_uid'] = \
            user_uid
        return self.ui_data_get_user_data_endpoint.call_with_http_info(**kwargs)

    def ui_data_get_user_org_data(
        self,
        data_key,
        org_uid,
        source_uid,
        user_uid,
        **kwargs
    ):
        """Get UserOrg UI Data  # noqa: E501

         Gets UI Data   * Updates lastused  * Requires *uidata:Get*    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ui_data_get_user_org_data(data_key, org_uid, source_uid, user_uid, async_req=True)
        >>> result = thread.get()

        Args:
            data_key (str): Key for the data
            org_uid (str): Org UID
            source_uid (str): Src UID
            user_uid (str): Owner UID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            UIData
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_key'] = \
            data_key
        kwargs['org_uid'] = \
            org_uid
        kwargs['source_uid'] = \
            source_uid
        kwargs['user_uid'] = \
            user_uid
        return self.ui_data_get_user_org_data_endpoint.call_with_http_info(**kwargs)

    def ui_data_get_user_source_data(
        self,
        data_key,
        org_uid,
        source_uid,
        user_uid,
        **kwargs
    ):
        """Get UserSource UI Data  # noqa: E501

         Gets UI Data   * Updates lastused  * Requires *uidata:Get*    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ui_data_get_user_source_data(data_key, org_uid, source_uid, user_uid, async_req=True)
        >>> result = thread.get()

        Args:
            data_key (str): Key for the data
            org_uid (str): Org UID
            source_uid (str): Src UID
            user_uid (str): Owner UID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            UIData
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_key'] = \
            data_key
        kwargs['org_uid'] = \
            org_uid
        kwargs['source_uid'] = \
            source_uid
        kwargs['user_uid'] = \
            user_uid
        return self.ui_data_get_user_source_data_endpoint.call_with_http_info(**kwargs)

    def ui_data_query_org_data(
        self,
        data_key,
        org_uid,
        source_uid,
        user_uid,
        **kwargs
    ):
        """Query Org UI Data  # noqa: E501

         Query UI Data   * Requires *uidata:Query*    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ui_data_query_org_data(data_key, org_uid, source_uid, user_uid, async_req=True)
        >>> result = thread.get()

        Args:
            data_key (str): Key for the data
            org_uid (str): Org UID
            source_uid (str): Src UID
            user_uid (str): Owner UID

        Keyword Args:
            tags ([str]): Tags to search for. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [UIData]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_key'] = \
            data_key
        kwargs['org_uid'] = \
            org_uid
        kwargs['source_uid'] = \
            source_uid
        kwargs['user_uid'] = \
            user_uid
        return self.ui_data_query_org_data_endpoint.call_with_http_info(**kwargs)

    def ui_data_query_source_data(
        self,
        data_key,
        org_uid,
        source_uid,
        user_uid,
        **kwargs
    ):
        """Query Source UI Data  # noqa: E501

         Query UI Data   * Requires *uidata:Query*    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ui_data_query_source_data(data_key, org_uid, source_uid, user_uid, async_req=True)
        >>> result = thread.get()

        Args:
            data_key (str): Key for the data
            org_uid (str): Org UID
            source_uid (str): Src UID
            user_uid (str): Owner UID

        Keyword Args:
            tags ([str]): Tags to search for. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [UIData]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_key'] = \
            data_key
        kwargs['org_uid'] = \
            org_uid
        kwargs['source_uid'] = \
            source_uid
        kwargs['user_uid'] = \
            user_uid
        return self.ui_data_query_source_data_endpoint.call_with_http_info(**kwargs)

    def ui_data_query_user_data(
        self,
        data_key,
        org_uid,
        source_uid,
        user_uid,
        **kwargs
    ):
        """Query User UI Data  # noqa: E501

         Query UI Data   * Requires *uidata:Query*    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ui_data_query_user_data(data_key, org_uid, source_uid, user_uid, async_req=True)
        >>> result = thread.get()

        Args:
            data_key (str): Key for the data
            org_uid (str): Org UID
            source_uid (str): Src UID
            user_uid (str): Owner UID

        Keyword Args:
            tags ([str]): Tags to search for. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [UIData]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_key'] = \
            data_key
        kwargs['org_uid'] = \
            org_uid
        kwargs['source_uid'] = \
            source_uid
        kwargs['user_uid'] = \
            user_uid
        return self.ui_data_query_user_data_endpoint.call_with_http_info(**kwargs)

    def ui_data_query_user_org_data(
        self,
        data_key,
        org_uid,
        source_uid,
        user_uid,
        **kwargs
    ):
        """Query UserOrg UI Data  # noqa: E501

         Query UI Data   * Requires *uidata:Query*    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ui_data_query_user_org_data(data_key, org_uid, source_uid, user_uid, async_req=True)
        >>> result = thread.get()

        Args:
            data_key (str): Key for the data
            org_uid (str): Org UID
            source_uid (str): Src UID
            user_uid (str): Owner UID

        Keyword Args:
            tags ([str]): Tags to search for. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [UIData]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_key'] = \
            data_key
        kwargs['org_uid'] = \
            org_uid
        kwargs['source_uid'] = \
            source_uid
        kwargs['user_uid'] = \
            user_uid
        return self.ui_data_query_user_org_data_endpoint.call_with_http_info(**kwargs)

    def ui_data_query_user_source_data(
        self,
        data_key,
        org_uid,
        source_uid,
        user_uid,
        **kwargs
    ):
        """Query UserSource UI Data  # noqa: E501

         Query UI Data   * Requires *uidata:Query*    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ui_data_query_user_source_data(data_key, org_uid, source_uid, user_uid, async_req=True)
        >>> result = thread.get()

        Args:
            data_key (str): Key for the data
            org_uid (str): Org UID
            source_uid (str): Src UID
            user_uid (str): Owner UID

        Keyword Args:
            tags ([str]): Tags to search for. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [UIData]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_key'] = \
            data_key
        kwargs['org_uid'] = \
            org_uid
        kwargs['source_uid'] = \
            source_uid
        kwargs['user_uid'] = \
            user_uid
        return self.ui_data_query_user_source_data_endpoint.call_with_http_info(**kwargs)

    def ui_data_set_org_data(
        self,
        data_key,
        org_uid,
        source_uid,
        user_uid,
        **kwargs
    ):
        """Set Org UI Data  # noqa: E501

         Sets UI Data   * Updates data, valid_to (if set), lastused  * Requires *uidata:Set*    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ui_data_set_org_data(data_key, org_uid, source_uid, user_uid, async_req=True)
        >>> result = thread.get()

        Args:
            data_key (str): Key for the data
            org_uid (str): Org UID
            source_uid (str): Source UID
            user_uid (str): Owner UID

        Keyword Args:
            ui_data_set_org_data_input (UiDataSetOrgDataInput): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_key'] = \
            data_key
        kwargs['org_uid'] = \
            org_uid
        kwargs['source_uid'] = \
            source_uid
        kwargs['user_uid'] = \
            user_uid
        return self.ui_data_set_org_data_endpoint.call_with_http_info(**kwargs)

    def ui_data_set_source_data(
        self,
        data_key,
        org_uid,
        source_uid,
        user_uid,
        **kwargs
    ):
        """Set Source UI Data  # noqa: E501

         Sets UI Data   * Updates data, valid_to (if set), lastused  * Requires *uidata:Set*    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ui_data_set_source_data(data_key, org_uid, source_uid, user_uid, async_req=True)
        >>> result = thread.get()

        Args:
            data_key (str): Key for the data
            org_uid (str): Org UID
            source_uid (str): Source UID
            user_uid (str): Owner UID

        Keyword Args:
            ui_data_set_source_data_input (UiDataSetSourceDataInput): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_key'] = \
            data_key
        kwargs['org_uid'] = \
            org_uid
        kwargs['source_uid'] = \
            source_uid
        kwargs['user_uid'] = \
            user_uid
        return self.ui_data_set_source_data_endpoint.call_with_http_info(**kwargs)

    def ui_data_set_user_data(
        self,
        data_key,
        org_uid,
        source_uid,
        user_uid,
        **kwargs
    ):
        """Set User UI Data  # noqa: E501

         Sets UI Data   * Updates data, valid_to (if set), lastused  * Requires *uidata:Set*    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ui_data_set_user_data(data_key, org_uid, source_uid, user_uid, async_req=True)
        >>> result = thread.get()

        Args:
            data_key (str): Key for the data
            org_uid (str): Org UID
            source_uid (str): Source UID
            user_uid (str): Owner UID

        Keyword Args:
            ui_data_set_user_data_input (UiDataSetUserDataInput): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_key'] = \
            data_key
        kwargs['org_uid'] = \
            org_uid
        kwargs['source_uid'] = \
            source_uid
        kwargs['user_uid'] = \
            user_uid
        return self.ui_data_set_user_data_endpoint.call_with_http_info(**kwargs)

    def ui_data_set_user_org_data(
        self,
        data_key,
        org_uid,
        source_uid,
        user_uid,
        **kwargs
    ):
        """Set UserOrg UI Data  # noqa: E501

         Sets UI Data   * Updates data, valid_to (if set), lastused  * Requires *uidata:Set*    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ui_data_set_user_org_data(data_key, org_uid, source_uid, user_uid, async_req=True)
        >>> result = thread.get()

        Args:
            data_key (str): Key for the data
            org_uid (str): Org UID
            source_uid (str): Source UID
            user_uid (str): Owner UID

        Keyword Args:
            ui_data_set_user_org_data_input (UiDataSetUserOrgDataInput): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_key'] = \
            data_key
        kwargs['org_uid'] = \
            org_uid
        kwargs['source_uid'] = \
            source_uid
        kwargs['user_uid'] = \
            user_uid
        return self.ui_data_set_user_org_data_endpoint.call_with_http_info(**kwargs)

    def ui_data_set_user_source_data(
        self,
        data_key,
        org_uid,
        source_uid,
        user_uid,
        **kwargs
    ):
        """Set UserSource UI Data  # noqa: E501

         Sets UI Data   * Updates data, valid_to (if set), lastused  * Requires *uidata:Set*    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ui_data_set_user_source_data(data_key, org_uid, source_uid, user_uid, async_req=True)
        >>> result = thread.get()

        Args:
            data_key (str): Key for the data
            org_uid (str): Org UID
            source_uid (str): Source UID
            user_uid (str): Owner UID

        Keyword Args:
            ui_data_set_user_source_data_input (UiDataSetUserSourceDataInput): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_key'] = \
            data_key
        kwargs['org_uid'] = \
            org_uid
        kwargs['source_uid'] = \
            source_uid
        kwargs['user_uid'] = \
            user_uid
        return self.ui_data_set_user_source_data_endpoint.call_with_http_info(**kwargs)

