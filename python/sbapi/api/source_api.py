"""
    Spyderbat API UI & Public APIs

    Restful APIs for use by UI & customers.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from sbapi.api_client import ApiClient, Endpoint as _Endpoint
from sbapi.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from sbapi.model.api_soar_list_handler_output import ApiSOARListHandlerOutput
from sbapi.model.api_source_create_handler_output import ApiSourceCreateHandlerOutput
from sbapi.model.source import Source
from sbapi.model.src_create_input import SrcCreateInput
from sbapi.model.src_update_input import SrcUpdateInput
from sbapi.model.validation_error import ValidationError


class SourceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.integration_soar_src_list_endpoint = _Endpoint(
            settings={
                'response_type': ([ApiSOARListHandlerOutput],),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/integration/soar/org/{orgUID}/source/',
                'operation_id': 'integration_soar_src_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_uid',
                    'et',
                    'hostname',
                    'ip_address',
                    'mac_address',
                    'page',
                    'page_size',
                    'st',
                ],
                'required': [
                    'org_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_uid',
                    'hostname',
                    'ip_address',
                    'mac_address',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('org_uid',): {
                        'max_length': 64,
                    },
                    ('hostname',): {
                        'max_length': 128,
                    },
                    ('ip_address',): {
                        'max_length': 128,
                    },
                    ('mac_address',): {
                        'max_length': 128,
                    },
                    ('page_size',): {

                        'inclusive_maximum': 100,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_uid':
                        (str,),
                    'et':
                        (int,),
                    'hostname':
                        (str,),
                    'ip_address':
                        (str,),
                    'mac_address':
                        (str,),
                    'page':
                        (int,),
                    'page_size':
                        (int,),
                    'st':
                        (int,),
                },
                'attribute_map': {
                    'org_uid': 'orgUID',
                    'et': 'et',
                    'hostname': 'hostname',
                    'ip_address': 'ip_address',
                    'mac_address': 'mac_address',
                    'page': 'page',
                    'page_size': 'page_size',
                    'st': 'st',
                },
                'location_map': {
                    'org_uid': 'path',
                    'et': 'query',
                    'hostname': 'query',
                    'ip_address': 'query',
                    'mac_address': 'query',
                    'page': 'query',
                    'page_size': 'query',
                    'st': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.src_create_endpoint = _Endpoint(
            settings={
                'response_type': (ApiSourceCreateHandlerOutput,),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/source/',
                'operation_id': 'src_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_uid',
                    'src_create_input',
                ],
                'required': [
                    'org_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_uid',
                ]
            },
            root_map={
                'validations': {
                    ('org_uid',): {
                        'max_length': 64,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_uid':
                        (str,),
                    'src_create_input':
                        (SrcCreateInput,),
                },
                'attribute_map': {
                    'org_uid': 'orgUID',
                },
                'location_map': {
                    'org_uid': 'path',
                    'src_create_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.src_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/source/{sourceUID}',
                'operation_id': 'src_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_uid',
                    'source_uid',
                ],
                'required': [
                    'org_uid',
                    'source_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_uid',
                    'source_uid',
                ]
            },
            root_map={
                'validations': {
                    ('org_uid',): {
                        'max_length': 64,
                    },
                    ('source_uid',): {
                        'max_length': 64,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_uid':
                        (str,),
                    'source_uid':
                        (str,),
                },
                'attribute_map': {
                    'org_uid': 'orgUID',
                    'source_uid': 'sourceUID',
                },
                'location_map': {
                    'org_uid': 'path',
                    'source_uid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.src_list_endpoint = _Endpoint(
            settings={
                'response_type': ([Source],),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/source/',
                'operation_id': 'src_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_uid',
                    'agent_uid_equals',
                    'description_contains',
                    'has_tags',
                    'original_association',
                    'page',
                    'page_size',
                ],
                'required': [
                    'org_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_uid',
                    'agent_uid_equals',
                    'description_contains',
                    'has_tags',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('org_uid',): {
                        'max_length': 64,
                        'min_length': 10,
                    },
                    ('agent_uid_equals',): {
                        'max_length': 64,
                    },
                    ('description_contains',): {
                        'max_length': 32,
                    },
                    ('has_tags',): {

                        'max_items': 10,
                    },
                    ('page_size',): {

                        'inclusive_maximum': 100,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_uid':
                        (str,),
                    'agent_uid_equals':
                        (str,),
                    'description_contains':
                        (str,),
                    'has_tags':
                        ([str],),
                    'original_association':
                        (bool,),
                    'page':
                        (int,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'org_uid': 'orgUID',
                    'agent_uid_equals': 'agent_uid_equals',
                    'description_contains': 'description_contains',
                    'has_tags': 'has_tags',
                    'original_association': 'original_association',
                    'page': 'page',
                    'page_size': 'page_size',
                },
                'location_map': {
                    'org_uid': 'path',
                    'agent_uid_equals': 'query',
                    'description_contains': 'query',
                    'has_tags': 'query',
                    'original_association': 'query',
                    'page': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                    'has_tags': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.src_load_endpoint = _Endpoint(
            settings={
                'response_type': (Source,),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/source/{sourceUID}',
                'operation_id': 'src_load',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_uid',
                    'source_uid',
                ],
                'required': [
                    'org_uid',
                    'source_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_uid',
                    'source_uid',
                ]
            },
            root_map={
                'validations': {
                    ('org_uid',): {
                        'max_length': 64,
                    },
                    ('source_uid',): {
                        'max_length': 64,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_uid':
                        (str,),
                    'source_uid':
                        (str,),
                },
                'attribute_map': {
                    'org_uid': 'orgUID',
                    'source_uid': 'sourceUID',
                },
                'location_map': {
                    'org_uid': 'path',
                    'source_uid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.src_update_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/source/{sourceUID}',
                'operation_id': 'src_update',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_uid',
                    'source_uid',
                    'src_update_input',
                ],
                'required': [
                    'org_uid',
                    'source_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_uid',
                    'source_uid',
                ]
            },
            root_map={
                'validations': {
                    ('org_uid',): {
                        'max_length': 64,
                    },
                    ('source_uid',): {
                        'max_length': 64,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_uid':
                        (str,),
                    'source_uid':
                        (str,),
                    'src_update_input':
                        (SrcUpdateInput,),
                },
                'attribute_map': {
                    'org_uid': 'orgUID',
                    'source_uid': 'sourceUID',
                },
                'location_map': {
                    'org_uid': 'path',
                    'source_uid': 'path',
                    'src_update_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def integration_soar_src_list(
        self,
        org_uid,
        **kwargs
    ):
        """List sources for integration with SOARs  # noqa: E501

         Lists the sources of data that match the specified query parameters, and return  URL entry points into the UI for matching sources.   * Requires the action  *org:ListSources* on the organization   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.integration_soar_src_list(org_uid, async_req=True)
        >>> result = thread.get()

        Args:
            org_uid (str):

        Keyword Args:
            et (int): optional end time of the query. [optional]
            hostname (str): A single hostname to match. [optional]
            ip_address (str): A single IP address to match. [optional]
            mac_address (str): A single mac address to match. [optional]
            page (int): [optional]
            page_size (int): [optional]
            st (int): optional start time of the query, if only a start time is provided, end time will be start+10m. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [ApiSOARListHandlerOutput]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['org_uid'] = \
            org_uid
        return self.integration_soar_src_list_endpoint.call_with_http_info(**kwargs)

    def src_create(
        self,
        org_uid,
        **kwargs
    ):
        """Create a source  # noqa: E501

         Creates a new source of data  * Requires the action  *org:CreateSource* on the organization   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.src_create(org_uid, async_req=True)
        >>> result = thread.get()

        Args:
            org_uid (str): The org this source is associated with

        Keyword Args:
            src_create_input (SrcCreateInput): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApiSourceCreateHandlerOutput
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['org_uid'] = \
            org_uid
        return self.src_create_endpoint.call_with_http_info(**kwargs)

    def src_delete(
        self,
        org_uid,
        source_uid,
        **kwargs
    ):
        """Delete a source  # noqa: E501

         Delete a source  * Requires the action  *org:DeleteSource* on the organization   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.src_delete(org_uid, source_uid, async_req=True)
        >>> result = thread.get()

        Args:
            org_uid (str):
            source_uid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['org_uid'] = \
            org_uid
        kwargs['source_uid'] = \
            source_uid
        return self.src_delete_endpoint.call_with_http_info(**kwargs)

    def src_list(
        self,
        org_uid,
        **kwargs
    ):
        """List sources  # noqa: E501

         Lists the sources of data for an organization  * Requires the action  *org:ListSources* on the organization   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.src_list(org_uid, async_req=True)
        >>> result = thread.get()

        Args:
            org_uid (str):

        Keyword Args:
            agent_uid_equals (str): [optional]
            description_contains (str): [optional]
            has_tags ([str]): [optional]
            original_association (bool): [optional]
            page (int): [optional]
            page_size (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Source]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['org_uid'] = \
            org_uid
        return self.src_list_endpoint.call_with_http_info(**kwargs)

    def src_load(
        self,
        org_uid,
        source_uid,
        **kwargs
    ):
        """Load a source  # noqa: E501

         Loads the meta data for a source of data  * Requires the action  *org:LoadSource* on the organization   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.src_load(org_uid, source_uid, async_req=True)
        >>> result = thread.get()

        Args:
            org_uid (str):
            source_uid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Source
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['org_uid'] = \
            org_uid
        kwargs['source_uid'] = \
            source_uid
        return self.src_load_endpoint.call_with_http_info(**kwargs)

    def src_update(
        self,
        org_uid,
        source_uid,
        **kwargs
    ):
        """Update a source  # noqa: E501

         Updates the meta data for a source of data  * Requires the action  *org:UpdateSource* on the organization   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.src_update(org_uid, source_uid, async_req=True)
        >>> result = thread.get()

        Args:
            org_uid (str): The org this source is associated with
            source_uid (str): The UID of the source

        Keyword Args:
            src_update_input (SrcUpdateInput): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['org_uid'] = \
            org_uid
        kwargs['source_uid'] = \
            source_uid
        return self.src_update_endpoint.call_with_http_info(**kwargs)

