"""
    Spyderbat API UI & Public APIs

    Restful APIs for use by UI & customers.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from sbapi.api_client import ApiClient, Endpoint as _Endpoint
from sbapi.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from sbapi.model.dashboard_search import DashboardSearch
from sbapi.model.dashboard_search_create_input import DashboardSearchCreateInput
from sbapi.model.dashboard_search_update_input import DashboardSearchUpdateInput


class DashboardSearchApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.dashboard_search_create_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/dashboard_search/',
                'operation_id': 'dashboard_search_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'dashboard_search_uid',
                    'org_uid',
                    'dashboard_search_create_input',
                ],
                'required': [
                    'dashboard_search_uid',
                    'org_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_uid',
                ]
            },
            root_map={
                'validations': {
                    ('org_uid',): {
                        'max_length': 32,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dashboard_search_uid':
                        (str,),
                    'org_uid':
                        (str,),
                    'dashboard_search_create_input':
                        (DashboardSearchCreateInput,),
                },
                'attribute_map': {
                    'dashboard_search_uid': 'dashboardSearchUID',
                    'org_uid': 'orgUID',
                },
                'location_map': {
                    'dashboard_search_uid': 'path',
                    'org_uid': 'path',
                    'dashboard_search_create_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.dashboard_search_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/dashboard_search/{dashboardSearchUID}',
                'operation_id': 'dashboard_search_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'dashboard_search_uid',
                    'org_uid',
                ],
                'required': [
                    'dashboard_search_uid',
                    'org_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'dashboard_search_uid',
                    'org_uid',
                ]
            },
            root_map={
                'validations': {
                    ('dashboard_search_uid',): {
                        'max_length': 32,
                    },
                    ('org_uid',): {
                        'max_length': 32,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dashboard_search_uid':
                        (str,),
                    'org_uid':
                        (str,),
                },
                'attribute_map': {
                    'dashboard_search_uid': 'dashboardSearchUID',
                    'org_uid': 'orgUID',
                },
                'location_map': {
                    'dashboard_search_uid': 'path',
                    'org_uid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.dashboard_search_get_endpoint = _Endpoint(
            settings={
                'response_type': (DashboardSearch,),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/dashboard_search/{dashboardSearchUID}',
                'operation_id': 'dashboard_search_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'dashboard_search_uid',
                    'org_uid',
                ],
                'required': [
                    'dashboard_search_uid',
                    'org_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'dashboard_search_uid',
                    'org_uid',
                ]
            },
            root_map={
                'validations': {
                    ('dashboard_search_uid',): {
                        'max_length': 32,
                    },
                    ('org_uid',): {
                        'max_length': 32,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dashboard_search_uid':
                        (str,),
                    'org_uid':
                        (str,),
                },
                'attribute_map': {
                    'dashboard_search_uid': 'dashboardSearchUID',
                    'org_uid': 'orgUID',
                },
                'location_map': {
                    'dashboard_search_uid': 'path',
                    'org_uid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.dashboard_search_list_endpoint = _Endpoint(
            settings={
                'response_type': ([DashboardSearch],),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/dashboard_search/',
                'operation_id': 'dashboard_search_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_uid',
                ],
                'required': [
                    'org_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_uid',
                ]
            },
            root_map={
                'validations': {
                    ('org_uid',): {
                        'max_length': 32,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_uid':
                        (str,),
                },
                'attribute_map': {
                    'org_uid': 'orgUID',
                },
                'location_map': {
                    'org_uid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.dashboard_search_update_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/dashboard_search/{dashboardSearchUID}',
                'operation_id': 'dashboard_search_update',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'dashboard_search_uid',
                    'org_uid',
                    'dashboard_search_update_input',
                ],
                'required': [
                    'dashboard_search_uid',
                    'org_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_uid',
                ]
            },
            root_map={
                'validations': {
                    ('org_uid',): {
                        'max_length': 32,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dashboard_search_uid':
                        (str,),
                    'org_uid':
                        (str,),
                    'dashboard_search_update_input':
                        (DashboardSearchUpdateInput,),
                },
                'attribute_map': {
                    'dashboard_search_uid': 'dashboardSearchUID',
                    'org_uid': 'orgUID',
                },
                'location_map': {
                    'dashboard_search_uid': 'path',
                    'org_uid': 'path',
                    'dashboard_search_update_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def dashboard_search_create(
        self,
        dashboard_search_uid,
        org_uid,
        **kwargs
    ):
        """Create a dashboard search  # noqa: E501

         Create a dashboard search in an org.   * Requires action dashboard_search:Create  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboard_search_create(dashboard_search_uid, org_uid, async_req=True)
        >>> result = thread.get()

        Args:
            dashboard_search_uid (str): UID for the DashboardSearch
            org_uid (str): Org UID

        Keyword Args:
            dashboard_search_create_input (DashboardSearchCreateInput): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['dashboard_search_uid'] = \
            dashboard_search_uid
        kwargs['org_uid'] = \
            org_uid
        return self.dashboard_search_create_endpoint.call_with_http_info(**kwargs)

    def dashboard_search_delete(
        self,
        dashboard_search_uid,
        org_uid,
        **kwargs
    ):
        """Get a dashboard search  # noqa: E501

         Get a dashboard search in an org.   * Requires action dashboard_search:Delete  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboard_search_delete(dashboard_search_uid, org_uid, async_req=True)
        >>> result = thread.get()

        Args:
            dashboard_search_uid (str):
            org_uid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['dashboard_search_uid'] = \
            dashboard_search_uid
        kwargs['org_uid'] = \
            org_uid
        return self.dashboard_search_delete_endpoint.call_with_http_info(**kwargs)

    def dashboard_search_get(
        self,
        dashboard_search_uid,
        org_uid,
        **kwargs
    ):
        """Get a dashboard search  # noqa: E501

         Get a dashboard search in an org.   * Requires action dashboard_search:Get  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboard_search_get(dashboard_search_uid, org_uid, async_req=True)
        >>> result = thread.get()

        Args:
            dashboard_search_uid (str):
            org_uid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DashboardSearch
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['dashboard_search_uid'] = \
            dashboard_search_uid
        kwargs['org_uid'] = \
            org_uid
        return self.dashboard_search_get_endpoint.call_with_http_info(**kwargs)

    def dashboard_search_list(
        self,
        org_uid,
        **kwargs
    ):
        """List dashboard searches  # noqa: E501

         Lists dashboard searches by org.   * Requires action dashboard_search:Query  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboard_search_list(org_uid, async_req=True)
        >>> result = thread.get()

        Args:
            org_uid (str): Org UID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [DashboardSearch]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['org_uid'] = \
            org_uid
        return self.dashboard_search_list_endpoint.call_with_http_info(**kwargs)

    def dashboard_search_update(
        self,
        dashboard_search_uid,
        org_uid,
        **kwargs
    ):
        """Update a dashboard search  # noqa: E501

         Update a dashboard search in an org.   * Requires action dashboard_search:Update  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.dashboard_search_update(dashboard_search_uid, org_uid, async_req=True)
        >>> result = thread.get()

        Args:
            dashboard_search_uid (str): UID for the DashboardSearch
            org_uid (str): Org UID

        Keyword Args:
            dashboard_search_update_input (DashboardSearchUpdateInput): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['dashboard_search_uid'] = \
            dashboard_search_uid
        kwargs['org_uid'] = \
            org_uid
        return self.dashboard_search_update_endpoint.call_with_http_info(**kwargs)

