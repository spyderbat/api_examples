"""
    Spyderbat API UI & Public APIs

    Restful APIs for use by UI & customers.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from sbapi.api_client import ApiClient, Endpoint as _Endpoint
from sbapi.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from sbapi.model.src_data_query_input import SrcDataQueryInput
from sbapi.model.validation_error import ValidationError


class SourceDataApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.src_data_query_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/source/query/',
                'operation_id': 'src_data_query',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'src_data_query_input',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'src_data_query_input':
                        (SrcDataQueryInput,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'src_data_query_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.src_data_query_v2_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/data/',
                'operation_id': 'src_data_query_v2',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_uid',
                    'dt',
                    'e',
                    'et',
                    'id',
                    'pj',
                    'q',
                    'qf',
                    'qs',
                    'rr',
                    'src',
                    'st',
                ],
                'required': [
                    'org_uid',
                    'dt',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_uid',
                    'dt',
                    'id',
                    'pj',
                    'q',
                    'qs',
                    'src',
                ]
            },
            root_map={
                'validations': {
                    ('org_uid',): {
                        'max_length': 64,
                    },
                    ('dt',): {
                        'max_length': 24,
                    },
                    ('id',): {

                        'max_items': 256,
                    },
                    ('pj',): {

                        'max_items': 50,
                    },
                    ('q',): {
                        'max_length': 256,
                    },
                    ('qs',): {

                        'inclusive_maximum': 100,
                    },
                    ('src',): {
                        'max_length': 64,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_uid':
                        (str,),
                    'dt':
                        (str,),
                    'e':
                        (str,),
                    'et':
                        (float,),
                    'id':
                        ([str],),
                    'pj':
                        ([str],),
                    'q':
                        (str,),
                    'qf':
                        (int,),
                    'qs':
                        (int,),
                    'rr':
                        (bool,),
                    'src':
                        (str,),
                    'st':
                        (float,),
                },
                'attribute_map': {
                    'org_uid': 'orgUID',
                    'dt': 'dt',
                    'e': 'e',
                    'et': 'et',
                    'id': 'id',
                    'pj': 'pj',
                    'q': 'q',
                    'qf': 'qf',
                    'qs': 'qs',
                    'rr': 'rr',
                    'src': 'src',
                    'st': 'st',
                },
                'location_map': {
                    'org_uid': 'path',
                    'dt': 'query',
                    'e': 'query',
                    'et': 'query',
                    'id': 'query',
                    'pj': 'query',
                    'q': 'query',
                    'qf': 'query',
                    'qs': 'query',
                    'rr': 'query',
                    'src': 'query',
                    'st': 'query',
                },
                'collection_format_map': {
                    'id': 'multi',
                    'pj': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.src_send_data_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/source/{sourceUID}/data/{dataType}',
                'operation_id': 'src_send_data',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'data_type',
                    'org_uid',
                    'source_uid',
                ],
                'required': [
                    'data_type',
                    'org_uid',
                    'source_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'data_type',
                    'org_uid',
                    'source_uid',
                ]
            },
            root_map={
                'validations': {
                    ('data_type',): {
                        'max_length': 128,
                    },
                    ('org_uid',): {
                        'max_length': 64,
                    },
                    ('source_uid',): {
                        'max_length': 64,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'data_type':
                        (str,),
                    'org_uid':
                        (str,),
                    'source_uid':
                        (str,),
                },
                'attribute_map': {
                    'data_type': 'dataType',
                    'org_uid': 'orgUID',
                    'source_uid': 'sourceUID',
                },
                'location_map': {
                    'data_type': 'path',
                    'org_uid': 'path',
                    'source_uid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def src_data_query(
        self,
        **kwargs
    ):
        """Query source data  # noqa: E501

         Allows querying of the source data, data is stored as 'records' which are returned as json objects, in nd-json (see ndjson.org) format.   * Data is returned as it is matched, and no ordering guarentees exist.  * The call completes after it has finished searching for matching records.  * The query expression is limited to seaching a 24 hour period of time, it is the callers responsibility to construct an appropriate 24 hour range. * Documentation for the returned spydergraph datatype can be found at https://app.spyderbat.com/schema/spydergraph/index.html  * The user must have both the *org.ListSourceData* action on the org and *source_data.Query* action on the source    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.src_data_query(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            src_data_query_input (SrcDataQueryInput): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.src_data_query_endpoint.call_with_http_info(**kwargs)

    def src_data_query_v2(
        self,
        org_uid,
        dt,
        **kwargs
    ):
        """Query source data  # noqa: E501

        Same as the post query above except results are cached  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.src_data_query_v2(org_uid, dt, async_req=True)
        >>> result = thread.get()

        Args:
            org_uid (str): Organization UID to query
            dt (str): DataType to query

        Keyword Args:
            e (str): Data which matches this expression are returned, as a json object. [optional]
            et (float): Time in unix epoch time, records < time are returned. [optional]
            id ([str]): List of IDs to resolve. [optional]
            pj ([str]): Array of top level object properties which will be emitted, if none are specified all will be emitted; ex pj=id&pj=version. [optional]
            q (str): Lucene based search query. [optional]
            qf (int): Where to start the query in the result set from. [optional]
            qs (int): Size of the query result set. [optional]
            rr (bool): Return rptrs mixed with the data. [optional]
            src (str): Source UID to query. [optional]
            st (float): Time in unix epoch time, records >= time are returned. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['org_uid'] = \
            org_uid
        kwargs['dt'] = \
            dt
        return self.src_data_query_v2_endpoint.call_with_http_info(**kwargs)

    def src_send_data(
        self,
        data_type,
        org_uid,
        source_uid,
        **kwargs
    ):
        """Send data to a source, this is expected to be gzip compressed nd-json. The 'Content-Encoding' header should be specified with a value of 'gzip'  # noqa: E501

        Sends data to a source  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.src_send_data(data_type, org_uid, source_uid, async_req=True)
        >>> result = thread.get()

        Args:
            data_type (str):
            org_uid (str):
            source_uid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['data_type'] = \
            data_type
        kwargs['org_uid'] = \
            org_uid
        kwargs['source_uid'] = \
            source_uid
        return self.src_send_data_endpoint.call_with_http_info(**kwargs)

