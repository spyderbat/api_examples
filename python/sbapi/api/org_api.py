"""
    Spyderbat API UI & Public APIs

    Restful APIs for use by UI & customers.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from sbapi.api_client import ApiClient, Endpoint as _Endpoint
from sbapi.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from sbapi.model.dao_org_role_response import DaoOrgRoleResponse
from sbapi.model.org import Org
from sbapi.model.org_assign_role_input import OrgAssignRoleInput
from sbapi.model.org_invite_users_input import OrgInviteUsersInput
from sbapi.model.org_test_notification_target_input import OrgTestNotificationTargetInput
from sbapi.model.org_unassign_role_input import OrgUnassignRoleInput
from sbapi.model.org_update_input import OrgUpdateInput
from sbapi.model.validation_error import ValidationError


class OrgApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.org_assign_role_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/assignedrole/add',
                'operation_id': 'org_assign_role',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_uid',
                    'org_assign_role_input',
                ],
                'required': [
                    'org_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_uid',
                ]
            },
            root_map={
                'validations': {
                    ('org_uid',): {
                        'max_length': 64,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_uid':
                        (str,),
                    'org_assign_role_input':
                        (OrgAssignRoleInput,),
                },
                'attribute_map': {
                    'org_uid': 'orgUID',
                },
                'location_map': {
                    'org_uid': 'path',
                    'org_assign_role_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.org_invite_users_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/invite',
                'operation_id': 'org_invite_users',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_uid',
                    'org_invite_users_input',
                ],
                'required': [
                    'org_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_uid',
                ]
            },
            root_map={
                'validations': {
                    ('org_uid',): {
                        'max_length': 64,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_uid':
                        (str,),
                    'org_invite_users_input':
                        (OrgInviteUsersInput,),
                },
                'attribute_map': {
                    'org_uid': 'orgUID',
                },
                'location_map': {
                    'org_uid': 'path',
                    'org_invite_users_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.org_list_endpoint = _Endpoint(
            settings={
                'response_type': ([Org],),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/',
                'operation_id': 'org_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'has_resource_policy',
                    'has_tags',
                    'include_expired',
                    'name_contains',
                    'owner_uid_equals',
                    'page',
                    'page_size',
                    'uid_equals',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'has_tags',
                    'name_contains',
                    'owner_uid_equals',
                    'page_size',
                    'uid_equals',
                ]
            },
            root_map={
                'validations': {
                    ('has_tags',): {

                        'max_items': 30,
                    },
                    ('name_contains',): {
                        'max_length': 32,
                    },
                    ('owner_uid_equals',): {
                        'max_length': 64,
                    },
                    ('page_size',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 10,
                    },
                    ('uid_equals',): {
                        'max_length': 64,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'has_resource_policy':
                        (bool,),
                    'has_tags':
                        ([str],),
                    'include_expired':
                        (bool,),
                    'name_contains':
                        (str,),
                    'owner_uid_equals':
                        (str,),
                    'page':
                        (int,),
                    'page_size':
                        (int,),
                    'uid_equals':
                        (str,),
                },
                'attribute_map': {
                    'has_resource_policy': 'has_resource_policy',
                    'has_tags': 'has_tags',
                    'include_expired': 'include_expired',
                    'name_contains': 'name_contains',
                    'owner_uid_equals': 'owner_uid_equals',
                    'page': 'page',
                    'page_size': 'page_size',
                    'uid_equals': 'uid_equals',
                },
                'location_map': {
                    'has_resource_policy': 'query',
                    'has_tags': 'query',
                    'include_expired': 'query',
                    'name_contains': 'query',
                    'owner_uid_equals': 'query',
                    'page': 'query',
                    'page_size': 'query',
                    'uid_equals': 'query',
                },
                'collection_format_map': {
                    'has_tags': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.org_list_role_endpoint = _Endpoint(
            settings={
                'response_type': ([DaoOrgRoleResponse],),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/assignedrole/',
                'operation_id': 'org_list_role',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_uid',
                    'role_uid_equals',
                    'user_email_equals',
                    'user_uid_equals',
                ],
                'required': [
                    'org_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_uid',
                ]
            },
            root_map={
                'validations': {
                    ('org_uid',): {
                        'max_length': 64,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_uid':
                        (str,),
                    'role_uid_equals':
                        (str,),
                    'user_email_equals':
                        (str,),
                    'user_uid_equals':
                        (str,),
                },
                'attribute_map': {
                    'org_uid': 'orgUID',
                    'role_uid_equals': 'role_uid_equals',
                    'user_email_equals': 'user_email_equals',
                    'user_uid_equals': 'user_uid_equals',
                },
                'location_map': {
                    'org_uid': 'path',
                    'role_uid_equals': 'query',
                    'user_email_equals': 'query',
                    'user_uid_equals': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.org_load_endpoint = _Endpoint(
            settings={
                'response_type': (Org,),
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}',
                'operation_id': 'org_load',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_uid',
                ],
                'required': [
                    'org_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_uid',
                ]
            },
            root_map={
                'validations': {
                    ('org_uid',): {
                        'max_length': 64,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_uid':
                        (str,),
                },
                'attribute_map': {
                    'org_uid': 'orgUID',
                },
                'location_map': {
                    'org_uid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.org_load_notification_policy_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/notification_policy/',
                'operation_id': 'org_load_notification_policy',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_uid',
                ],
                'required': [
                    'org_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_uid',
                ]
            },
            root_map={
                'validations': {
                    ('org_uid',): {
                        'max_length': 64,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_uid':
                        (str,),
                },
                'attribute_map': {
                    'org_uid': 'orgUID',
                },
                'location_map': {
                    'org_uid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.org_test_notification_target_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/notification_policy/test_target',
                'operation_id': 'org_test_notification_target',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_uid',
                    'org_test_notification_target_input',
                ],
                'required': [
                    'org_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_uid',
                ]
            },
            root_map={
                'validations': {
                    ('org_uid',): {
                        'max_length': 64,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_uid':
                        (str,),
                    'org_test_notification_target_input':
                        (OrgTestNotificationTargetInput,),
                },
                'attribute_map': {
                    'org_uid': 'orgUID',
                },
                'location_map': {
                    'org_uid': 'path',
                    'org_test_notification_target_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.org_unassign_role_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/assignedrole/del',
                'operation_id': 'org_unassign_role',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_uid',
                    'org_unassign_role_input',
                ],
                'required': [
                    'org_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_uid',
                ]
            },
            root_map={
                'validations': {
                    ('org_uid',): {
                        'max_length': 64,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_uid':
                        (str,),
                    'org_unassign_role_input':
                        (OrgUnassignRoleInput,),
                },
                'attribute_map': {
                    'org_uid': 'orgUID',
                },
                'location_map': {
                    'org_uid': 'path',
                    'org_unassign_role_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.org_update_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}',
                'operation_id': 'org_update',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_uid',
                    'org_update_input',
                ],
                'required': [
                    'org_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_uid',
                ]
            },
            root_map={
                'validations': {
                    ('org_uid',): {
                        'max_length': 64,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_uid':
                        (str,),
                    'org_update_input':
                        (OrgUpdateInput,),
                },
                'attribute_map': {
                    'org_uid': 'orgUID',
                },
                'location_map': {
                    'org_uid': 'path',
                    'org_update_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.org_update_notification_policy_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'apiToken'
                ],
                'endpoint_path': '/api/v1/org/{orgUID}/notification_policy',
                'operation_id': 'org_update_notification_policy',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_uid',
                ],
                'required': [
                    'org_uid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'org_uid',
                ]
            },
            root_map={
                'validations': {
                    ('org_uid',): {
                        'max_length': 64,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_uid':
                        (str,),
                },
                'attribute_map': {
                    'org_uid': 'orgUID',
                },
                'location_map': {
                    'org_uid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def org_assign_role(
        self,
        org_uid,
        **kwargs
    ):
        """Assign OrgRole  # noqa: E501

         Assigns a role to a particular user on an organization   * Requires the user have the action *user.AssignRole* on the organization   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.org_assign_role(org_uid, async_req=True)
        >>> result = thread.get()

        Args:
            org_uid (str):

        Keyword Args:
            org_assign_role_input (OrgAssignRoleInput): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['org_uid'] = \
            org_uid
        return self.org_assign_role_endpoint.call_with_http_info(**kwargs)

    def org_invite_users(
        self,
        org_uid,
        **kwargs
    ):
        """Invite users to an organization  # noqa: E501

         Invites users to an organization   * Requires action *org:InviteUsers* on the organization to invite users    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.org_invite_users(org_uid, async_req=True)
        >>> result = thread.get()

        Args:
            org_uid (str):

        Keyword Args:
            org_invite_users_input (OrgInviteUsersInput): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['org_uid'] = \
            org_uid
        return self.org_invite_users_endpoint.call_with_http_info(**kwargs)

    def org_list(
        self,
        **kwargs
    ):
        """List organizations  # noqa: E501

         Lists organizations   * Will list organizations which the user has the action *org:Load* or *org:LoadExpired* on   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.org_list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            has_resource_policy (bool): [optional]
            has_tags ([str]): [optional]
            include_expired (bool): [optional]
            name_contains (str): [optional]
            owner_uid_equals (str): [optional]
            page (int): [optional]
            page_size (int): [optional]
            uid_equals (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [Org]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.org_list_endpoint.call_with_http_info(**kwargs)

    def org_list_role(
        self,
        org_uid,
        **kwargs
    ):
        """List OrgRoles  # noqa: E501

         Allows querying of roles on the organization   * Requires the user have the action *org:ListOrgRoles* on the organization   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.org_list_role(org_uid, async_req=True)
        >>> result = thread.get()

        Args:
            org_uid (str):

        Keyword Args:
            role_uid_equals (str): [optional]
            user_email_equals (str): [optional]
            user_uid_equals (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [DaoOrgRoleResponse]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['org_uid'] = \
            org_uid
        return self.org_list_role_endpoint.call_with_http_info(**kwargs)

    def org_load(
        self,
        org_uid,
        **kwargs
    ):
        """Load an organization  # noqa: E501

         Loads an organization by UID.    * Requires action *org:Load*  * Requires action *org:LoadExpired* to load expired organizations    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.org_load(org_uid, async_req=True)
        >>> result = thread.get()

        Args:
            org_uid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Org
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['org_uid'] = \
            org_uid
        return self.org_load_endpoint.call_with_http_info(**kwargs)

    def org_load_notification_policy(
        self,
        org_uid,
        **kwargs
    ):
        """Load Notification Policy  # noqa: E501

         Loads the notification policy for an organization. The notification policy defines who and how the organization is notified.     * If the content-type is application/hjson the policy will be returned as hjson  * If the content-type is application/json the policy will be returned as json    * Requires the user have the action *org:LoadNotificationPolicy* on the organization   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.org_load_notification_policy(org_uid, async_req=True)
        >>> result = thread.get()

        Args:
            org_uid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['org_uid'] = \
            org_uid
        return self.org_load_notification_policy_endpoint.call_with_http_info(**kwargs)

    def org_test_notification_target(
        self,
        org_uid,
        **kwargs
    ):
        """Test Notification Target  # noqa: E501

         Sends a test notification to a target.   * Requires the user have the action *org:SendTestNotification* on the organization   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.org_test_notification_target(org_uid, async_req=True)
        >>> result = thread.get()

        Args:
            org_uid (str):

        Keyword Args:
            org_test_notification_target_input (OrgTestNotificationTargetInput): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['org_uid'] = \
            org_uid
        return self.org_test_notification_target_endpoint.call_with_http_info(**kwargs)

    def org_unassign_role(
        self,
        org_uid,
        **kwargs
    ):
        """Unassign OrgRole  # noqa: E501

         Unassigns a role to a particular user on an organization   * Requires the user have the action *user.UnassignRole* on the organization   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.org_unassign_role(org_uid, async_req=True)
        >>> result = thread.get()

        Args:
            org_uid (str):

        Keyword Args:
            org_unassign_role_input (OrgUnassignRoleInput): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['org_uid'] = \
            org_uid
        return self.org_unassign_role_endpoint.call_with_http_info(**kwargs)

    def org_update(
        self,
        org_uid,
        **kwargs
    ):
        """Update an organization  # noqa: E501

         Updates the organization    * Requires the user have the action *org:Update* on the organization   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.org_update(org_uid, async_req=True)
        >>> result = thread.get()

        Args:
            org_uid (str): Org UID

        Keyword Args:
            org_update_input (OrgUpdateInput): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['org_uid'] = \
            org_uid
        return self.org_update_endpoint.call_with_http_info(**kwargs)

    def org_update_notification_policy(
        self,
        org_uid,
        **kwargs
    ):
        """Update an organization's notification policy  # noqa: E501

         Updates the organization's notification policy  The policy contains targets, which are named destinations, for example a list of admins, and then rules for how notifications are routed. The most basic notification is the default policy assigned to all organizations, which is to send notifications to the organization owner.   Each notification has a schema which can be used to filter how notifications are routed.   Here is an example notification policy:  ``` {     \"targets\": {       \"admins\": {         \"emails\": [           \"admin1@foo.com\",           \"admin2@foo.com\"         ]       },       \"soc\": {         \"slack\": {           \"url\": \"http://app.slack.com/XXXX\"         }       },       \"sns_example\": {         \"data\": \"UI supplied data\",         \"description\": \"Cross-Account Notification\",         \"sns\": {           \"sns_topic_arn\": \"arn:aws:sns:CUSTOMER-AWS-REGION:CUSTOMER-AWS-ACCOUNT-ID:CUSTOMER-TOPIC-NAME\",           \"cross_account_iam_role\": \"arn:aws:iam::CUSTOMER-ACCOUNT-ID:role/CUSTOMER-ROLE-NAME\"         }       }     },     \"routes\": [       {         \"target\": \"admins\",         \"expr\": {           \"schema\": \"agent_offline\"         }       },       {         \"target\": \"soc\",         \"expr\": {           \"schema\": \"spydertrace_updated\"         }       },       {         \"destination\": {           \"users\": [             \"X23hs8234lks\"           ]         }       }     ]   } ```  This policy says that any notification with the schema \"agent_offline\" is send to the admin emails, and that any notifications with the schema \"spydertrace_update\" is send to the soc slack channel, and all other notifications are sent to a user specified by their UserUID. If a destination is an explicit UserUID then the users notification policy will applied, for example to notify them by their notification type of choice.     * The following destination types are currently supported, UserUID, Email, Slack, Webhook, SNS. See the associated destination definition in the notification policy for details.   * First match for a routing rule wins, and further processsing of the notification stops.   * If a UserUID is specified the users notification policy may be used to contact that user.  * Each notification has an associated schema, which is used to provide a consistent schema for the notification.  * Expressions are optional, if no expression is specified the route matches by default  * If the content-type is application/hjson the policy will be parsed and stored as hjson, all comments will be lost on an existing hjson policy if it is uploaded as json  This is an example notification generated using a notification policy and dashboardsearch:  ``` {  \"uid\": \"lQ0Q1lKm\",  \"org_uid\": \"your_org_uid\",  \"valid_from\": \"2021-10-14T19:22:00.869159169Z\",  \"title\": \"Spyderbat: Dashboard search notification Recent interactive (shell) Processes\",  \"message\": \"Spyderbat: Dashboard search notification Recent interactive (shell) Processes\",  \"data\": {    \"dashboardsearch\": {   \"data\": {     \"createTime\": 1634237497.142,     \"createdBy\": \"user@example.com\"   },   \"description\": \"Recent interactive (shell) Processes\",   \"notify\": true,   \"notify_frequency\": 300,   \"org_uid\": \"spyderbatuid\",   \"search\": \"schema:model_process AND interactive:true\",   \"uid\": \"RTBQoR3uucyjG8ZeHJmw\"    }  },  \"schema\": \"dashboard_saved_search\",  \"records\": [    {   \"total_hits\": 0    }  ]   } ```   * Requires the user have the action *org:UpdateNotificationPolicy* on the organization   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.org_update_notification_policy(org_uid, async_req=True)
        >>> result = thread.get()

        Args:
            org_uid (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['org_uid'] = \
            org_uid
        return self.org_update_notification_policy_endpoint.call_with_http_info(**kwargs)

