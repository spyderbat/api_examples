/*
Spyderbat API UI & Public APIs

Restful APIs for use by UI & customers.

API version: 1.0.0
Contact: apisupport@spyderbat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spyderbat_api

import (
	"encoding/json"
)

// SessionOrgTypeMaxLimit struct for SessionOrgTypeMaxLimit
type SessionOrgTypeMaxLimit struct {
	// What is the current value
	CurrentValue *float64 `json:"current_value,omitempty"`
	// Description of the limit
	Description *string `json:"description,omitempty"`
	// Has the limit been met or exceeded
	LimitExceeded *bool `json:"limit_exceeded,omitempty"`
	// What is the max limit value
	LimitValue *float64 `json:"limit_value,omitempty"`
	// How many items can be added to the current value before it is exceeded
	RemainingCapacity *float64 `json:"remaining_capacity,omitempty"`
	// The time window in seconds that the limit is calcuated on
	TimeWindowInSeconds *int32 `json:"time_window_in_seconds,omitempty"`
}

// NewSessionOrgTypeMaxLimit instantiates a new SessionOrgTypeMaxLimit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionOrgTypeMaxLimit() *SessionOrgTypeMaxLimit {
	this := SessionOrgTypeMaxLimit{}
	return &this
}

// NewSessionOrgTypeMaxLimitWithDefaults instantiates a new SessionOrgTypeMaxLimit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionOrgTypeMaxLimitWithDefaults() *SessionOrgTypeMaxLimit {
	this := SessionOrgTypeMaxLimit{}
	return &this
}

// GetCurrentValue returns the CurrentValue field value if set, zero value otherwise.
func (o *SessionOrgTypeMaxLimit) GetCurrentValue() float64 {
	if o == nil || o.CurrentValue == nil {
		var ret float64
		return ret
	}
	return *o.CurrentValue
}

// GetCurrentValueOk returns a tuple with the CurrentValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionOrgTypeMaxLimit) GetCurrentValueOk() (*float64, bool) {
	if o == nil || o.CurrentValue == nil {
		return nil, false
	}
	return o.CurrentValue, true
}

// HasCurrentValue returns a boolean if a field has been set.
func (o *SessionOrgTypeMaxLimit) HasCurrentValue() bool {
	if o != nil && o.CurrentValue != nil {
		return true
	}

	return false
}

// SetCurrentValue gets a reference to the given float64 and assigns it to the CurrentValue field.
func (o *SessionOrgTypeMaxLimit) SetCurrentValue(v float64) {
	o.CurrentValue = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SessionOrgTypeMaxLimit) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionOrgTypeMaxLimit) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SessionOrgTypeMaxLimit) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SessionOrgTypeMaxLimit) SetDescription(v string) {
	o.Description = &v
}

// GetLimitExceeded returns the LimitExceeded field value if set, zero value otherwise.
func (o *SessionOrgTypeMaxLimit) GetLimitExceeded() bool {
	if o == nil || o.LimitExceeded == nil {
		var ret bool
		return ret
	}
	return *o.LimitExceeded
}

// GetLimitExceededOk returns a tuple with the LimitExceeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionOrgTypeMaxLimit) GetLimitExceededOk() (*bool, bool) {
	if o == nil || o.LimitExceeded == nil {
		return nil, false
	}
	return o.LimitExceeded, true
}

// HasLimitExceeded returns a boolean if a field has been set.
func (o *SessionOrgTypeMaxLimit) HasLimitExceeded() bool {
	if o != nil && o.LimitExceeded != nil {
		return true
	}

	return false
}

// SetLimitExceeded gets a reference to the given bool and assigns it to the LimitExceeded field.
func (o *SessionOrgTypeMaxLimit) SetLimitExceeded(v bool) {
	o.LimitExceeded = &v
}

// GetLimitValue returns the LimitValue field value if set, zero value otherwise.
func (o *SessionOrgTypeMaxLimit) GetLimitValue() float64 {
	if o == nil || o.LimitValue == nil {
		var ret float64
		return ret
	}
	return *o.LimitValue
}

// GetLimitValueOk returns a tuple with the LimitValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionOrgTypeMaxLimit) GetLimitValueOk() (*float64, bool) {
	if o == nil || o.LimitValue == nil {
		return nil, false
	}
	return o.LimitValue, true
}

// HasLimitValue returns a boolean if a field has been set.
func (o *SessionOrgTypeMaxLimit) HasLimitValue() bool {
	if o != nil && o.LimitValue != nil {
		return true
	}

	return false
}

// SetLimitValue gets a reference to the given float64 and assigns it to the LimitValue field.
func (o *SessionOrgTypeMaxLimit) SetLimitValue(v float64) {
	o.LimitValue = &v
}

// GetRemainingCapacity returns the RemainingCapacity field value if set, zero value otherwise.
func (o *SessionOrgTypeMaxLimit) GetRemainingCapacity() float64 {
	if o == nil || o.RemainingCapacity == nil {
		var ret float64
		return ret
	}
	return *o.RemainingCapacity
}

// GetRemainingCapacityOk returns a tuple with the RemainingCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionOrgTypeMaxLimit) GetRemainingCapacityOk() (*float64, bool) {
	if o == nil || o.RemainingCapacity == nil {
		return nil, false
	}
	return o.RemainingCapacity, true
}

// HasRemainingCapacity returns a boolean if a field has been set.
func (o *SessionOrgTypeMaxLimit) HasRemainingCapacity() bool {
	if o != nil && o.RemainingCapacity != nil {
		return true
	}

	return false
}

// SetRemainingCapacity gets a reference to the given float64 and assigns it to the RemainingCapacity field.
func (o *SessionOrgTypeMaxLimit) SetRemainingCapacity(v float64) {
	o.RemainingCapacity = &v
}

// GetTimeWindowInSeconds returns the TimeWindowInSeconds field value if set, zero value otherwise.
func (o *SessionOrgTypeMaxLimit) GetTimeWindowInSeconds() int32 {
	if o == nil || o.TimeWindowInSeconds == nil {
		var ret int32
		return ret
	}
	return *o.TimeWindowInSeconds
}

// GetTimeWindowInSecondsOk returns a tuple with the TimeWindowInSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionOrgTypeMaxLimit) GetTimeWindowInSecondsOk() (*int32, bool) {
	if o == nil || o.TimeWindowInSeconds == nil {
		return nil, false
	}
	return o.TimeWindowInSeconds, true
}

// HasTimeWindowInSeconds returns a boolean if a field has been set.
func (o *SessionOrgTypeMaxLimit) HasTimeWindowInSeconds() bool {
	if o != nil && o.TimeWindowInSeconds != nil {
		return true
	}

	return false
}

// SetTimeWindowInSeconds gets a reference to the given int32 and assigns it to the TimeWindowInSeconds field.
func (o *SessionOrgTypeMaxLimit) SetTimeWindowInSeconds(v int32) {
	o.TimeWindowInSeconds = &v
}

func (o SessionOrgTypeMaxLimit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CurrentValue != nil {
		toSerialize["current_value"] = o.CurrentValue
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.LimitExceeded != nil {
		toSerialize["limit_exceeded"] = o.LimitExceeded
	}
	if o.LimitValue != nil {
		toSerialize["limit_value"] = o.LimitValue
	}
	if o.RemainingCapacity != nil {
		toSerialize["remaining_capacity"] = o.RemainingCapacity
	}
	if o.TimeWindowInSeconds != nil {
		toSerialize["time_window_in_seconds"] = o.TimeWindowInSeconds
	}
	return json.Marshal(toSerialize)
}

type NullableSessionOrgTypeMaxLimit struct {
	value *SessionOrgTypeMaxLimit
	isSet bool
}

func (v NullableSessionOrgTypeMaxLimit) Get() *SessionOrgTypeMaxLimit {
	return v.value
}

func (v *NullableSessionOrgTypeMaxLimit) Set(val *SessionOrgTypeMaxLimit) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionOrgTypeMaxLimit) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionOrgTypeMaxLimit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionOrgTypeMaxLimit(val *SessionOrgTypeMaxLimit) *NullableSessionOrgTypeMaxLimit {
	return &NullableSessionOrgTypeMaxLimit{value: val, isSet: true}
}

func (v NullableSessionOrgTypeMaxLimit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionOrgTypeMaxLimit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


