openapi: 3.0.1
info:
  contact:
    email: apisupport@spyderbat.com
    name: API Support
    url: https://api.prod.spyderbat.com/openapi.pdf
  description: Restful APIs for use by UI & customers.
  license:
    name: MIT
    url: https://mit-license.org/
  termsOfService: https://www.spyderbat.com/terms-of-use/
  title: Spyderbat API UI & Public APIs
  version: 1.0.0
  x-logo:
    url: https://app.spyderbat.com/static/media/sb-logo.03d4ae14.svg
    backgroundColor: '#161A21'
    altText: Spyderbat Logo
servers:
- description: Spyderbat API Server
  url: https://api.prod.spyderbat.com/
security:
- apiToken: []
tags:
- description: "\nAPIKeys are used to authenticate API calls to the API service. Inside\
    \ the returned APIKey object is a property, 'jwt' which contains a JWT. JWT or\
    \ JSON Web Tokens provide a means of authentication and are frequently used to\
    \ authenticate users to web services. The supplied JWT token can be supplied in\
    \ HTTPS requests using an 'Authorization' header with a 'Bearer', for example\
    \ 'Authorization: Bearer JWT' where JWT represents the supplied JWT token, found\
    \ in the 'jwt' property in the returned APIKey object. The APIKeys are read only\
    \ after being created and only the description and enabled flag may be set after\
    \ the key has been created, this is because the other fields cannot be changed\
    \ without updating the JWT token. To identify which JWT is associated with which\
    \ APIKey, the JWT token can be decoded using a online JWT decoder, and the UID\
    \ of the associated APIKey is found in the claims with the property 'sub'. \n\n\
    \ * The API key inherits the same roles and permissions as the user who created\
    \ the API key. \n * There is a limit of 10 keys per user. \n * The 'jwt' from\
    \ the returned key should be inserted into a HTTP Header called 'Authorization'\
    \ like so 'Bearer JWT' where JWT is replaced respectively.\n * The 'valid_to'\
    \ from the returned key is used to specify the expiration date for the key, after\
    \ which it will no longer work.\n\n\t"
  name: APIKey
- description: |2

    Agents represent a sepecific agent which collects data for one or more sources.
  name: Agent
- description: "\nAgents registrations are used to authorize and group agents by the\
    \ registration. \n"
  name: Agent Registration
- description: "\nAgentWork API is intended for use by the UI to convey work & configuration\
    \ to agents, this data can be specific to an agent or gloal to an organization.\
    \ \n\nAn example use case is configuration data for a specific bat. The agents\
    \ then overlay the global work data atop, the organizationan work (if defined),\
    \ atop the specific agent work. \n\n\t"
  name: AgentWork
- description: |2

    These APIs require the users to authenticate and then provide a request header as specified by the authentication function to allow access to these APIs. See the section on RRBAC for a description of access control.
  name: Authenticated APIS
- description: "\nDashboard Searches are used to drive the Dashboard page, which shows\
    \ realtime searches in the UI\n"
  name: DashboardSearch
- description: "Investigations can be created by users as a way to have an investigation\
    \ into a potential attack, allowing users to associate data from one or more sources\
    \ into a single investigation. An investigation may be utilized by multiple users\
    \ as part of it's work flow. Investigations have a version history, each change\
    \ to an investigation will result in a copy of the investigation to be captured\
    \ and saved, prior versions can then be inspected later."
  name: Investigation
- description: |2

    Returns meta data about the system
  name: Metadata API
- description: |2

    Allows for querying of metrics around metricss
  name: MetricsData
- description: "\nOrganizations hold resources & data associated with an organization,\
    \ users must be associated via roles with an organization to have permissions\
    \ to interact with the organization. Each user my have multiple and different\
    \ roles on different organizations and each organization may have multiple users\
    \ with roles on the organization. Each user is has an organization assigned to\
    \ the user during signup. Users may then assign other users various roles on the\
    \ organization.\n"
  name: Org
- description: "\nOrganizational types specify both limits and defaults for organizations,\
    \ they are used by the system to determine the resource utilization for an organization\
    \ and associated settings. \n"
  name: OrgType
- description: "# Introduction \n\nThis RBAC model is based off of Amazon's model\
    \ with some simplifications and generic assumptions\n\nA user has some number\
    \ of roles on some number of organizations, each role defines some statements\n\
    which determine determine if the user has access to some resources. These role\
    \ based statements\nare combined with a policy which may be attached to the resource\
    \ to be accessed. \n\nSo essentially acccess is determined by the combination\
    \ of identity based polices and resource\nbased policies. \n\nAll associated statements\
    \ from both the user's roles and the resources policy are considered before\n\
    access is granted. If any statement denies access then access is denied, at least\
    \ one statement\nmust explicitly grant access to the resource, and if no statement\
    \ denies or grants access then \naccess is not granted. \n\n\nThe resulting access\
    \ decision is a combination of:\n\n```\nEvaluate(Roles(User,Org),Resource) - will\
    \ evaluate all possible user roles on the resource\nEvaluate(GlobalRoles(User),Resource)\
    \ - will evaluate all possible user roles on the resource\nEvaluate(CrossOrgRoles(User,Org),Resource)\
    \ - will evaluate all possible cross org roles on the resource\nEvaluate(Resource.Policy,User)\
    \ - will evalute the requesting user against the resource policy\n```\n\nThis\
    \ means that a user role can specify what the user can access, while a specific\
    \ resource\npolicy has the ability to deny access to a single user, or a user\
    \ based upon roles or\ntags. \n\n# Example user role\n\n```json\n{\n\t\"name\"\
    :\"CatFeeder\",\n\t\"version\":\"1.0.0\",\n\t\"statements\":[\n\t\t{\n\t\t\t\"\
    sid\":\"FeedCats\",\n\t\t\t\"effect\":\"allow\",\n\t\t\t\"actions\":[ \"cat:feed\"\
    \ ],\n\t\t\t\"resources\":[ \"srn:cat:::*\" ],\n\t\t\t\"condition\": { \"not\"\
    : { \"has_tag\":\"obese\"}}\n\t\t}\n\n\t]\n}\n```\n\nThis example user role defines\
    \ a role called 'CatFeeder', which is allowed to perform 'cat:feed' on all resources\
    \ which match 'srn\\:cat\\:::\\*', as long as the cat the role\nis being used\
    \ on does not have the tag 'obese'.\n\n# Global vs Organization roles\n\nA global\
    \ role is a role which does not have a specific context, it is 'global' in that\
    \ it \napplies to all resources a user might interact with. An organizational\
    \ role is assigned to a\nspecific organization, and therefore limited to the context\
    \ of that organization. \n\nFor example a global role is one which allows a user\
    \ to change their own password, or\nperform other actions which do not involve\
    \ an organization. An organizational role\nis a role which allows actions on resources\
    \ owned by an organization. \n\nAn example of this is a typical user:\n\n * Global\
    \ Role (User) \n  * Allows the user to modify their own settings, change their\
    \ password, etc. \n * Org Role (OrgOwner) \n  * Allows the user to modify an organization\n\
    \  * Applied to specific organizations\n\n# User Roles\n\nUsers may zero or more\
    \ roles defined on different organizations, along with global roles\n, a role\
    \ is defined with the following attributes\n\n * Name - Name of the policy, used\
    \ to match to roles associated with users\n * Version  - Version of the role schema\n\
    \ * Statements - Some number of statements\n\n# Resource Policy\n\nA resource\
    \ may have a single policy with multiple statements associated with it, it has\n\
    the following attributes\n \n * Name - Name of the policy, used to match to roles\
    \ associated with users\n * Version  - Version of the role schema\n * Statements\
    \ - Some number of statements\n\n# Statement\n\nEach role or policy has some statements\
    \ defined with it, each statement defines\nwhat actions are allowed or dissallowed\n\
    \nStatements have the following attributes\n\n * SID - statment ID used for debugging\
    \ and identification\n * Effect - the result of the statement (deny, allow)\n\
    \ * Actions - a list of actions \n * Resources - a list of resource queries\n\
    \ * Condition - an optional condition that will be applied to statements to determine\
    \ if they apply\n\n## Statement Effects\n\nTo determine if access may be granted\
    \ the statements associated with the user roles,\ncross account roles, and resources\
    \ are evaluated. If any statement returns a deny then \nall further evaluation\
    \ is stopped and the result is a denial. At least one statement\nmust allow access\
    \ for access to be granted. If no statement denies or allows access\nthen the\
    \ system will not allow access.\n\n## Actions\n\nActions are a combination of\
    \ Service:Action, and also have a few wild card patterns:\n\n```\n* \t\t- match\
    \ any action\nservice:* \t- match any action on this service\nservice:action\t\
    - match this explicit combination of action and service\n```\n\n## Spyderbat Resource\
    \ Names\n\nEach resource in the RBAC system is given a name like so:\n\n```\n\
    srn:service:region:org:resource\n```\n\nThe resource name is expected to expand\
    \ into a path like resource name when a hierarchy is needed, \nfor example:\n\n\
    ```\nsrn:report:aws-us-west-1:org-1:agent-usage-report/download.pdf\n```\n\nThese\
    \ resource names are matched in policies against resource queries:\n\n```\nsrn:report:::*/*.pdf\n\
    ```\n\nIs an example of resource query which would match the above resource. \n\
    \nThe following globs are supported in resource names\n\n```\n/**/   - match zero\
    \ or more directories\n{a,b}  - match a or b, no spaces\n*      - match any non-separator\
    \ char\n?      - match a single non-separator char\n**/    - match any directory,\
    \ start of pattern only\n/**    - match any this directory, end of pattern only\n\
    !      - removes matches from resultset, start of pattern only\n```\n\n```\n*\
    \ \t\t\t- match all resources\nsrn::::*\t \t- match all resources\nsrn:report::::*\
    \ \t- match all report resources\nsrn:report::org-1:* \t- match all resources\
    \ in a specific org\n```\n\n## Conditions\n\nThe system will first evalute if\
    \ the requested resource and the requested action\nmatch, if so then the system\
    \ will evaluate any conditions which are specified on \nthe statement. \n\nThe\
    \ following conditions are supported:\n\n```\n{ not: condition } - not of the\
    \ specified condition\n{ and: [....] }\t - and of all contained conditions\n{\
    \ or: [....] } \t - or of all contained conditions\n{ has_tag:\"tag\"}\t -  returns\
    \ true if the resource has the associated tag\n{ has_role:\"role\", on_org:\"\
    org-1\" } - returns true if the user has a role of 'role' on 'org-1'\n```\n\n\
    # User Roles\n\nUsers are mapped to roles within an organization via a userToRole\
    \ relationship, \nwhich allows for a user to have many roles on many organizations.\
    \ \n\n```\n(User, Org, Role)...\n```\n\n*This means that a user can have many\
    \ different roles on different organizations* \n\nFor example the user David may\
    \ have roles on multiple organizations:\n\n````\nDavid\n\tOrg1: Analyat\n\tOrg1:\
    \ Operator\n\tOrg2: Analyst\n\t...\n````\n\nThese roles are mapped by name to\
    \ a specific role implementation.\n\n## Cross Org Roles\n\nCross org roles for\
    \ use by MSSPs are supported by having the managed \norganization defining a special\
    \ cross-org role with the following\nattributes:\n\n * Org - The org the cross\
    \ org role applies to\n * Condition - The condition to evaluate\n * AssumeRole\
    \ - The role the user may assume\n\n## Example cross org role\n\n```json\n{\n\t\
    \"org\":\"house-1\",\n\t\"assume_role\":\"CatPetter\",\n\t\"version\":\"1.0.1\"\
    ,\n\t\"condition\": { \"has_role\":\"CatPetter\", \"on_org\":\"house-2\" }\n}\n\
    ```\n\nThis role will allow any user who has the role 'CatPetter' in the org 'house-2'\
    \ to assume\nthe role 'CatPetter' in 'house-1'\n\n\n\n\n\n\n"
  name: RBAC
- description: "\nSources are used to represent a container for source of security\
    \ data, such as a machine,\nor other potential source. \n\nThe source itself has\
    \ data associated with the source, see the 'Source Data' APIs for \naccess to\
    \ source data.\n"
  name: Source
- description: "\nEach source may send data which is stored and processed by the system.\
    \ So for example a machine will send data\nin a raw form which is then analyzed,\
    \ both the raw machine data and the analyzed data is available for querying.\n"
  name: SourceData
- description: "\nUIData API is intended for use by the UI to store user, organization\
    \ or source specific data for use by the UI. \n\nExample use cases are for user\
    \ profile data, data for a specific source or data associated with the organization.\n\
    \n * Data is stored with an expiration date as specified by the valid_to property,\
    \ this valid_to propery can be updated as needed\n * A JSON object may be supplied\
    \ by as the value for the data property\n * Max length of the marshaled data property\
    \ is 524288 bytes\n * Data may be tagged and queried by tags\n\n\t"
  name: UIData
- description: |2

     These APIs which do not require authentication.
  name: Unauthenticated APIs
- description: User APIs
  name: User
paths:
  /api/v1/app/user/current:
    get:
      description: "\nThis api call will return the current user as a JSON object,\
        \ or 404 if there is no user associated with the current authentication token\
        \ or JWT. When a 403 is received the message\nwill indicate if the user is\
        \ expired or is pending approval, i.e. \"user is expired\", or if the user\
        \ is in a pending state \"user is in a pending state\".\n"
      operationId: UserCurrent
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        "403":
          description: User is expired or in a pending state
        "404":
          description: No user is associated
      security: []
      summary: Returns the current user
      tags:
      - User
  /api/v1/integration/soar/org/{orgUID}/source/:
    get:
      description: "\nLists the sources of data that match the specified query parameters,\
        \ and return \nURL entry points into the UI for matching sources. \n\n* Requires\
        \ the action  *org:ListSources* on the organization\n"
      operationId: IntegrationSoarSrcList
      parameters:
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      - description: optional end time of the query
        explode: true
        in: query
        name: et
        required: false
        schema:
          description: optional end time of the query
          format: int64
          type: integer
        style: form
      - description: A single hostname to match
        explode: true
        in: query
        name: hostname
        required: false
        schema:
          description: A single hostname to match
          maxLength: 128
          type: string
        style: form
      - description: A single IP address to match
        explode: true
        in: query
        name: ip_address
        required: false
        schema:
          description: A single IP address to match
          maxLength: 128
          type: string
        style: form
      - description: A single mac address to match
        explode: true
        in: query
        name: mac_address
        required: false
        schema:
          description: A single mac address to match
          maxLength: 128
          type: string
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: page_size
        required: false
        schema:
          format: int32
          maximum: 100
          type: integer
        style: form
      - description: "optional start time of the query, if only a start time is provided,\
          \ end time will be start+10m"
        explode: true
        in: query
        name: st
        required: false
        schema:
          description: "optional start time of the query, if only a start time is\
            \ provided, end time will be start+10m"
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiSOARListHandlerOutput'
                type: array
          description: OK
        "403":
          description: permission denied
      summary: List sources for integration with SOARs
      tags:
      - Source
  /api/v1/meta/search/schema:
    get:
      description: "\nReturns meta data around which model and event properties are\
        \ indexed for search, i.e. the search schema\n"
      operationId: MetadataSearchSchema
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/ElasticRecordSchema'
                type: object
          description: OK
        "403":
          description: permission denied
      summary: Returns the schema used for search
      tags:
      - Metadata API
  /api/v1/metrics/query/:
    post:
      description: "\nAllows querying of the metrics for metricss, data is stored\
        \ as 'records' which are returned as json objects, in nd-json (see ndjson.org)\
        \ format. \n\n* Data is returned as it is matched, and no ordering guarentees\
        \ exist. \n* The call completes after it has finished searching for matching\
        \ records. \n* The query expression is limited to seaching a 1 week period\
        \ of time, it is the callers responsibility to construct an appropriate 24\
        \ hour range.\n\n* The user must have both the *metrics:QueryData* action\
        \ on the org\n"
      operationId: MetricsDataQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetricsDataQueryInput'
      responses:
        "200":
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/NDJSONStream'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: invalid input parameters
        "403":
          description: permission denied
      summary: Query metrics data
      tags:
      - MetricsData
  /api/v1/org/:
    get:
      description: |2

        Lists organizations

         * Will list organizations which the user has the action *org:Load* or *org:LoadExpired* on
      operationId: OrgList
      parameters:
      - allowEmptyValue: true
        explode: true
        in: query
        name: has_resource_policy
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: has_tags
        required: false
        schema:
          items:
            type: string
          maxItems: 30
          type: array
        style: form
      - allowEmptyValue: true
        explode: true
        in: query
        name: include_expired
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: name_contains
        required: false
        schema:
          maxLength: 32
          type: string
        style: form
      - explode: true
        in: query
        name: owner_uid_equals
        required: false
        schema:
          maxLength: 64
          type: string
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: page_size
        required: false
        schema:
          format: int32
          maximum: 100
          minimum: 10
          type: integer
        style: form
      - explode: true
        in: query
        name: uid_equals
        required: false
        schema:
          maxLength: 64
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Org'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: invalid query parameters
        "403":
          description: permission denied
      summary: List organizations
      tags:
      - Org
  /api/v1/org/{orgUID}:
    get:
      description: "\nLoads an organization by UID. \n\n * Requires action *org:Load*\n\
        \ * Requires action *org:LoadExpired* to load expired organizations\n\n"
      operationId: OrgLoad
      parameters:
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Org'
          description: OK
        "403":
          description: permission denied
      summary: Load an organization
      tags:
      - Org
    put:
      description: "\nUpdates the organization \n\n * Requires the user have the action\
        \ *org:Update* on the organization\n"
      operationId: OrgUpdate
      parameters:
      - description: Org UID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Org UID
          maxLength: 64
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgUpdateInput'
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: invalid input parameters
        "403":
          description: permission denied
      summary: Update an organization
      tags:
      - Org
  /api/v1/org/{orgUID}/agent/:
    get:
      description: |2+

        Lists the agents associated with an organization

        * Requires the action  *agent:List* on the organization

      operationId: AgentList
      parameters:
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          minLength: 10
          type: string
        style: simple
      - explode: true
        in: query
        name: agent_registration_uid_equals
        required: false
        schema:
          maxLength: 64
          type: string
        style: form
      - allowEmptyValue: true
        explode: true
        in: query
        name: original_association
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: page_size
        required: false
        schema:
          format: int32
          maximum: 100
          type: integer
        style: form
      - explode: true
        in: query
        name: source_uid_equals
        required: false
        schema:
          maxLength: 64
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Agent'
                type: array
          description: OK
        "403":
          description: permission denied
      summary: List agents
      tags:
      - Agent
  /api/v1/org/{orgUID}/agent/{agentUID}:
    get:
      description: |2+

        Load a specified agent

        * Requires the action  *agent:Load* on the organization

      operationId: AgentLoad
      parameters:
      - explode: false
        in: path
        name: agentUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: OK
        "403":
          description: permission denied
        "404":
          description: not found
      summary: Load an agent
      tags:
      - Agent
  /api/v1/org/{orgUID}/agent/{agentUID}/work:
    delete:
      description: "\nDelet the work data for a specified agent.\n\n * Requires *agent_data:Delete*\
        \ \n"
      operationId: AgentDeleteAgentWork
      parameters:
      - description: Agent UID
        explode: false
        in: path
        name: agentUID
        required: true
        schema:
          description: Agent UID
          maxLength: 20
          type: string
        style: simple
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation error
      summary: Delete agent work data for a specific agent
      tags:
      - AgentWork
    get:
      description: |2

        Get the work data for a specified agent.

         * Requires *agent_data:GetAgentData*
      operationId: AgentGetAgentWork
      parameters:
      - description: Agent UID
        explode: false
        in: path
        name: agentUID
        required: true
        schema:
          description: Agent UID
          maxLength: 20
          type: string
        style: simple
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAgentWorkOutput'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation error
      summary: Get agent work data for a specific agent
      tags:
      - AgentWork
    post:
      description: "\nSet the work data for a specified agent.\n\n * Requires *agent_data:Set*\
        \ \n"
      operationId: AgentSetAgentWork
      parameters:
      - description: Agent UID
        explode: false
        in: path
        name: agentUID
        required: true
        schema:
          description: Agent UID
          maxLength: 20
          type: string
        style: simple
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentSetAgentWorkInput'
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation error
      summary: Set agent work data for a specific agent
      tags:
      - AgentWork
  /api/v1/org/{orgUID}/agent_registration/:
    get:
      description: |2+

        Lists the agent registrations associated with an organization

        * Requires the action  *agent_registration:List* on the organization

      operationId: AgentRegistrationList
      parameters:
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          minLength: 10
          type: string
        style: simple
      - explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: page_size
        required: false
        schema:
          format: int32
          maximum: 100
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AgentRegistration'
                type: array
          description: OK
        "403":
          description: permission denied
      summary: List agent registrations
      tags:
      - Agent Registration
    post:
      description: |2

        Creates a new agent registration

        * Requires the action  *agent_registration:Create* on the organization
      operationId: AgentRegistrationCreate
      parameters:
      - description: The OrgUID the registration is associated with
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: The OrgUID the registration is associated with
          maxLength: 32
          type: string
        style: simple
      - description: Agent Registration UID
        explode: false
        in: path
        name: uid
        required: true
        schema:
          description: Agent Registration UID
          maxLength: 64
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentRegistrationCreateInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAgentCreateHandlerOutput'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: invalid input parameters
        "403":
          description: permission denied
      summary: Create an agent registration
      tags:
      - Agent Registration
  /api/v1/org/{orgUID}/agent_registration/{uid}:
    get:
      description: |2+

        Load a specified agent registration

        * Requires the action  *agent_registration:Load* on the agent registration

      operationId: AgentRegistrationLoad
      parameters:
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      - explode: false
        in: path
        name: uid
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentRegistration'
          description: OK
        "403":
          description: permission denied
        "404":
          description: not found
      summary: Load an agent registration
      tags:
      - Agent Registration
    put:
      description: |2

        Updates an existing registration

        * Requires the action  *agent_registration:Update* on the organization and the registration
      operationId: AgentRegistrationUpdate
      parameters:
      - description: The OrgUID the registration is associated with
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: The OrgUID the registration is associated with
          maxLength: 32
          type: string
        style: simple
      - description: Agent Registration UID
        explode: false
        in: path
        name: uid
        required: true
        schema:
          description: Agent Registration UID
          maxLength: 64
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentRegistrationUpdateInput'
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: invalid input parameters
        "403":
          description: permission denied
      summary: Update an agent registration
      tags:
      - Agent Registration
  /api/v1/org/{orgUID}/agent_registration/{uid}/download_link:
    get:
      description: |2+

        Create a download link for the registration

        * Requires the action  *agent_registration:Load* on the agent registration

      operationId: AgentRegistrationDownloadLink
      parameters:
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      - explode: false
        in: path
        name: uid
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAgentRegistrationDownloadLinkHandlerOutput'
          description: OK
        "400":
          description: bad request
        "403":
          description: permission denied
        "404":
          description: not found
      summary: Get a download link for this registration
      tags:
      - Agent Registration
  /api/v1/org/{orgUID}/agent_registration/{uid}/log:
    get:
      description: |2+

        Get lots relating to recent agent registration activity

        * Requires the action  *agent_registration:ListLog* on the agent registration

      operationId: AgentRegistrationGetLog
      parameters:
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          minLength: 10
          type: string
        style: simple
      - explode: false
        in: path
        name: uid
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: page_size
        required: false
        schema:
          format: int32
          maximum: 100
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DaoAgentLog'
                type: array
          description: OK
        "400":
          description: bad request
        "403":
          description: permission denied
        "404":
          description: not found
      summary: Get log of recent agent registration activity
      tags:
      - Agent Registration
  /api/v1/org/{orgUID}/agent_work:
    delete:
      description: "\nDelete the work data for all agents for an organization.\n\n\
        \ * Requires *agent_data:Delete* \n"
      operationId: AgentDeleteOrgWork
      parameters:
      - description: Agent UID
        explode: false
        in: path
        name: agentUID
        required: true
        schema:
          description: Agent UID
          maxLength: 20
          type: string
        style: simple
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation error
      summary: Delete agent work for an org
      tags:
      - AgentWork
    get:
      description: |2

        Get the work data for all agents associated with the organization.

         * Requires *agent_data:GetOrgData*
      operationId: AgentGetOrgWork
      parameters:
      - description: Agent UID
        explode: false
        in: path
        name: agentUID
        required: true
        schema:
          description: Agent UID
          maxLength: 20
          type: string
        style: simple
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAgentWorkOutput'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation error
      summary: Get agent work data for the organization
      tags:
      - AgentWork
    post:
      description: |2

        Set the work data for a specified agent.

         * Requires *agent_data:SetData*
      operationId: AgentSetOrgWork
      parameters:
      - description: Agent UID
        explode: false
        in: path
        name: agentUID
        required: true
        schema:
          description: Agent UID
          maxLength: 20
          type: string
        style: simple
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentSetOrgWorkInput'
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation error
      summary: Set agent work data for a specific agent
      tags:
      - AgentWork
  /api/v1/org/{orgUID}/assignedrole/:
    get:
      description: |2

        Allows querying of roles on the organization

         * Requires the user have the action *org:ListOrgRoles* on the organization
      operationId: OrgListRole
      parameters:
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      - explode: true
        in: query
        name: role_uid_equals
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: user_email_equals
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: user_uid_equals
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DaoOrgRoleResponse'
                type: array
          description: OK
        "403":
          description: permission denied
      summary: List OrgRoles
      tags:
      - Org
  /api/v1/org/{orgUID}/assignedrole/add:
    post:
      description: |2

        Assigns a role to a particular user on an organization

         * Requires the user have the action *user.AssignRole* on the organization
      operationId: OrgAssignRole
      parameters:
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgAssignRoleInput'
      responses:
        "200":
          description: OK
      summary: Assign OrgRole
      tags:
      - Org
  /api/v1/org/{orgUID}/assignedrole/del:
    post:
      description: |2

        Unassigns a role to a particular user on an organization

         * Requires the user have the action *user.UnassignRole* on the organization
      operationId: OrgUnassignRole
      parameters:
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgUnassignRoleInput'
      responses:
        "200":
          description: OK
        "403":
          description: permission denied
      summary: Unassign OrgRole
      tags:
      - Org
  /api/v1/org/{orgUID}/dashboard_search/:
    get:
      description: |2-

        Lists dashboard searches by org.

         * Requires action dashboard_search:Query
      operationId: DashboardSearchList
      parameters:
      - description: Org UID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Org UID
          maxLength: 32
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DashboardSearch'
                type: array
          description: OK
        "403":
          description: permission denied
      summary: List dashboard searches
      tags:
      - DashboardSearch
    post:
      description: |2-

        Create a dashboard search in an org.

         * Requires action dashboard_search:Create
      operationId: DashboardSearchCreate
      parameters:
      - description: UID for the DashboardSearch
        explode: false
        in: path
        name: dashboardSearchUID
        required: true
        schema:
          description: UID for the DashboardSearch
          type: string
        style: simple
      - description: Org UID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Org UID
          maxLength: 32
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardSearchCreateInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: OK
        "403":
          description: permission denied
      summary: Create a dashboard search
      tags:
      - DashboardSearch
  /api/v1/org/{orgUID}/dashboard_search/{dashboardSearchUID}:
    delete:
      description: |2-

        Get a dashboard search in an org.

         * Requires action dashboard_search:Delete
      operationId: DashboardSearchDelete
      parameters:
      - explode: false
        in: path
        name: dashboardSearchUID
        required: true
        schema:
          maxLength: 32
          type: string
        style: simple
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 32
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "403":
          description: permission denied
      summary: Get a dashboard search
      tags:
      - DashboardSearch
    get:
      description: |2-

        Get a dashboard search in an org.

         * Requires action dashboard_search:Get
      operationId: DashboardSearchGet
      parameters:
      - explode: false
        in: path
        name: dashboardSearchUID
        required: true
        schema:
          maxLength: 32
          type: string
        style: simple
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 32
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardSearch'
          description: OK
        "403":
          description: permission denied
      summary: Get a dashboard search
      tags:
      - DashboardSearch
    put:
      description: |2-

        Update a dashboard search in an org.

         * Requires action dashboard_search:Update
      operationId: DashboardSearchUpdate
      parameters:
      - description: UID for the DashboardSearch
        explode: false
        in: path
        name: dashboardSearchUID
        required: true
        schema:
          description: UID for the DashboardSearch
          type: string
        style: simple
      - description: Org UID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Org UID
          maxLength: 32
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardSearchUpdateInput'
      responses:
        "200":
          description: OK
        "403":
          description: permission denied
      summary: Update a dashboard search
      tags:
      - DashboardSearch
  /api/v1/org/{orgUID}/data/:
    get:
      description: Same as the post query above except results are cached
      operationId: SrcDataQueryV2
      parameters:
      - description: Organization UID to query
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Organization UID to query
          maxLength: 64
          type: string
        style: simple
      - description: DataType to query
        explode: true
        in: query
        name: dt
        required: true
        schema:
          description: DataType to query
          maxLength: 24
          type: string
        style: form
      - description: "Data which matches this expression are returned, as a json object"
        explode: true
        in: query
        name: e
        required: false
        schema:
          description: "Data which matches this expression are returned, as a json\
            \ object"
          type: string
        style: form
      - description: "Time in unix epoch time, records < time are returned"
        explode: true
        in: query
        name: et
        required: false
        schema:
          description: "Time in unix epoch time, records < time are returned"
          format: double
          type: number
        style: form
      - description: List of IDs to resolve
        explode: true
        in: query
        name: id
        required: false
        schema:
          description: List of IDs to resolve
          items:
            type: string
          maxItems: 256
          type: array
        style: form
      - description: "Array of top level object properties which will be emitted,\
          \ if none are specified all will be emitted; ex pj=id&pj=version"
        explode: true
        in: query
        name: pj
        required: false
        schema:
          description: "Array of top level object properties which will be emitted,\
            \ if none are specified all will be emitted; ex pj=id&pj=version"
          items:
            type: string
          maxItems: 50
          type: array
        style: form
      - description: Lucene based search query
        explode: true
        in: query
        name: q
        required: false
        schema:
          description: Lucene based search query
          maxLength: 256
          type: string
        style: form
      - description: Where to start the query in the result set from
        explode: true
        in: query
        name: qf
        required: false
        schema:
          description: Where to start the query in the result set from
          format: int32
          type: integer
        style: form
      - description: Size of the query result set
        explode: true
        in: query
        name: qs
        required: false
        schema:
          description: Size of the query result set
          format: int32
          maximum: 100
          type: integer
        style: form
      - allowEmptyValue: true
        description: Return rptrs mixed with the data
        explode: true
        in: query
        name: rr
        required: false
        schema:
          description: Return rptrs mixed with the data
          type: boolean
        style: form
      - description: Source UID to query
        explode: true
        in: query
        name: src
        required: false
        schema:
          description: Source UID to query
          maxLength: 64
          type: string
        style: form
      - description: "Time in unix epoch time, records >= time are returned"
        explode: true
        in: query
        name: st
        required: false
        schema:
          description: "Time in unix epoch time, records >= time are returned"
          format: double
          type: number
        style: form
      responses:
        "200":
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/NDJSONStream'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: invalid input parameters
        "403":
          description: permission denied
      summary: Query source data
      tags:
      - SourceData
  /api/v1/org/{orgUID}/investigation/:
    get:
      description: |2

        Lists investigations

         * Will list investigations which the user has the action *investigation:Load* or *investigation:LoadExpired* on
      operationId: InvestigationList
      parameters:
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DaoInvestigation'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: invalid query parameters
        "403":
          description: permission denied
      summary: List investigations
      tags:
      - Investigation
    post:
      description: |2

        Create an investigationan

         * Requires the user have the action *investigation:Create*
      operationId: InvestigationCreate
      parameters:
      - description: Investigation UID
        explode: false
        in: path
        name: investigationUID
        required: true
        schema:
          description: Investigation UID
          type: string
        style: simple
      - description: Investigation OrgUID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Investigation OrgUID
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvestigationCreateInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiInvestigationCreateOutput'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: invalid input parameters
        "403":
          description: permission denied
      summary: Create an investigation
      tags:
      - Investigation
  /api/v1/org/{orgUID}/investigation/{investigationUID}:
    delete:
      description: "\nDeletes an investigation, by setting valid_to=now so that the\
        \ investigation is virtually deleted.\n\n * Requires the user have the action\
        \ *investigation:Delete*\n"
      operationId: InvestigationDelete
      parameters:
      - description: Investigation UID
        explode: false
        in: path
        name: investigationUID
        required: true
        schema:
          description: Investigation UID
          type: string
        style: simple
      - description: Investigation OrgUID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Investigation OrgUID
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "403":
          description: permission denied
      summary: Delete an investigation
      tags:
      - Investigation
    get:
      description: "\nLoads an investigation by UID. \n\n * Requires action  *investigation:Load*\
        \ to load an active investigation\n * Requires action *investigation:LoadExpired*\
        \ to load expired investigations\n\n"
      operationId: InvestigationLoad
      parameters:
      - explode: false
        in: path
        name: investigationUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaoInvestigation'
          description: OK
        "403":
          description: permission denied
      summary: Load an investigation
      tags:
      - Investigation
    put:
      description: |2

        Updates the investigationan

         * Requires the user have the action *investigation:Update*
      operationId: InvestigationUpdate
      parameters:
      - description: Investigation UID
        explode: false
        in: path
        name: investigationUID
        required: true
        schema:
          description: Investigation UID
          type: string
        style: simple
      - description: Investigation OrgUID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Investigation OrgUID
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvestigationUpdateInput'
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: invalid input parameters
        "403":
          description: permission denied
      summary: Update an investigation
      tags:
      - Investigation
  /api/v1/org/{orgUID}/investigation/{investigationUID}/version/:
    get:
      description: |2

        Lists prior version of this investigation

         * Requires the user have the action *investigation:ListVersions*
      operationId: InvestigationListVersions
      parameters:
      - explode: false
        in: path
        name: investigationUID
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DaoInvestigation'
                type: array
          description: OK
        "403":
          description: permission denied
      summary: List Investigation Versions
      tags:
      - Investigation
  /api/v1/org/{orgUID}/investigation/{investigationUID}/version/{version}:
    get:
      description: |2

        Loads a specific version of an investigation

         * Requires the user have the action *investigation:LoadVersion*
      operationId: InvestigationLoadVersion
      parameters:
      - explode: false
        in: path
        name: investigationUID
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: version
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaoInvestigation'
          description: OK
        "403":
          description: permission denied
      summary: Load Investigation Version
      tags:
      - Investigation
  /api/v1/org/{orgUID}/invite:
    post:
      description: |2+

        Invites users to an organization

         * Requires action *org:InviteUsers* on the organization to invite users

      operationId: OrgInviteUsers
      parameters:
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgInviteUsersInput'
      responses:
        "200":
          description: OK
        "403":
          description: permission denied
      summary: Invite users to an organization
      tags:
      - Org
  /api/v1/org/{orgUID}/notification_policy:
    put:
      description: "\nUpdates the organization's notification policy\n\nThe policy\
        \ contains targets, which are named destinations, for example a list of admins,\
        \ and then rules for how notifications\nare routed. The most basic notification\
        \ is the default policy assigned to all organizations, which is to send notifications\n\
        to the organization owner. \n\nEach notification has a schema which can be\
        \ used to filter how notifications are routed. \n\nHere is an example notification\
        \ policy:\n\n```\n{\n    \"targets\": {\n      \"admins\": {\n        \"emails\"\
        : [\n          \"admin1@foo.com\",\n          \"admin2@foo.com\"\n       \
        \ ]\n      },\n      \"soc\": {\n        \"slack\": {\n          \"url\":\
        \ \"http://app.slack.com/XXXX\"\n        }\n      },\n      \"sns_example\"\
        : {\n        \"data\": \"UI supplied data\",\n        \"description\": \"\
        Cross-Account Notification\",\n        \"sns\": {\n          \"sns_topic_arn\"\
        : \"arn:aws:sns:CUSTOMER-AWS-REGION:CUSTOMER-AWS-ACCOUNT-ID:CUSTOMER-TOPIC-NAME\"\
        ,\n          \"cross_account_iam_role\": \"arn:aws:iam::CUSTOMER-ACCOUNT-ID:role/CUSTOMER-ROLE-NAME\"\
        \n        }\n      }\n    },\n    \"routes\": [\n      {\n        \"target\"\
        : \"admins\",\n        \"expr\": {\n          \"schema\": \"agent_offline\"\
        \n        }\n      },\n      {\n        \"target\": \"soc\",\n        \"expr\"\
        : {\n          \"schema\": \"spydertrace_updated\"\n        }\n      },\n\
        \      {\n        \"destination\": {\n          \"users\": [\n           \
        \ \"X23hs8234lks\"\n          ]\n        }\n      }\n    ]\n  }\n```\n\nThis\
        \ policy says that any notification with the schema \"agent_offline\" is send\
        \ to the admin emails, and that any notifications with the schema \"spydertrace_update\"\
        \ is send to the soc slack channel, and all other notifications are sent to\
        \ a user specified by their UserUID. If a destination is an explicit UserUID\
        \ then the users notification policy will applied, for example to notify them\
        \ by their notification type of choice.  \n\n * The following destination\
        \ types are currently supported, UserUID, Email, Slack, Webhook, SNS. See\
        \ the associated destination definition in the notification policy for details.\
        \ \n * First match for a routing rule wins, and further processsing of the\
        \ notification stops. \n * If a UserUID is specified the users notification\
        \ policy may be used to contact that user.\n * Each notification has an associated\
        \ schema, which is used to provide a consistent schema for the notification.\n\
        \ * Expressions are optional, if no expression is specified the route matches\
        \ by default\n * If the content-type is application/hjson the policy will\
        \ be parsed and stored as hjson, all comments will be lost on an existing\
        \ hjson policy if it is uploaded as json\n\nThis is an example notification\
        \ generated using a notification policy and dashboardsearch:\n\n```\n{\n\t\
        \"uid\": \"lQ0Q1lKm\",\n\t\"org_uid\": \"your_org_uid\",\n\t\"valid_from\"\
        : \"2021-10-14T19:22:00.869159169Z\",\n\t\"title\": \"Spyderbat: Dashboard\
        \ search notification Recent interactive (shell) Processes\",\n\t\"message\"\
        : \"Spyderbat: Dashboard search notification Recent interactive (shell) Processes\"\
        ,\n\t\"data\": {\n\t  \"dashboardsearch\": {\n\t\t\"data\": {\n\t\t  \"createTime\"\
        : 1634237497.142,\n\t\t  \"createdBy\": \"user@example.com\"\n\t\t},\n\t\t\
        \"description\": \"Recent interactive (shell) Processes\",\n\t\t\"notify\"\
        : true,\n\t\t\"notify_frequency\": 300,\n\t\t\"org_uid\": \"spyderbatuid\"\
        ,\n\t\t\"search\": \"schema:model_process AND interactive:true\",\n\t\t\"\
        uid\": \"RTBQoR3uucyjG8ZeHJmw\"\n\t  }\n\t},\n\t\"schema\": \"dashboard_saved_search\"\
        ,\n\t\"records\": [\n\t  {\n\t\t\"total_hits\": 0\n\t  }\n\t]\n  }\n```\n\n\
        \ * Requires the user have the action *org:UpdateNotificationPolicy* on the\
        \ organization\n"
      operationId: OrgUpdateNotificationPolicy
      parameters:
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationPolicy'
        description: The notification policy
        required: true
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: invalid input parameters
        "403":
          description: permission denied
      summary: Update an organization's notification policy
      tags:
      - Org
  /api/v1/org/{orgUID}/notification_policy/:
    get:
      description: "\nLoads the notification policy for an organization. The notification\
        \ policy defines who and how the organization is notified. \n \n * If the\
        \ content-type is application/hjson the policy will be returned as hjson\n\
        \ * If the content-type is application/json the policy will be returned as\
        \ json\n\n\n * Requires the user have the action *org:LoadNotificationPolicy*\
        \ on the organization\n"
      operationId: OrgLoadNotificationPolicy
      parameters:
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      responses:
        "200":
          content:
            application/hjson:
              schema:
                $ref: '#/components/schemas/NotificationPolicy'
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPolicy'
          description: OK
        "403":
          description: permission denied
      summary: Load Notification Policy
      tags:
      - Org
  /api/v1/org/{orgUID}/notification_policy/test_target:
    post:
      description: |2

        Sends a test notification to a target.

         * Requires the user have the action *org:SendTestNotification* on the organization
      operationId: OrgTestNotificationTarget
      parameters:
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgTestNotificationTargetInput'
      responses:
        "200":
          description: OK
        "403":
          description: permission denied
      summary: Test Notification Target
      tags:
      - Org
  /api/v1/org/{orgUID}/source/:
    get:
      description: |2

        Lists the sources of data for an organization

        * Requires the action  *org:ListSources* on the organization
      operationId: SrcList
      parameters:
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          minLength: 10
          type: string
        style: simple
      - explode: true
        in: query
        name: agent_uid_equals
        required: false
        schema:
          maxLength: 64
          type: string
        style: form
      - explode: true
        in: query
        name: description_contains
        required: false
        schema:
          maxLength: 32
          type: string
        style: form
      - explode: true
        in: query
        name: has_tags
        required: false
        schema:
          items:
            type: string
          maxItems: 10
          type: array
        style: form
      - allowEmptyValue: true
        explode: true
        in: query
        name: original_association
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - explode: true
        in: query
        name: page_size
        required: false
        schema:
          format: int32
          maximum: 100
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Source'
                type: array
          description: OK
        "403":
          description: permission denied
      summary: List sources
      tags:
      - Source
    post:
      description: |2

        Creates a new source of data

        * Requires the action  *org:CreateSource* on the organization
      operationId: SrcCreate
      parameters:
      - description: The org this source is associated with
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: The org this source is associated with
          maxLength: 64
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SrcCreateInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSourceCreateHandlerOutput'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: invalid input parameters
        "403":
          description: permission denied
      summary: Create a source
      tags:
      - Source
  /api/v1/org/{orgUID}/source/{sourceUID}:
    delete:
      description: |2

        Delete a source

        * Requires the action  *org:DeleteSource* on the organization
      operationId: SrcDelete
      parameters:
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      - explode: false
        in: path
        name: sourceUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "403":
          description: permission denied
      summary: Delete a source
      tags:
      - Source
    get:
      description: |2

        Loads the meta data for a source of data

        * Requires the action  *org:LoadSource* on the organization
      operationId: SrcLoad
      parameters:
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      - explode: false
        in: path
        name: sourceUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
          description: OK
        "403":
          description: permission denied
        "404":
          description: not found
      summary: Load a source
      tags:
      - Source
    put:
      description: |2

        Updates the meta data for a source of data

        * Requires the action  *org:UpdateSource* on the organization
      operationId: SrcUpdate
      parameters:
      - description: The org this source is associated with
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: The org this source is associated with
          maxLength: 64
          type: string
        style: simple
      - description: The UID of the source
        explode: false
        in: path
        name: sourceUID
        required: true
        schema:
          description: The UID of the source
          maxLength: 64
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SrcUpdateInput'
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: invalid input parameters
        "403":
          description: permission denied
      summary: Update a source
      tags:
      - Source
  /api/v1/org/{orgUID}/source/{sourceUID}/data/{dataType}:
    post:
      description: Sends data to a source
      operationId: SrcSendData
      parameters:
      - explode: false
        in: path
        name: dataType
        required: true
        schema:
          maxLength: 128
          type: string
        style: simple
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      - explode: false
        in: path
        name: sourceUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: invalid input parameters
        "403":
          description: permission denied
      summary: "Send data to a source, this is expected to be gzip compressed nd-json.\
        \ The 'Content-Encoding' header should be specified with a value of 'gzip'"
      tags:
      - SourceData
  /api/v1/org/{orgUID}/source/{sourceUID}/uidata/:
    get:
      description: |2+

        Query UI Data

         * Requires *uidata:Query*

      operationId: UiDataQuerySourceData
      parameters:
      - description: Key for the data
        explode: false
        in: path
        name: dataKey
        required: true
        schema:
          description: Key for the data
          maxLength: 32
          type: string
        style: simple
      - description: Org UID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Org UID
          maxLength: 32
          type: string
        style: simple
      - description: Src UID
        explode: false
        in: path
        name: sourceUID
        required: true
        schema:
          description: Src UID
          maxLength: 32
          type: string
        style: simple
      - description: Owner UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: Owner UID
          maxLength: 32
          type: string
        style: simple
      - description: Tags to search for
        explode: true
        in: query
        name: tags
        required: false
        schema:
          description: Tags to search for
          items:
            type: string
          maxItems: 5
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UIData'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user
      summary: Query Source UI Data
      tags:
      - UIData
  /api/v1/org/{orgUID}/source/{sourceUID}/uidata/{dataKey}:
    delete:
      description: |2+

        Sets UI Data

         * Requires *uidata:Delete*

      operationId: UiDataDeleteSourceData
      parameters:
      - description: Key for the data
        explode: false
        in: path
        name: dataKey
        required: true
        schema:
          description: Key for the data
          maxLength: 32
          type: string
        style: simple
      - description: Org UID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Org UID
          maxLength: 32
          type: string
        style: simple
      - description: Src UID
        explode: false
        in: path
        name: sourceUID
        required: true
        schema:
          description: Src UID
          maxLength: 32
          type: string
        style: simple
      - description: Owner UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: Owner UID
          maxLength: 32
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user
      summary: Delete Source UI Data
      tags:
      - UIData
    get:
      description: |2+

        Gets UI Data

         * Updates lastused
         * Requires *uidata:Get*

      operationId: UiDataGetSourceData
      parameters:
      - description: Key for the data
        explode: false
        in: path
        name: dataKey
        required: true
        schema:
          description: Key for the data
          maxLength: 32
          type: string
        style: simple
      - description: Org UID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Org UID
          maxLength: 32
          type: string
        style: simple
      - description: Src UID
        explode: false
        in: path
        name: sourceUID
        required: true
        schema:
          description: Src UID
          maxLength: 32
          type: string
        style: simple
      - description: Owner UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: Owner UID
          maxLength: 32
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UIData'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user
      summary: Get Source UI Data
      tags:
      - UIData
    put:
      description: "\nSets UI Data\n\n * Updates data, valid_to (if set), lastused\n\
        \ * Requires *uidata:Set*\n\n"
      operationId: UiDataSetSourceData
      parameters:
      - description: Key for the data
        explode: false
        in: path
        name: dataKey
        required: true
        schema:
          description: Key for the data
          maxLength: 32
          type: string
        style: simple
      - description: Org UID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Org UID
          maxLength: 32
          type: string
        style: simple
      - description: Source UID
        explode: false
        in: path
        name: sourceUID
        required: true
        schema:
          description: Source UID
          maxLength: 32
          type: string
        style: simple
      - description: Owner UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: Owner UID
          maxLength: 32
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UiDataSetSourceDataInput'
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user
      summary: Set Source UI Data
      tags:
      - UIData
  /api/v1/org/{orgUID}/type:
    get:
      description: |2

        Loads the org type for the organiation

         * Requires action *org:Load*
      operationId: OrgTypeLoad
      parameters:
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DaoOrgType'
          description: OK
        "403":
          description: permission denied
      summary: Load the org type for the organization
      tags:
      - OrgType
  /api/v1/org/{orgUID}/type/limit/active_sources:
    get:
      description: "\nLoads the limits regarding active sources allowed on the organization,\
        \ the active\nsources in an org are calculated on a 5m0s basis. \n\n * Requires\
        \ action *org:Load*\n"
      operationId: OrgTypeLimitActiveSources
      parameters:
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionOrgTypeMaxLimit'
          description: OK
        "403":
          description: permission denied
      summary: Loads limits regarding active sources
      tags:
      - OrgType
  /api/v1/org/{orgUID}/type/limit/org_roles:
    get:
      description: |2

        Loads the limit information regarding the number of associated roles allowed
        per an organization

         * Requires action *org:Load*
      operationId: OrgTypeLimitOrgRoles
      parameters:
      - explode: false
        in: path
        name: orgUID
        required: true
        schema:
          maxLength: 64
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionOrgTypeMaxLimit'
          description: OK
        "403":
          description: permission denied
      summary: Loads limits regarding org roles
      tags:
      - OrgType
  /api/v1/org/{orgUID}/uidata/:
    get:
      description: |2+

        Query UI Data

         * Requires *uidata:Query*

      operationId: UiDataQueryOrgData
      parameters:
      - description: Key for the data
        explode: false
        in: path
        name: dataKey
        required: true
        schema:
          description: Key for the data
          maxLength: 32
          type: string
        style: simple
      - description: Org UID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Org UID
          maxLength: 32
          type: string
        style: simple
      - description: Src UID
        explode: false
        in: path
        name: sourceUID
        required: true
        schema:
          description: Src UID
          maxLength: 32
          type: string
        style: simple
      - description: Owner UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: Owner UID
          maxLength: 32
          type: string
        style: simple
      - description: Tags to search for
        explode: true
        in: query
        name: tags
        required: false
        schema:
          description: Tags to search for
          items:
            type: string
          maxItems: 5
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UIData'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user
      summary: Query Org UI Data
      tags:
      - UIData
  /api/v1/org/{orgUID}/uidata/{dataKey}:
    delete:
      description: |2+

        Sets UI Data

         * Requires *uidata:Delete*

      operationId: UiDataDeleteOrgData
      parameters:
      - description: Key for the data
        explode: false
        in: path
        name: dataKey
        required: true
        schema:
          description: Key for the data
          maxLength: 32
          type: string
        style: simple
      - description: Org UID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Org UID
          maxLength: 32
          type: string
        style: simple
      - description: Src UID
        explode: false
        in: path
        name: sourceUID
        required: true
        schema:
          description: Src UID
          maxLength: 32
          type: string
        style: simple
      - description: Owner UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: Owner UID
          maxLength: 32
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user
      summary: Delete Org UI Data
      tags:
      - UIData
    get:
      description: |2+

        Gets UI Data

         * Updates lastused
         * Requires *uidata:Get*

      operationId: UiDataGetOrgData
      parameters:
      - description: Key for the data
        explode: false
        in: path
        name: dataKey
        required: true
        schema:
          description: Key for the data
          maxLength: 32
          type: string
        style: simple
      - description: Org UID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Org UID
          maxLength: 32
          type: string
        style: simple
      - description: Src UID
        explode: false
        in: path
        name: sourceUID
        required: true
        schema:
          description: Src UID
          maxLength: 32
          type: string
        style: simple
      - description: Owner UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: Owner UID
          maxLength: 32
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UIData'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user
      summary: Get Org UI Data
      tags:
      - UIData
    put:
      description: "\nSets UI Data\n\n * Updates data, valid_to (if set), lastused\n\
        \ * Requires *uidata:Set*\n\n"
      operationId: UiDataSetOrgData
      parameters:
      - description: Key for the data
        explode: false
        in: path
        name: dataKey
        required: true
        schema:
          description: Key for the data
          maxLength: 32
          type: string
        style: simple
      - description: Org UID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Org UID
          maxLength: 32
          type: string
        style: simple
      - description: Source UID
        explode: false
        in: path
        name: sourceUID
        required: true
        schema:
          description: Source UID
          maxLength: 32
          type: string
        style: simple
      - description: Owner UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: Owner UID
          maxLength: 32
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UiDataSetOrgDataInput'
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user
      summary: Set Org UI Data
      tags:
      - UIData
  /api/v1/rbac/capabilities/:
    post:
      description: Allows for querying of what actions a user can perform; results
        may be cached for a short period of time.
      operationId: CanUserPerform
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CanUserPerformInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRBACActions'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user signup
      summary: Query allows actions on objects
      tags:
      - RBAC
  /api/v1/source/query/:
    post:
      description: "\nAllows querying of the source data, data is stored as 'records'\
        \ which are returned as json objects, in nd-json (see ndjson.org) format.\
        \ \n\n* Data is returned as it is matched, and no ordering guarentees exist.\
        \ \n* The call completes after it has finished searching for matching records.\
        \ \n* The query expression is limited to seaching a 24 hour period of time,\
        \ it is the callers responsibility to construct an appropriate 24 hour range.\n\
        * Documentation for the returned spydergraph datatype can be found at https://app.spyderbat.com/schema/spydergraph/index.html\n\
        \n* The user must have both the *org.ListSourceData* action on the org and\
        \ *source_data.Query* action on the source\n\n"
      operationId: SrcDataQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SrcDataQueryInput'
      responses:
        "200":
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/NDJSONStream'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: invalid input parameters
        "403":
          description: permission denied
      summary: Query source data
      tags:
      - SourceData
  /api/v1/user/{userUID}:
    get:
      description: "\nLoads a user given the user's user ID. \n\n * By default users\
        \ may only load their own user ID\n * The action *user:Load* may be placed\
        \ upon the users role to allowed loading other users\n"
      operationId: UserLoad
      parameters:
      - description: User UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: User UID
          maxLength: 64
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        "404":
          description: No user with specified ID was found
      summary: Load a user by ID
      tags:
      - User
  /api/v1/user/{userUID}/apikey/:
    get:
      description: |2+

        Lists API keys associated with a user

         * Requires global action *user:APIKeyList*

      operationId: ApiKeyList
      parameters:
      - description: User UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: User UID
          maxLength: 64
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/APIKey'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user
      summary: Lists an API key
      tags:
      - APIKey
    post:
      description: |2

        Creates a new API key which is associated with the user

          * Requires global action *user:APIKeyCreate*
      operationId: ApiKeyCreate
      parameters:
      - description: User UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: User UID
          maxLength: 64
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyCreateInput'
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user
      summary: Creates a new API key
      tags:
      - APIKey
  /api/v1/user/{userUID}/apikey/{uid}:
    delete:
      description: |2

        Deletes a specific API key

         * Requires global action *user:APIKeyDelete*
      operationId: ApiKeyDelete
      parameters:
      - description: API Key UID
        explode: false
        in: path
        name: uid
        required: true
        schema:
          description: API Key UID
          maxLength: 64
          type: string
        style: simple
      - description: User UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: User UID
          maxLength: 64
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user
      summary: Delete an API key
      tags:
      - APIKey
    put:
      description: "\nUpdates a specific API Key, the only fields which can be updated\
        \ are description and enabled\n\n * Requires global action *user:APIKeyUpdate*\n"
      operationId: ApiKeyUpdate
      parameters:
      - description: API Key UID
        explode: false
        in: path
        name: uid
        required: true
        schema:
          description: API Key UID
          maxLength: 64
          type: string
        style: simple
      - description: User UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: User UID
          maxLength: 64
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyUpdateInput'
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user
      summary: Updates an API key
      tags:
      - APIKey
  /api/v1/user/{userUID}/org/{orgUID}/source/{sourceUID}/uidata/:
    get:
      description: |2+

        Query UI Data

         * Requires *uidata:Query*

      operationId: UiDataQueryUserSourceData
      parameters:
      - description: Key for the data
        explode: false
        in: path
        name: dataKey
        required: true
        schema:
          description: Key for the data
          maxLength: 32
          type: string
        style: simple
      - description: Org UID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Org UID
          maxLength: 32
          type: string
        style: simple
      - description: Src UID
        explode: false
        in: path
        name: sourceUID
        required: true
        schema:
          description: Src UID
          maxLength: 32
          type: string
        style: simple
      - description: Owner UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: Owner UID
          maxLength: 32
          type: string
        style: simple
      - description: Tags to search for
        explode: true
        in: query
        name: tags
        required: false
        schema:
          description: Tags to search for
          items:
            type: string
          maxItems: 5
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UIData'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user
      summary: Query UserSource UI Data
      tags:
      - UIData
  /api/v1/user/{userUID}/org/{orgUID}/source/{sourceUID}/uidata/{dataKey}:
    delete:
      description: |2+

        Sets UI Data

         * Requires *uidata:Delete*

      operationId: UiDataDeleteUserSourceData
      parameters:
      - description: Key for the data
        explode: false
        in: path
        name: dataKey
        required: true
        schema:
          description: Key for the data
          maxLength: 32
          type: string
        style: simple
      - description: Org UID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Org UID
          maxLength: 32
          type: string
        style: simple
      - description: Src UID
        explode: false
        in: path
        name: sourceUID
        required: true
        schema:
          description: Src UID
          maxLength: 32
          type: string
        style: simple
      - description: Owner UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: Owner UID
          maxLength: 32
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user
      summary: Delete UserSource UI Data
      tags:
      - UIData
    get:
      description: |2+

        Gets UI Data

         * Updates lastused
         * Requires *uidata:Get*

      operationId: UiDataGetUserSourceData
      parameters:
      - description: Key for the data
        explode: false
        in: path
        name: dataKey
        required: true
        schema:
          description: Key for the data
          maxLength: 32
          type: string
        style: simple
      - description: Org UID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Org UID
          maxLength: 32
          type: string
        style: simple
      - description: Src UID
        explode: false
        in: path
        name: sourceUID
        required: true
        schema:
          description: Src UID
          maxLength: 32
          type: string
        style: simple
      - description: Owner UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: Owner UID
          maxLength: 32
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UIData'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user
      summary: Get UserSource UI Data
      tags:
      - UIData
    put:
      description: "\nSets UI Data\n\n * Updates data, valid_to (if set), lastused\n\
        \ * Requires *uidata:Set*\n\n"
      operationId: UiDataSetUserSourceData
      parameters:
      - description: Key for the data
        explode: false
        in: path
        name: dataKey
        required: true
        schema:
          description: Key for the data
          maxLength: 32
          type: string
        style: simple
      - description: Org UID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Org UID
          maxLength: 32
          type: string
        style: simple
      - description: Source UID
        explode: false
        in: path
        name: sourceUID
        required: true
        schema:
          description: Source UID
          maxLength: 32
          type: string
        style: simple
      - description: Owner UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: Owner UID
          maxLength: 32
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UiDataSetUserSourceDataInput'
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user
      summary: Set UserSource UI Data
      tags:
      - UIData
  /api/v1/user/{userUID}/org/{orgUID}/uidata/:
    get:
      description: |2+

        Query UI Data

         * Requires *uidata:Query*

      operationId: UiDataQueryUserOrgData
      parameters:
      - description: Key for the data
        explode: false
        in: path
        name: dataKey
        required: true
        schema:
          description: Key for the data
          maxLength: 32
          type: string
        style: simple
      - description: Org UID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Org UID
          maxLength: 32
          type: string
        style: simple
      - description: Src UID
        explode: false
        in: path
        name: sourceUID
        required: true
        schema:
          description: Src UID
          maxLength: 32
          type: string
        style: simple
      - description: Owner UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: Owner UID
          maxLength: 32
          type: string
        style: simple
      - description: Tags to search for
        explode: true
        in: query
        name: tags
        required: false
        schema:
          description: Tags to search for
          items:
            type: string
          maxItems: 5
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UIData'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user
      summary: Query UserOrg UI Data
      tags:
      - UIData
  /api/v1/user/{userUID}/org/{orgUID}/uidata/{dataKey}:
    delete:
      description: |2+

        Sets UI Data

         * Requires *uidata:Delete*

      operationId: UiDataDeleteUserOrgData
      parameters:
      - description: Key for the data
        explode: false
        in: path
        name: dataKey
        required: true
        schema:
          description: Key for the data
          maxLength: 32
          type: string
        style: simple
      - description: Org UID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Org UID
          maxLength: 32
          type: string
        style: simple
      - description: Src UID
        explode: false
        in: path
        name: sourceUID
        required: true
        schema:
          description: Src UID
          maxLength: 32
          type: string
        style: simple
      - description: Owner UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: Owner UID
          maxLength: 32
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user
      summary: Delete UserOrg UI Data
      tags:
      - UIData
    get:
      description: |2+

        Gets UI Data

         * Updates lastused
         * Requires *uidata:Get*

      operationId: UiDataGetUserOrgData
      parameters:
      - description: Key for the data
        explode: false
        in: path
        name: dataKey
        required: true
        schema:
          description: Key for the data
          maxLength: 32
          type: string
        style: simple
      - description: Org UID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Org UID
          maxLength: 32
          type: string
        style: simple
      - description: Src UID
        explode: false
        in: path
        name: sourceUID
        required: true
        schema:
          description: Src UID
          maxLength: 32
          type: string
        style: simple
      - description: Owner UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: Owner UID
          maxLength: 32
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UIData'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user
      summary: Get UserOrg UI Data
      tags:
      - UIData
    put:
      description: "\nSets UI Data\n\n * Updates data, valid_to (if set), lastused\n\
        \ * Requires *uidata:Set*\n\n"
      operationId: UiDataSetUserOrgData
      parameters:
      - description: Key for the data
        explode: false
        in: path
        name: dataKey
        required: true
        schema:
          description: Key for the data
          maxLength: 32
          type: string
        style: simple
      - description: Org UID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Org UID
          maxLength: 32
          type: string
        style: simple
      - description: Source UID
        explode: false
        in: path
        name: sourceUID
        required: true
        schema:
          description: Source UID
          maxLength: 32
          type: string
        style: simple
      - description: Owner UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: Owner UID
          maxLength: 32
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UiDataSetUserOrgDataInput'
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user
      summary: Set UserOrg UI Data
      tags:
      - UIData
  /api/v1/user/{userUID}/uidata/:
    get:
      description: |2+

        Query UI Data

         * Requires *uidata:Query*

      operationId: UiDataQueryUserData
      parameters:
      - description: Key for the data
        explode: false
        in: path
        name: dataKey
        required: true
        schema:
          description: Key for the data
          maxLength: 32
          type: string
        style: simple
      - description: Org UID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Org UID
          maxLength: 32
          type: string
        style: simple
      - description: Src UID
        explode: false
        in: path
        name: sourceUID
        required: true
        schema:
          description: Src UID
          maxLength: 32
          type: string
        style: simple
      - description: Owner UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: Owner UID
          maxLength: 32
          type: string
        style: simple
      - description: Tags to search for
        explode: true
        in: query
        name: tags
        required: false
        schema:
          description: Tags to search for
          items:
            type: string
          maxItems: 5
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UIData'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user
      summary: Query User UI Data
      tags:
      - UIData
  /api/v1/user/{userUID}/uidata/{dataKey}:
    delete:
      description: |2+

        Sets UI Data

         * Requires *uidata:Delete*

      operationId: UiDataDeleteUserData
      parameters:
      - description: Key for the data
        explode: false
        in: path
        name: dataKey
        required: true
        schema:
          description: Key for the data
          maxLength: 32
          type: string
        style: simple
      - description: Org UID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Org UID
          maxLength: 32
          type: string
        style: simple
      - description: Src UID
        explode: false
        in: path
        name: sourceUID
        required: true
        schema:
          description: Src UID
          maxLength: 32
          type: string
        style: simple
      - description: Owner UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: Owner UID
          maxLength: 32
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user
      summary: Delete User UI Data
      tags:
      - UIData
    get:
      description: |2+

        Gets UI Data

         * Updates lastused
         * Requires *uidata:Get*

      operationId: UiDataGetUserData
      parameters:
      - description: Key for the data
        explode: false
        in: path
        name: dataKey
        required: true
        schema:
          description: Key for the data
          maxLength: 32
          type: string
        style: simple
      - description: Org UID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Org UID
          maxLength: 32
          type: string
        style: simple
      - description: Src UID
        explode: false
        in: path
        name: sourceUID
        required: true
        schema:
          description: Src UID
          maxLength: 32
          type: string
        style: simple
      - description: Owner UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: Owner UID
          maxLength: 32
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UIData'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user
      summary: Get User UI Data
      tags:
      - UIData
    put:
      description: "\nSets UI Data\n\n * Updates data, valid_to (if set), lastused\n\
        \ * Requires *uidata:Set*\n\n"
      operationId: UiDataSetUserData
      parameters:
      - description: Key for the data
        explode: false
        in: path
        name: dataKey
        required: true
        schema:
          description: Key for the data
          maxLength: 32
          type: string
        style: simple
      - description: Org UID
        explode: false
        in: path
        name: orgUID
        required: true
        schema:
          description: Org UID
          maxLength: 32
          type: string
        style: simple
      - description: Source UID
        explode: false
        in: path
        name: sourceUID
        required: true
        schema:
          description: Source UID
          maxLength: 32
          type: string
        style: simple
      - description: Owner UID
        explode: false
        in: path
        name: userUID
        required: true
        schema:
          description: Owner UID
          maxLength: 32
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UiDataSetUserDataInput'
      responses:
        "200":
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Invalid user
      summary: Set User UI Data
      tags:
      - UIData
components:
  schemas:
    APIKey:
      example:
        uid: uid
        jwt: jwt
        owner_uid: owner_uid
        last_used: 2000-01-23T04:56:07.000+00:00
        valid_to: 2000-01-23T04:56:07.000+00:00
        description: description
        valid_from: 2000-01-23T04:56:07.000+00:00
        enabled: true
      properties:
        description:
          description: User supplied description of the API key
          type: string
        enabled:
          description: Enables or disables the API key
          type: boolean
        jwt:
          description: JWT to use for authentication
          type: string
        last_used:
          description: The time of las use of the key; only updated every 5 minutes
          format: date-time
          type: string
        owner_uid:
          description: Owner UID
          type: string
        uid:
          description: APIKey UID
          type: string
        valid_from:
          description: Valid from is the creation date or first date when the API
            key became valid
          format: date-time
          type: string
        valid_to:
          description: Valid to is the expiration date or the last date this API key
            will be valid
          format: date-time
          type: string
      type: object
    Agent:
      example:
        agent_type: agent_type
        agent_registration_uid: agent_registration_uid
        org_uid: org_uid
        uid: uid
        runtime_details:
          src_uid: src_uid
          os_pretty_name: os_pretty_name
          request_ip: request_ip
          cloud_region: cloud_region
          uname: uname
          cpu_make: cpu_make
          ip_addresses:
          - ip_addresses
          - ip_addresses
          cpu_cores: 6
          agent_arch: agent_arch
          cloud_instance_id: cloud_instance_id
          agent_version: agent_version
          boot_time: 0.8008281904610115
          hostname: hostname
          cloud_type: cloud_type
          cloud_tags:
          - cloud_tags
          - cloud_tags
          cpu_model: cpu_model
          cloud_image_id: cloud_image_id
          os_name: os_name
          mac_addresses:
          - mac_addresses
          - mac_addresses
        runtime_description: runtime_description
        valid_to: 2000-01-23T04:56:07.000+00:00
        description: description
        valid_from: 2000-01-23T04:56:07.000+00:00
        resource_name: resource_name
        resource_policy:
          name: name
          statements:
          - condition: "{}"
            effect: effect
            resources:
            - resources
            - resources
            - resources
            - resources
            - resources
            actions:
            - actions
            - actions
            - actions
            - actions
            - actions
            sid: sid
          - condition: "{}"
            effect: effect
            resources:
            - resources
            - resources
            - resources
            - resources
            - resources
            actions:
            - actions
            - actions
            - actions
            - actions
            - actions
            sid: sid
          version: version
      properties:
        agent_registration_uid:
          description: Agent registration associated with the agent
          type: string
        agent_type:
          description: Agent type
          type: string
        description:
          description: Description of the the purpose of the agent
          type: string
        org_uid:
          description: Agent OrgUID
          type: string
        resource_name:
          description: Resource name used for RBAC
          type: string
        resource_policy:
          $ref: '#/components/schemas/ResourcePolicy'
        runtime_description:
          description: Description of the runtime of the agent
          type: string
        runtime_details:
          $ref: '#/components/schemas/Orc_apiRuntimeDetails'
        uid:
          description: Agent UID
          type: string
        valid_from:
          description: "Valid from date, the first date this object was valid"
          format: date-time
          type: string
        valid_to:
          description: "Valid to date, the date this object is valid to"
          format: date-time
          type: string
      type: object
    AgentRegistration:
      example:
        org_uid: org_uid
        uid: uid
        valid_to: 2000-01-23T04:56:07.000+00:00
        name: name
        description: description
        valid_from: 2000-01-23T04:56:07.000+00:00
        resource_name: resource_name
        config:
          classes:
          - name: name
            rbac_roles:
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
          - name: name
            rbac_roles:
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
          - name: name
            rbac_roles:
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
          - name: name
            rbac_roles:
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
          - name: name
            rbac_roles:
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
          name: name
          description: description
          source_tags:
          - source_tags
          - source_tags
          - source_tags
          - source_tags
          - source_tags
          type: type
        created_by: created_by
      properties:
        config:
          $ref: '#/components/schemas/DaoAgentConfig'
        created_by:
          description: The user UID of the user who created the agent registration
          type: string
        description:
          description: Description of the agent registration
          maxLength: 512
          type: string
        name:
          description: Name of the agent registration
          maxLength: 64
          type: string
        org_uid:
          description: The OrgUID the registration is associated with
          maxLength: 32
          type: string
        resource_name:
          description: Resource name used for RBAC
          type: string
        uid:
          description: Agent Registration UID
          maxLength: 64
          type: string
        valid_from:
          description: "Valid from date, the first date this object was valid"
          format: date-time
          type: string
        valid_to:
          description: "Valid to date, the date this object is valid to"
          format: date-time
          type: string
      type: object
    AgentRegistrationCreateInput:
      example:
        ? ""
        : ""
        valid_to: 2000-01-23T04:56:07.000+00:00
        name: name
        description: description
        valid_from: 2000-01-23T04:56:07.000+00:00
        resource_name: resource_name
        config:
          classes:
          - name: name
            rbac_roles:
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
          - name: name
            rbac_roles:
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
          - name: name
            rbac_roles:
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
          - name: name
            rbac_roles:
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
          - name: name
            rbac_roles:
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
          name: name
          description: description
          source_tags:
          - source_tags
          - source_tags
          - source_tags
          - source_tags
          - source_tags
          type: type
        created_by: created_by
      properties:
        ? ""
        : description: The agent secret used to authenticate agents
          type: string
        config:
          $ref: '#/components/schemas/DaoAgentConfig'
        created_by:
          description: The user UID of the user who created the agent registration
          type: string
        description:
          description: Description of the agent registration
          maxLength: 512
          type: string
        name:
          description: Name of the agent registration
          maxLength: 64
          type: string
        resource_name:
          description: Resource name used for RBAC
          type: string
        valid_from:
          description: "Valid from date, the first date this object was valid"
          format: date-time
          type: string
        valid_to:
          description: "Valid to date, the date this object is valid to"
          format: date-time
          type: string
      type: object
    AgentRegistrationUpdateInput:
      example:
        ? ""
        : ""
        valid_to: 2000-01-23T04:56:07.000+00:00
        name: name
        description: description
        valid_from: 2000-01-23T04:56:07.000+00:00
        resource_name: resource_name
        config:
          classes:
          - name: name
            rbac_roles:
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
          - name: name
            rbac_roles:
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
          - name: name
            rbac_roles:
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
          - name: name
            rbac_roles:
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
          - name: name
            rbac_roles:
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
            - rbac_roles
          name: name
          description: description
          source_tags:
          - source_tags
          - source_tags
          - source_tags
          - source_tags
          - source_tags
          type: type
        created_by: created_by
      properties:
        ? ""
        : description: The agent secret used to authenticate agents
          type: string
        config:
          $ref: '#/components/schemas/DaoAgentConfig'
        created_by:
          description: The user UID of the user who created the agent registration
          type: string
        description:
          description: Description of the agent registration
          maxLength: 512
          type: string
        name:
          description: Name of the agent registration
          maxLength: 64
          type: string
        resource_name:
          description: Resource name used for RBAC
          type: string
        valid_from:
          description: "Valid from date, the first date this object was valid"
          format: date-time
          type: string
        valid_to:
          description: "Valid to date, the date this object is valid to"
          format: date-time
          type: string
      type: object
    AgentSetAgentWorkInput:
      example:
        work:
          work:
          - uid: uid
            start_order: 0
            arguments:
            - arguments
            - arguments
            - arguments
            - arguments
            - arguments
            parameters:
              key: ""
            version:
              key: ""
            bat_uid: bat_uid
            enabled: true
          - uid: uid
            start_order: 0
            arguments:
            - arguments
            - arguments
            - arguments
            - arguments
            - arguments
            parameters:
              key: ""
            version:
              key: ""
            bat_uid: bat_uid
            enabled: true
          - uid: uid
            start_order: 0
            arguments:
            - arguments
            - arguments
            - arguments
            - arguments
            - arguments
            parameters:
              key: ""
            version:
              key: ""
            bat_uid: bat_uid
            enabled: true
          - uid: uid
            start_order: 0
            arguments:
            - arguments
            - arguments
            - arguments
            - arguments
            - arguments
            parameters:
              key: ""
            version:
              key: ""
            bat_uid: bat_uid
            enabled: true
          - uid: uid
            start_order: 0
            arguments:
            - arguments
            - arguments
            - arguments
            - arguments
            - arguments
            parameters:
              key: ""
            version:
              key: ""
            bat_uid: bat_uid
            enabled: true
        tags:
        - tags
        - tags
      properties:
        tags:
          description: User defined tags
          items:
            type: string
          type: array
        work:
          $ref: '#/components/schemas/Orc_apiAgentWork'
      type: object
    AgentSetOrgWorkInput:
      example:
        work:
          work:
          - uid: uid
            start_order: 0
            arguments:
            - arguments
            - arguments
            - arguments
            - arguments
            - arguments
            parameters:
              key: ""
            version:
              key: ""
            bat_uid: bat_uid
            enabled: true
          - uid: uid
            start_order: 0
            arguments:
            - arguments
            - arguments
            - arguments
            - arguments
            - arguments
            parameters:
              key: ""
            version:
              key: ""
            bat_uid: bat_uid
            enabled: true
          - uid: uid
            start_order: 0
            arguments:
            - arguments
            - arguments
            - arguments
            - arguments
            - arguments
            parameters:
              key: ""
            version:
              key: ""
            bat_uid: bat_uid
            enabled: true
          - uid: uid
            start_order: 0
            arguments:
            - arguments
            - arguments
            - arguments
            - arguments
            - arguments
            parameters:
              key: ""
            version:
              key: ""
            bat_uid: bat_uid
            enabled: true
          - uid: uid
            start_order: 0
            arguments:
            - arguments
            - arguments
            - arguments
            - arguments
            - arguments
            parameters:
              key: ""
            version:
              key: ""
            bat_uid: bat_uid
            enabled: true
        tags:
        - tags
        - tags
      properties:
        tags:
          description: User defined tags
          items:
            type: string
          type: array
        work:
          $ref: '#/components/schemas/Orc_apiAgentWork'
      type: object
    ApiAgentCreateHandlerOutput:
      example:
        uid: uid
      properties:
        uid:
          type: string
      type: object
    ApiAgentRegistrationDownloadLinkHandlerOutput:
      example:
        url: url
      properties:
        url:
          type: string
      type: object
    ApiAgentWorkOutput:
      example:
        work:
          work:
          - uid: uid
            start_order: 0
            arguments:
            - arguments
            - arguments
            - arguments
            - arguments
            - arguments
            parameters:
              key: ""
            version:
              key: ""
            bat_uid: bat_uid
            enabled: true
          - uid: uid
            start_order: 0
            arguments:
            - arguments
            - arguments
            - arguments
            - arguments
            - arguments
            parameters:
              key: ""
            version:
              key: ""
            bat_uid: bat_uid
            enabled: true
          - uid: uid
            start_order: 0
            arguments:
            - arguments
            - arguments
            - arguments
            - arguments
            - arguments
            parameters:
              key: ""
            version:
              key: ""
            bat_uid: bat_uid
            enabled: true
          - uid: uid
            start_order: 0
            arguments:
            - arguments
            - arguments
            - arguments
            - arguments
            - arguments
            parameters:
              key: ""
            version:
              key: ""
            bat_uid: bat_uid
            enabled: true
          - uid: uid
            start_order: 0
            arguments:
            - arguments
            - arguments
            - arguments
            - arguments
            - arguments
            parameters:
              key: ""
            version:
              key: ""
            bat_uid: bat_uid
            enabled: true
        tags:
        - tags
        - tags
      properties:
        tags:
          description: User defined tags
          items:
            type: string
          type: array
        work:
          $ref: '#/components/schemas/Orc_apiAgentWork'
      type: object
    ApiInvestigationCreateOutput:
      example:
        uid: uid
      properties:
        uid:
          type: string
      type: object
    ApiKeyCreateInput:
      example:
        valid_to: 2000-01-23T04:56:07.000+00:00
        description: description
      properties:
        description:
          description: Description of the API key
          maxLength: 128
          type: string
        valid_to:
          description: "When the key should expire, in a RFC3339 formated string"
          format: date-time
          type: string
      required:
      - valid_to
      type: object
    ApiKeyUpdateInput:
      example:
        description: description
        enabled: true
      properties:
        description:
          description: Description of the API key
          maxLength: 128
          type: string
        enabled:
          description: Is the key enabled or not
          type: boolean
      type: object
    ApiRBACActions:
      example:
        actions:
        - can_perform: true
          action: action
          error: error
          resource_name: resource_name
        - can_perform: true
          action: action
          error: error
          resource_name: resource_name
        - can_perform: true
          action: action
          error: error
          resource_name: resource_name
        - can_perform: true
          action: action
          error: error
          resource_name: resource_name
        - can_perform: true
          action: action
          error: error
          resource_name: resource_name
      properties:
        actions:
          items:
            $ref: '#/components/schemas/RBACAction'
          maxItems: 25
          type: array
      type: object
    ApiSOARListHandlerOutput:
      example:
        source:
          org_uid: org_uid
          runtime_details:
            src_uid: src_uid
            os_pretty_name: os_pretty_name
            request_ip: request_ip
            cloud_region: cloud_region
            uname: uname
            cpu_make: cpu_make
            ip_addresses:
            - ip_addresses
            - ip_addresses
            cpu_cores: 6
            agent_arch: agent_arch
            cloud_instance_id: cloud_instance_id
            agent_version: agent_version
            boot_time: 0.8008281904610115
            hostname: hostname
            cloud_type: cloud_type
            cloud_tags:
            - cloud_tags
            - cloud_tags
            cpu_model: cpu_model
            cloud_image_id: cloud_image_id
            os_name: os_name
            mac_addresses:
            - mac_addresses
            - mac_addresses
          description: description
          valid_from: 2000-01-23T04:56:07.000+00:00
          last_data: 2000-01-23T04:56:07.000+00:00
          last_stored_chunk_end_time: 2000-01-23T04:56:07.000+00:00
          type: type
          tags:
          - tags
          - tags
          - tags
          - tags
          - tags
          last_ingest_chunk_end_time: 2000-01-23T04:56:07.000+00:00
          uid: uid
          runtime_description: runtime_description
          valid_to: 2000-01-23T04:56:07.000+00:00
          name: name
          resource_name: resource_name
          resource_policy:
            name: name
            statements:
            - condition: "{}"
              effect: effect
              resources:
              - resources
              - resources
              - resources
              - resources
              - resources
              actions:
              - actions
              - actions
              - actions
              - actions
              - actions
              sid: sid
            - condition: "{}"
              effect: effect
              resources:
              - resources
              - resources
              - resources
              - resources
              - resources
              actions:
              - actions
              - actions
              - actions
              - actions
              - actions
              sid: sid
            version: version
        investigate_source_url: investigate_source_url
      properties:
        investigate_source_url:
          type: string
        source:
          $ref: '#/components/schemas/Source'
      type: object
    ApiSourceCreateHandlerOutput:
      example:
        uid: uid
      properties:
        uid:
          type: string
      type: object
    CanUserPerformInput:
      example:
        actions:
        - can_perform: true
          action: action
          error: error
          resource_name: resource_name
        - can_perform: true
          action: action
          error: error
          resource_name: resource_name
        - can_perform: true
          action: action
          error: error
          resource_name: resource_name
        - can_perform: true
          action: action
          error: error
          resource_name: resource_name
        - can_perform: true
          action: action
          error: error
          resource_name: resource_name
      properties:
        actions:
          items:
            $ref: '#/components/schemas/RBACAction'
          maxItems: 25
          type: array
      type: object
    DaoAgentClass:
      example:
        name: name
        rbac_roles:
        - rbac_roles
        - rbac_roles
        - rbac_roles
        - rbac_roles
        - rbac_roles
      properties:
        name:
          maxLength: 64
          type: string
        rbac_roles:
          items:
            type: string
          maxItems: 10
          type: array
      required:
      - name
      type: object
    DaoAgentConfig:
      description: Initial configuration to use when creating an agent
      example:
        classes:
        - name: name
          rbac_roles:
          - rbac_roles
          - rbac_roles
          - rbac_roles
          - rbac_roles
          - rbac_roles
        - name: name
          rbac_roles:
          - rbac_roles
          - rbac_roles
          - rbac_roles
          - rbac_roles
          - rbac_roles
        - name: name
          rbac_roles:
          - rbac_roles
          - rbac_roles
          - rbac_roles
          - rbac_roles
          - rbac_roles
        - name: name
          rbac_roles:
          - rbac_roles
          - rbac_roles
          - rbac_roles
          - rbac_roles
          - rbac_roles
        - name: name
          rbac_roles:
          - rbac_roles
          - rbac_roles
          - rbac_roles
          - rbac_roles
          - rbac_roles
        name: name
        description: description
        source_tags:
        - source_tags
        - source_tags
        - source_tags
        - source_tags
        - source_tags
        type: type
      properties:
        classes:
          description: Agent classes
          items:
            $ref: '#/components/schemas/DaoAgentClass'
          maxItems: 10
          minItems: 1
          type: array
        description:
          description: Description of the agent config
          maxLength: 512
          type: string
        name:
          description: Name of the agent config
          maxLength: 32
          type: string
        source_tags:
          description: Tags to be applied to a source upon agent registration
          items:
            type: string
          maxItems: 10
          type: array
        type:
          description: Type of agent config
          maxLength: 20
          type: string
      required:
      - classes
      type: object
    DaoAgentLog:
      example:
        msg: msg
        agent_registration_uid: agent_registration_uid
        org_uid: org_uid
        runtime_details:
          src_uid: src_uid
          os_pretty_name: os_pretty_name
          request_ip: request_ip
          cloud_region: cloud_region
          uname: uname
          cpu_make: cpu_make
          ip_addresses:
          - ip_addresses
          - ip_addresses
          cpu_cores: 6
          agent_arch: agent_arch
          cloud_instance_id: cloud_instance_id
          agent_version: agent_version
          boot_time: 0.8008281904610115
          hostname: hostname
          cloud_type: cloud_type
          cloud_tags:
          - cloud_tags
          - cloud_tags
          cpu_model: cpu_model
          cloud_image_id: cloud_image_id
          os_name: os_name
          mac_addresses:
          - mac_addresses
          - mac_addresses
        agent_uid: agent_uid
        err_uid: err_uid
        source_uid: source_uid
        ip_address: ip_address
        time: 6.027456183070403
        error: error
        type: type
        bytes_sent: 0
      properties:
        agent_registration_uid:
          type: string
        agent_uid:
          type: string
        bytes_sent:
          format: int32
          type: integer
        err_uid:
          type: string
        error:
          type: string
        ip_address:
          type: string
        msg:
          type: string
        org_uid:
          type: string
        runtime_details:
          $ref: '#/components/schemas/Orc_apiRuntimeDetails'
        source_uid:
          type: string
        time:
          format: double
          type: number
        type:
          type: string
      type: object
    DaoAuthPolicy:
      description: Authentication policy
      type: object
    DaoInvestigation:
      example:
        modified_on: 2000-01-23T04:56:07.000+00:00
        org_uid: org_uid
        data:
          key: ""
        valid_from: 2000-01-23T04:56:07.000+00:00
        created_by: created_by
        version: 0
        tags:
        - tags
        - tags
        - tags
        - tags
        - tags
        uid: uid
        valid_to: 2000-01-23T04:56:07.000+00:00
        modified_by: modified_by
        name: name
        resource_name: resource_name
        resource_policy:
          name: name
          statements:
          - condition: "{}"
            effect: effect
            resources:
            - resources
            - resources
            - resources
            - resources
            - resources
            actions:
            - actions
            - actions
            - actions
            - actions
            - actions
            sid: sid
          - condition: "{}"
            effect: effect
            resources:
            - resources
            - resources
            - resources
            - resources
            - resources
            actions:
            - actions
            - actions
            - actions
            - actions
            - actions
            sid: sid
          version: version
      properties:
        created_by:
          description: UID of user who created the investigation
          type: string
        data:
          additionalProperties: {}
          description: JSON Object associated with the investigation
          type: object
        modified_by:
          description: UID of the user who last modified the investigation
          type: string
        modified_on:
          description: Date the investigation was last modified
          format: date-time
          type: string
        name:
          description: Name of the investigation
          type: string
        org_uid:
          description: Investigation OrgUID
          type: string
        resource_name:
          description: Resource name used for RBAC
          type: string
        resource_policy:
          $ref: '#/components/schemas/ResourcePolicy'
        tags:
          description: User supplied tags
          items:
            type: string
          maxItems: 20
          type: array
        uid:
          description: Investigation UID
          type: string
        valid_from:
          description: "Valid from date, the first date this object was valid"
          format: date-time
          type: string
        valid_to:
          description: "Valid to date, the date this object is valid to"
          format: date-time
          type: string
        version:
          description: Version of the investigation
          format: int32
          type: integer
      type: object
    DaoOrgRoleResponse:
      example:
        org_uid: org_uid
        user_email: user_email
        role_uid: role_uid
        org_name: org_name
        user_uid: user_uid
      properties:
        org_name:
          description: The organization name the user has the assigned role on
          type: string
        org_uid:
          description: The organization UID the user has the assigned role on
          type: string
        role_uid:
          description: The role the user is assigned
          type: string
        user_email:
          description: The email address associated with the user
          type: string
        user_uid:
          description: The user uid for the user
          type: string
      type: object
    DaoOrgRoles:
      properties:
        default_roles:
          description: Default roles for the user
          items:
            type: string
          maxItems: 32
          minItems: 1
          type: array
        org_uid:
          description: Org UID
          maxLength: 32
          type: string
      type: object
    DaoOrgType:
      example:
        org_uid: org_uid
        uid: uid
        description: description
        policy:
          max_active_sources: 0
          processing_stack: processing_stack
          max_org_roles: 6
          retention_period: 1
      properties:
        description:
          description: Type of organization
          type: string
        org_uid:
          type: string
        policy:
          $ref: '#/components/schemas/DaoOrgTypePolicy'
        uid:
          type: string
      type: object
    DaoOrgTypePolicy:
      description: Policy for the org
      example:
        max_active_sources: 0
        processing_stack: processing_stack
        max_org_roles: 6
        retention_period: 1
      properties:
        max_active_sources:
          description: Maximum number of active sources
          format: int32
          type: integer
        max_org_roles:
          description: Maximum number of associated organizational roles
          format: int32
          type: integer
        processing_stack:
          description: Name of the processing stack
          type: string
        retention_period:
          description: "Retention period for stored data, in days"
          format: int32
          type: integer
      type: object
    DaoPlan:
      description: Plan
      properties:
        policies:
          description: Policies for the plan
          items:
            $ref: '#/components/schemas/DaoPolicy'
          type: array
      type: object
    DaoPolicy:
      properties:
        allowed_providers:
          description: Allowed providers (use direct for direct sign-in)
          items:
            type: string
          maxItems: 32
          minItems: 1
          type: array
        auth_policy:
          description: Authentication policy
          type: object
        comment:
          description: comment
          maxLength: 4096
          type: string
        email_regex:
          description: Regular expression for email addresses
          maxLength: 128
          minLength: 3
          type: string
        signup_policy:
          $ref: '#/components/schemas/DaoSignupPolicy'
      required:
      - allowed_providers
      - email_regex
      - signup_policy
      type: object
    DaoSignupPolicy:
      description: Signup policy
      properties:
        create_personal_org:
          description: Create a personal org for the user
          type: boolean
        default_org_roles:
          description: Default org roles for new orgs
          items:
            $ref: '#/components/schemas/DaoOrgRoles'
          maxItems: 32
          type: array
        requires_approval:
          description: Require admin approval for new orgs
          type: boolean
      type: object
    DashboardSearch:
      example:
        org_uid: org_uid
        uid: uid
        search: search
        data:
          key: ""
        notify_frequency: 0
        description: description
        notify: true
        tags:
        - tags
        - tags
        - tags
        - tags
        - tags
      properties:
        data:
          additionalProperties: {}
          description: UI supplied JSON object
          type: object
        description:
          description: Description of query (max 64 chars)
          maxLength: 64
          type: string
        notify:
          description: Are notifications generated from this search
          type: boolean
        notify_frequency:
          description: "Frequency of notification in seconds. One of 300, 3600, or\
            \ 86400."
          format: int32
          type: integer
        org_uid:
          description: Org UID
          maxLength: 32
          type: string
        search:
          description: Search query to run
          maxLength: 65536
          minLength: 1
          type: string
        tags:
          description: User supplied tags
          items:
            type: string
          maxItems: 64
          type: array
        uid:
          description: UID for the DashboardSearch
          type: string
      type: object
    DashboardSearchCreateInput:
      example:
        ? ""
        : 2000-01-23T04:56:07.000+00:00
        search: search
        data:
          key: ""
        notify_frequency: 0
        description: description
        notify: true
        tags:
        - tags
        - tags
        - tags
        - tags
        - tags
      properties:
        ? ""
        : description: Time last notification window was completed
          format: date-time
          type: string
        data:
          additionalProperties: {}
          description: UI supplied JSON object
          type: object
        description:
          description: Description of query (max 64 chars)
          maxLength: 64
          type: string
        notify:
          description: Are notifications generated from this search
          type: boolean
        notify_frequency:
          description: "Frequency of notification in seconds. One of 300, 3600, or\
            \ 86400."
          format: int32
          type: integer
        search:
          description: Search query to run
          maxLength: 65536
          minLength: 1
          type: string
        tags:
          description: User supplied tags
          items:
            type: string
          maxItems: 64
          type: array
      type: object
    DashboardSearchUpdateInput:
      example:
        ? ""
        : 2000-01-23T04:56:07.000+00:00
        search: search
        data:
          key: ""
        notify_frequency: 0
        description: description
        notify: true
        tags:
        - tags
        - tags
        - tags
        - tags
        - tags
      properties:
        ? ""
        : description: Time last notification window was completed
          format: date-time
          type: string
        data:
          additionalProperties: {}
          description: UI supplied JSON object
          type: object
        description:
          description: Description of query (max 64 chars)
          maxLength: 64
          type: string
        notify:
          description: Are notifications generated from this search
          type: boolean
        notify_frequency:
          description: "Frequency of notification in seconds. One of 300, 3600, or\
            \ 86400."
          format: int32
          type: integer
        search:
          description: Search query to run
          maxLength: 65536
          minLength: 1
          type: string
        tags:
          description: User supplied tags
          items:
            type: string
          maxItems: 64
          type: array
      type: object
    ElasticRecordField:
      properties:
        dynamic:
          type: boolean
        fields:
          additionalProperties:
            $ref: '#/components/schemas/ElasticRecordField'
          type: object
        index:
          type: boolean
        properties:
          additionalProperties:
            $ref: '#/components/schemas/ElasticRecordField'
          description: The properties associated with this field
          type: object
        store:
          type: boolean
        type:
          description: "The type used for indexing, keyword=matches entire seaerch\
            \ term, text=partial match, ip=ip address, float=number"
          type: string
      type: object
    ElasticRecordSchema:
      properties:
        dynamic:
          type: boolean
        properties:
          additionalProperties:
            $ref: '#/components/schemas/ElasticRecordField'
          description: List of properties and how they are stored
          type: object
      type: object
    Expr:
      description: Data which matches this expression are returned
      example:
        schema: schema
        or:
        - null
        - null
        in:
        - ""
        - ""
        - ""
        - ""
        - ""
        has_suffix: has_suffix
        not: null
        contains_str: contains_str
        time_range:
          start_time: 1.4658129805029452
          end_time: 6.027456183070403
        and:
        - null
        - null
        greater_than: ""
        equals: ""
        less_than: ""
        has_prefix: has_prefix
        property: property
        exists: true
        re_match: re_match
      properties:
        and:
          description: returns true if all of the contained expressions are true
          items:
            $ref: '#/components/schemas/Expr'
          type: array
        contains_str:
          description: returns true if the property is a string and contains the specified
            value
          maxLength: 64
          type: string
        equals:
          description: returns true if the property matches the supplied value
          nullable: true
        exists:
          description: returns true if the property exists
          type: boolean
        greater_than:
          description: returns true if the property is a number and is greater than
            this value
          nullable: true
        has_prefix:
          description: returns true if the property is a string and has the specified
            prefix
          maxLength: 64
          type: string
        has_suffix:
          description: returns true if the property is a string and has the specified
            suffix
          maxLength: 64
          type: string
        in:
          description: returns true if the property matches any of the values specified
          items: {}
          maxItems: 100
          type: array
        less_than:
          description: returns true if te property is a number and is less than this
            value
          nullable: true
        not:
          $ref: '#/components/schemas/Expr'
        or:
          description: returns true if any of the contained expressions are true
          items:
            $ref: '#/components/schemas/Expr'
          type: array
        property:
          description: "property to match against, in dotted property notation"
          maxLength: 64
          type: string
        re_match:
          description: returns true if the property is a string and matches the specified
            regex
          maxLength: 128
          type: string
        schema:
          description: matches only records with the specified schema
          maxLength: 32
          type: string
        time_range:
          $ref: '#/components/schemas/RstreamTimeRange'
      type: object
    Gv1Rule:
      type: object
    InvestigationCreateInput:
      example:
        modified_on: 2000-01-23T04:56:07.000+00:00
        data:
          key: ""
        valid_to: 2000-01-23T04:56:07.000+00:00
        modified_by: modified_by
        name: name
        valid_from: 2000-01-23T04:56:07.000+00:00
        resource_name: resource_name
        created_by: created_by
        version: 0
        resource_policy:
          name: name
          statements:
          - condition: "{}"
            effect: effect
            resources:
            - resources
            - resources
            - resources
            - resources
            - resources
            actions:
            - actions
            - actions
            - actions
            - actions
            - actions
            sid: sid
          - condition: "{}"
            effect: effect
            resources:
            - resources
            - resources
            - resources
            - resources
            - resources
            actions:
            - actions
            - actions
            - actions
            - actions
            - actions
            sid: sid
          version: version
        tags:
        - tags
        - tags
        - tags
        - tags
        - tags
      properties:
        created_by:
          description: UID of user who created the investigation
          type: string
        data:
          additionalProperties: {}
          description: JSON Object associated with the investigation
          type: object
        modified_by:
          description: UID of the user who last modified the investigation
          type: string
        modified_on:
          description: Date the investigation was last modified
          format: date-time
          type: string
        name:
          description: Name of the investigation
          type: string
        resource_name:
          description: Resource name used for RBAC
          type: string
        resource_policy:
          $ref: '#/components/schemas/ResourcePolicy'
        tags:
          description: User supplied tags
          items:
            type: string
          maxItems: 20
          type: array
        valid_from:
          description: "Valid from date, the first date this object was valid"
          format: date-time
          type: string
        valid_to:
          description: "Valid to date, the date this object is valid to"
          format: date-time
          type: string
        version:
          description: Version of the investigation
          format: int32
          type: integer
      type: object
    InvestigationUpdateInput:
      example:
        modified_on: 2000-01-23T04:56:07.000+00:00
        data:
          key: ""
        valid_to: 2000-01-23T04:56:07.000+00:00
        modified_by: modified_by
        name: name
        valid_from: 2000-01-23T04:56:07.000+00:00
        resource_name: resource_name
        created_by: created_by
        version: 0
        resource_policy:
          name: name
          statements:
          - condition: "{}"
            effect: effect
            resources:
            - resources
            - resources
            - resources
            - resources
            - resources
            actions:
            - actions
            - actions
            - actions
            - actions
            - actions
            sid: sid
          - condition: "{}"
            effect: effect
            resources:
            - resources
            - resources
            - resources
            - resources
            - resources
            actions:
            - actions
            - actions
            - actions
            - actions
            - actions
            sid: sid
          version: version
        tags:
        - tags
        - tags
        - tags
        - tags
        - tags
      properties:
        created_by:
          description: UID of user who created the investigation
          type: string
        data:
          additionalProperties: {}
          description: JSON Object associated with the investigation
          type: object
        modified_by:
          description: UID of the user who last modified the investigation
          type: string
        modified_on:
          description: Date the investigation was last modified
          format: date-time
          type: string
        name:
          description: Name of the investigation
          type: string
        resource_name:
          description: Resource name used for RBAC
          type: string
        resource_policy:
          $ref: '#/components/schemas/ResourcePolicy'
        tags:
          description: User supplied tags
          items:
            type: string
          maxItems: 20
          type: array
        valid_from:
          description: "Valid from date, the first date this object was valid"
          format: date-time
          type: string
        valid_to:
          description: "Valid to date, the date this object is valid to"
          format: date-time
          type: string
        version:
          description: Version of the investigation
          format: int32
          type: integer
      type: object
    MetricsDataQueryInput:
      example:
        src_uid: src_uid
        org_uid: org_uid
        query_size: 5637
        context_uid: context_uid
        query: query
        return_rptrs: true
        end_time: 0.8008281904610115
        rptrs:
        - rptrs
        - rptrs
        sort_col: sort_col
        start_time: 2.3021358869347655
        query_from: 5
        data_type: data_type
        ids:
        - ids
        - ids
        - ids
        - ids
        - ids
        causal:
          pre:
          - null
          - null
          post:
          - null
          - null
          peer:
          - null
          - null
        expr:
          schema: schema
          or:
          - null
          - null
          in:
          - ""
          - ""
          - ""
          - ""
          - ""
          has_suffix: has_suffix
          not: null
          contains_str: contains_str
          time_range:
            start_time: 1.4658129805029452
            end_time: 6.027456183070403
          and:
          - null
          - null
          greater_than: ""
          equals: ""
          less_than: ""
          has_prefix: has_prefix
          property: property
          exists: true
          re_match: re_match
        projection:
        - projection
        - projection
        sort_order: sort_order
        aggs:
          key: ""
      properties:
        aggs:
          additionalProperties: {}
          description: Aggregations
          type: object
        causal:
          $ref: '#/components/schemas/RstoreCausalQuery'
        context_uid:
          description: "Context UID for this query, it's used to track the query as\
            \ it flows through the system, and shouldn't be exposed to customers"
          type: string
        data_type:
          description: DataType to query
          maxLength: 24
          type: string
        end_time:
          description: "Time in unix epoch time, records < time are returned"
          format: double
          type: number
        expr:
          $ref: '#/components/schemas/Expr'
        ids:
          description: Array of IDs to resolve into records
          items:
            type: string
          maxItems: 512
          type: array
        org_uid:
          description: Organization UID to query
          maxLength: 64
          type: string
        projection:
          description: "Array of top level object properties which will be emitted,\
            \ if none are specified all will be emitted"
          items:
            type: string
          type: array
        query:
          description: Lucene based search query
          maxLength: 1024
          type: string
        query_from:
          description: Where to start the query in the result set from
          format: int32
          type: integer
        query_size:
          description: Size of the query result set
          format: int32
          maximum: 10000
          type: integer
        return_rptrs:
          type: boolean
        rptrs:
          items:
            type: string
          type: array
        sort_col:
          description: Sort column
          maxLength: 20
          type: string
        sort_order:
          description: Sort order
          maxLength: 6
          type: string
        src_uid:
          description: Source UID to query
          maxLength: 64
          type: string
        start_time:
          description: "Time in unix epoch time, records >= time are returned"
          format: double
          type: number
      required:
      - data_type
      - org_uid
      type: object
    NDJSONStream:
      description: A line-separated list of json objects
      format: ndjson
      type: string
    NotificationPolicy:
      description: A notification policy in json or hjson
      example:
        routes:
        - data: ""
          destination:
            org_uid: org_uid
            webhook:
              no_tls_validation: true
              url: http://example.com/aeiou
            data: ""
            slack:
              url: http://example.com/aeiou
            description: description
            email:
            - email
            - email
            users:
            - users
            - users
          description: description
          expr:
            schema: schema
            or:
            - null
            - null
            in:
            - ""
            - ""
            - ""
            - ""
            - ""
            has_suffix: has_suffix
            not: null
            contains_str: contains_str
            time_range:
              start_time: 1.4658129805029452
              end_time: 6.027456183070403
            and:
            - null
            - null
            greater_than: ""
            equals: ""
            less_than: ""
            has_prefix: has_prefix
            property: property
            exists: true
            re_match: re_match
          target: target
        - data: ""
          destination:
            org_uid: org_uid
            webhook:
              no_tls_validation: true
              url: http://example.com/aeiou
            data: ""
            slack:
              url: http://example.com/aeiou
            description: description
            email:
            - email
            - email
            users:
            - users
            - users
          description: description
          expr:
            schema: schema
            or:
            - null
            - null
            in:
            - ""
            - ""
            - ""
            - ""
            - ""
            has_suffix: has_suffix
            not: null
            contains_str: contains_str
            time_range:
              start_time: 1.4658129805029452
              end_time: 6.027456183070403
            and:
            - null
            - null
            greater_than: ""
            equals: ""
            less_than: ""
            has_prefix: has_prefix
            property: property
            exists: true
            re_match: re_match
          target: target
        targets:
          key:
            org_uid: org_uid
            webhook:
              no_tls_validation: true
              url: http://example.com/aeiou
            data: ""
            slack:
              url: http://example.com/aeiou
            description: description
            email:
            - email
            - email
            users:
            - users
            - users
      properties:
        routes:
          items:
            $ref: '#/components/schemas/NotificationPolicy_routes_inner'
          type: array
        targets:
          additionalProperties:
            $ref: '#/components/schemas/NotificationPolicyDestination'
          type: object
      type: object
    NotificationPolicyDestination:
      description: "A notification policy destination, containing one and only one\
        \ of the available types"
      example:
        org_uid: org_uid
        webhook:
          no_tls_validation: true
          url: http://example.com/aeiou
        data: ""
        slack:
          url: http://example.com/aeiou
        description: description
        email:
        - email
        - email
        users:
        - users
        - users
      maxProperties: 3
      minProperties: 1
      properties:
        data:
          description: UI-supplied data
        description:
          type: string
        email:
          items:
            format: email
            type: string
          type: array
        org_uid:
          type: string
        slack:
          $ref: '#/components/schemas/NotificationPolicyDestination_slack'
        users:
          items:
            type: string
          type: array
        webhook:
          $ref: '#/components/schemas/NotificationPolicyDestination_webhook'
      type: object
    Orc_apiAgentWork:
      description: "Agent work, which is sent to the agents"
      example:
        work:
        - uid: uid
          start_order: 0
          arguments:
          - arguments
          - arguments
          - arguments
          - arguments
          - arguments
          parameters:
            key: ""
          version:
            key: ""
          bat_uid: bat_uid
          enabled: true
        - uid: uid
          start_order: 0
          arguments:
          - arguments
          - arguments
          - arguments
          - arguments
          - arguments
          parameters:
            key: ""
          version:
            key: ""
          bat_uid: bat_uid
          enabled: true
        - uid: uid
          start_order: 0
          arguments:
          - arguments
          - arguments
          - arguments
          - arguments
          - arguments
          parameters:
            key: ""
          version:
            key: ""
          bat_uid: bat_uid
          enabled: true
        - uid: uid
          start_order: 0
          arguments:
          - arguments
          - arguments
          - arguments
          - arguments
          - arguments
          parameters:
            key: ""
          version:
            key: ""
          bat_uid: bat_uid
          enabled: true
        - uid: uid
          start_order: 0
          arguments:
          - arguments
          - arguments
          - arguments
          - arguments
          - arguments
          parameters:
            key: ""
          version:
            key: ""
          bat_uid: bat_uid
          enabled: true
      properties:
        work:
          description: Array of bats to execute
          items:
            $ref: '#/components/schemas/Orc_apiBatWork'
          maxItems: 32
          type: array
      type: object
    Orc_apiBatWork:
      example:
        uid: uid
        start_order: 0
        arguments:
        - arguments
        - arguments
        - arguments
        - arguments
        - arguments
        parameters:
          key: ""
        version:
          key: ""
        bat_uid: bat_uid
        enabled: true
      properties:
        arguments:
          description: arguments to pass to the commandline
          items:
            type: string
          maxItems: 64
          type: array
        bat_uid:
          description: "ID of this specific type of bat, specified by Spyderbat"
          maxLength: 32
          type: string
        enabled:
          description: Execute this bat or not?
          type: boolean
        parameters:
          additionalProperties: {}
          description: input parameters to the bat
          type: object
        start_order:
          description: Order in which to start this bat
          format: int32
          type: integer
        uid:
          description: uid of the specific bat work for a specific agent
          maxLength: 32
          type: string
        version:
          additionalProperties: {}
          description: Newest version of the bat from the repository
          type: object
      type: object
    Orc_apiRuntimeDetails:
      description: Runtime details
      example:
        src_uid: src_uid
        os_pretty_name: os_pretty_name
        request_ip: request_ip
        cloud_region: cloud_region
        uname: uname
        cpu_make: cpu_make
        ip_addresses:
        - ip_addresses
        - ip_addresses
        cpu_cores: 6
        agent_arch: agent_arch
        cloud_instance_id: cloud_instance_id
        agent_version: agent_version
        boot_time: 0.8008281904610115
        hostname: hostname
        cloud_type: cloud_type
        cloud_tags:
        - cloud_tags
        - cloud_tags
        cpu_model: cpu_model
        cloud_image_id: cloud_image_id
        os_name: os_name
        mac_addresses:
        - mac_addresses
        - mac_addresses
      properties:
        agent_arch:
          type: string
        agent_version:
          type: string
        boot_time:
          format: double
          type: number
        cloud_image_id:
          type: string
        cloud_instance_id:
          type: string
        cloud_region:
          type: string
        cloud_tags:
          items:
            type: string
          type: array
        cloud_type:
          type: string
        cpu_cores:
          format: int32
          type: integer
        cpu_make:
          type: string
        cpu_model:
          type: string
        hostname:
          type: string
        ip_addresses:
          items:
            type: string
          type: array
        mac_addresses:
          items:
            type: string
          type: array
        os_name:
          type: string
        os_pretty_name:
          type: string
        request_ip:
          type: string
        src_uid:
          type: string
        uname:
          type: string
      type: object
    Org:
      example:
        owner_email: owner_email
        uid: uid
        org_type_uid: org_type_uid
        owner_uid: owner_uid
        valid_to: 2000-01-23T04:56:07.000+00:00
        name: name
        valid_from: 2000-01-23T04:56:07.000+00:00
        resource_name: resource_name
        resource_policy:
          name: name
          statements:
          - condition: "{}"
            effect: effect
            resources:
            - resources
            - resources
            - resources
            - resources
            - resources
            actions:
            - actions
            - actions
            - actions
            - actions
            - actions
            sid: sid
          - condition: "{}"
            effect: effect
            resources:
            - resources
            - resources
            - resources
            - resources
            - resources
            actions:
            - actions
            - actions
            - actions
            - actions
            - actions
            sid: sid
          version: version
        tags:
        - tags
        - tags
        - tags
        - tags
        - tags
      properties:
        name:
          description: Name of the organization
          maxLength: 32
          minLength: 3
          type: string
        org_type_uid:
          description: Organization Type
          type: string
        owner_email:
          description: The email address of the user who owns this org
          type: string
        owner_uid:
          description: The user UID who owns this organization
          maxLength: 64
          type: string
        resource_name:
          description: Resource name utilized by RBAC
          type: string
        resource_policy:
          $ref: '#/components/schemas/ResourcePolicy'
        tags:
          description: User supplied tags
          items:
            type: string
          maxItems: 20
          type: array
        uid:
          description: Org UID
          maxLength: 64
          type: string
        valid_from:
          description: "Valid from date, the first date this object was valid"
          format: date-time
          type: string
        valid_to:
          description: "Valid to date, the date this object is valid to"
          format: date-time
          type: string
      required:
      - name
      type: object
    OrgAssignRoleInput:
      example:
        role_uid: role_uid
        user_uid: user_uid
      properties:
        role_uid:
          description: RoleUID
          maxLength: 64
          type: string
        user_uid:
          description: UserUID
          maxLength: 64
          type: string
      type: object
    OrgInviteUsersInput:
      example:
        emails:
        - emails
        - emails
        - emails
        - emails
        - emails
        roles:
        - roles
        - roles
        - roles
        - roles
        - roles
      properties:
        emails:
          items:
            type: string
          maxItems: 64
          minItems: 1
          type: array
        roles:
          items:
            type: string
          maxItems: 10
          minItems: 1
          type: array
      type: object
    OrgTestNotificationTargetInput:
      example:
        target: target
      properties:
        target:
          maxLength: 64
          minLength: 1
          type: string
      type: object
    OrgUnassignRoleInput:
      example:
        role_uid: role_uid
        user_uid: user_uid
      properties:
        role_uid:
          description: RoleUID
          maxLength: 64
          type: string
        user_uid:
          description: UserUID
          maxLength: 64
          type: string
      type: object
    OrgUpdateInput:
      example:
        owner_email: owner_email
        org_type_uid: org_type_uid
        owner_uid: owner_uid
        valid_to: 2000-01-23T04:56:07.000+00:00
        name: name
        valid_from: 2000-01-23T04:56:07.000+00:00
        resource_name: resource_name
        resource_policy:
          name: name
          statements:
          - condition: "{}"
            effect: effect
            resources:
            - resources
            - resources
            - resources
            - resources
            - resources
            actions:
            - actions
            - actions
            - actions
            - actions
            - actions
            sid: sid
          - condition: "{}"
            effect: effect
            resources:
            - resources
            - resources
            - resources
            - resources
            - resources
            actions:
            - actions
            - actions
            - actions
            - actions
            - actions
            sid: sid
          version: version
        tags:
        - tags
        - tags
        - tags
        - tags
        - tags
      properties:
        name:
          description: Name of the organization
          maxLength: 32
          minLength: 3
          type: string
        org_type_uid:
          description: Organization Type
          type: string
        owner_email:
          description: The email address of the user who owns this org
          type: string
        owner_uid:
          description: The user UID who owns this organization
          maxLength: 64
          type: string
        resource_name:
          description: Resource name utilized by RBAC
          type: string
        resource_policy:
          $ref: '#/components/schemas/ResourcePolicy'
        tags:
          description: User supplied tags
          items:
            type: string
          maxItems: 20
          type: array
        valid_from:
          description: "Valid from date, the first date this object was valid"
          format: date-time
          type: string
        valid_to:
          description: "Valid to date, the date this object is valid to"
          format: date-time
          type: string
      required:
      - name
      type: object
    RBACAction:
      example:
        can_perform: true
        action: action
        error: error
        resource_name: resource_name
      properties:
        action:
          description: Action which meets the requirements of RBAC action naming
          maxLength: 32
          type: string
        can_perform:
          description: Return result of querying the users RBAC capabilities
          type: boolean
        error:
          description: Error returned from permission checking
          type: string
        resource_name:
          description: ResourceName which meets the requirements of RBAC resource
            naming
          maxLength: 128
          type: string
      type: object
    RbacConditionMap:
      description: Additional conditions which may be applied
      type: object
    RbacStatement:
      example:
        condition: "{}"
        effect: effect
        resources:
        - resources
        - resources
        - resources
        - resources
        - resources
        actions:
        - actions
        - actions
        - actions
        - actions
        - actions
        sid: sid
      properties:
        actions:
          description: The actions that may be performed
          items:
            type: string
          maxItems: 50
          minItems: 1
          type: array
        condition:
          description: Additional conditions which may be applied
          type: object
        effect:
          description: "The effect of the statement, i.e. allow or deny"
          maxLength: 5
          type: string
        resources:
          description: The resource the statement applies to
          items:
            type: string
          maxItems: 25
          minItems: 1
          type: array
        sid:
          description: "Statement ID, used to identify the statement in audit logs"
          maxLength: 32
          type: string
      required:
      - effect
      - sid
      type: object
    ResourcePolicy:
      description: Resource policy for RBAC
      example:
        name: name
        statements:
        - condition: "{}"
          effect: effect
          resources:
          - resources
          - resources
          - resources
          - resources
          - resources
          actions:
          - actions
          - actions
          - actions
          - actions
          - actions
          sid: sid
        - condition: "{}"
          effect: effect
          resources:
          - resources
          - resources
          - resources
          - resources
          - resources
          actions:
          - actions
          - actions
          - actions
          - actions
          - actions
          sid: sid
        version: version
      properties:
        name:
          description: Name of the resource policy
          maxLength: 32
          type: string
        statements:
          description: List of statements to be examined by the resource policy
          items:
            $ref: '#/components/schemas/RbacStatement'
          type: array
        version:
          maxLength: 24
          type: string
      type: object
    RstoreCausalQuery:
      example:
        pre:
        - null
        - null
        post:
        - null
        - null
        peer:
        - null
        - null
      properties:
        peer:
          description: Causal tree matching rules for peer causal records
          items:
            $ref: '#/components/schemas/Gv1Rule'
          type: array
        post:
          description: Causal tree matching rules for post causal records
          items:
            $ref: '#/components/schemas/Gv1Rule'
          type: array
        pre:
          description: Causal tree matching rules for pre causal records
          items:
            $ref: '#/components/schemas/Gv1Rule'
          type: array
      type: object
    RstreamTimeRange:
      description: returns true if the property is a time and is start<=time<end
      example:
        start_time: 1.4658129805029452
        end_time: 6.027456183070403
      properties:
        end_time:
          format: double
          type: number
        start_time:
          format: double
          type: number
      type: object
    SessionOrgTypeMaxLimit:
      example:
        time_window_in_seconds: 5
        remaining_capacity: 1.4658129805029452
        limit_value: 6.027456183070403
        description: description
        limit_exceeded: true
        current_value: 0.8008281904610115
      properties:
        current_value:
          description: What is the current value
          format: double
          type: number
        description:
          description: Description of the limit
          type: string
        limit_exceeded:
          description: Has the limit been met or exceeded
          type: boolean
        limit_value:
          description: What is the max limit value
          format: double
          type: number
        remaining_capacity:
          description: How many items can be added to the current value before it
            is exceeded
          format: double
          type: number
        time_window_in_seconds:
          description: The time window in seconds that the limit is calcuated on
          format: int32
          type: integer
      type: object
    Source:
      example:
        org_uid: org_uid
        runtime_details:
          src_uid: src_uid
          os_pretty_name: os_pretty_name
          request_ip: request_ip
          cloud_region: cloud_region
          uname: uname
          cpu_make: cpu_make
          ip_addresses:
          - ip_addresses
          - ip_addresses
          cpu_cores: 6
          agent_arch: agent_arch
          cloud_instance_id: cloud_instance_id
          agent_version: agent_version
          boot_time: 0.8008281904610115
          hostname: hostname
          cloud_type: cloud_type
          cloud_tags:
          - cloud_tags
          - cloud_tags
          cpu_model: cpu_model
          cloud_image_id: cloud_image_id
          os_name: os_name
          mac_addresses:
          - mac_addresses
          - mac_addresses
        description: description
        valid_from: 2000-01-23T04:56:07.000+00:00
        last_data: 2000-01-23T04:56:07.000+00:00
        last_stored_chunk_end_time: 2000-01-23T04:56:07.000+00:00
        type: type
        tags:
        - tags
        - tags
        - tags
        - tags
        - tags
        last_ingest_chunk_end_time: 2000-01-23T04:56:07.000+00:00
        uid: uid
        runtime_description: runtime_description
        valid_to: 2000-01-23T04:56:07.000+00:00
        name: name
        resource_name: resource_name
        resource_policy:
          name: name
          statements:
          - condition: "{}"
            effect: effect
            resources:
            - resources
            - resources
            - resources
            - resources
            - resources
            actions:
            - actions
            - actions
            - actions
            - actions
            - actions
            sid: sid
          - condition: "{}"
            effect: effect
            resources:
            - resources
            - resources
            - resources
            - resources
            - resources
            actions:
            - actions
            - actions
            - actions
            - actions
            - actions
            sid: sid
          version: version
      properties:
        description:
          description: User supplied description of the source
          maxLength: 256
          type: string
        last_data:
          format: date-time
          type: string
        last_ingest_chunk_end_time:
          description: The end of the last chunk ingested from the agent
          format: date-time
          type: string
        last_stored_chunk_end_time:
          description: The end of the last chunk stored from the agent
          format: date-time
          type: string
        name:
          description: User supplied name of the source
          maxLength: 32
          type: string
        org_uid:
          description: The org this source is associated with
          maxLength: 64
          type: string
        resource_name:
          description: Resource name used for RBAC
          type: string
        resource_policy:
          $ref: '#/components/schemas/ResourcePolicy'
        runtime_description:
          description: Description of the runtime of the source
          type: string
        runtime_details:
          $ref: '#/components/schemas/Orc_apiRuntimeDetails'
        tags:
          description: User supplied tags
          items:
            type: string
          maxItems: 20
          type: array
        type:
          description: Type of source
          type: string
        uid:
          description: The UID of the source
          maxLength: 64
          type: string
        valid_from:
          description: "Valid from date, the first date this object was valid"
          format: date-time
          type: string
        valid_to:
          description: "Valid to date, the date this object is valid to"
          format: date-time
          type: string
      type: object
    SrcCreateInput:
      example:
        uid: uid
        runtime_details:
          src_uid: src_uid
          os_pretty_name: os_pretty_name
          request_ip: request_ip
          cloud_region: cloud_region
          uname: uname
          cpu_make: cpu_make
          ip_addresses:
          - ip_addresses
          - ip_addresses
          cpu_cores: 6
          agent_arch: agent_arch
          cloud_instance_id: cloud_instance_id
          agent_version: agent_version
          boot_time: 0.8008281904610115
          hostname: hostname
          cloud_type: cloud_type
          cloud_tags:
          - cloud_tags
          - cloud_tags
          cpu_model: cpu_model
          cloud_image_id: cloud_image_id
          os_name: os_name
          mac_addresses:
          - mac_addresses
          - mac_addresses
        runtime_description: runtime_description
        name: name
        description: description
        type: type
        tags:
        - tags
        - tags
        - tags
        - tags
        - tags
      properties:
        description:
          description: User supplied description of the source
          maxLength: 256
          type: string
        name:
          description: User supplied name of the source
          maxLength: 32
          type: string
        runtime_description:
          description: Description of the runtime of the source
          type: string
        runtime_details:
          $ref: '#/components/schemas/Orc_apiRuntimeDetails'
        tags:
          description: User supplied tags
          items:
            type: string
          maxItems: 20
          type: array
        type:
          description: Type of source
          type: string
        uid:
          description: The UID of the source
          maxLength: 64
          type: string
      type: object
    SrcDataQueryInput:
      example:
        src_uid: src_uid
        org_uid: org_uid
        query_size: 1465
        context_uid: context_uid
        query: query
        return_rptrs: true
        end_time: 0.8008281904610115
        rptrs:
        - rptrs
        - rptrs
        sort_col: sort_col
        start_time: 5.962133916683182
        query_from: 6
        data_type: data_type
        ids:
        - ids
        - ids
        - ids
        - ids
        - ids
        causal:
          pre:
          - null
          - null
          post:
          - null
          - null
          peer:
          - null
          - null
        expr:
          schema: schema
          or:
          - null
          - null
          in:
          - ""
          - ""
          - ""
          - ""
          - ""
          has_suffix: has_suffix
          not: null
          contains_str: contains_str
          time_range:
            start_time: 1.4658129805029452
            end_time: 6.027456183070403
          and:
          - null
          - null
          greater_than: ""
          equals: ""
          less_than: ""
          has_prefix: has_prefix
          property: property
          exists: true
          re_match: re_match
        projection:
        - projection
        - projection
        sort_order: sort_order
        aggs:
          key: ""
      properties:
        aggs:
          additionalProperties: {}
          description: Aggregations
          type: object
        causal:
          $ref: '#/components/schemas/RstoreCausalQuery'
        context_uid:
          description: "Context UID for this query, it's used to track the query as\
            \ it flows through the system, and shouldn't be exposed to customers"
          type: string
        data_type:
          description: DataType to query
          maxLength: 24
          type: string
        end_time:
          description: "Time in unix epoch time, records < time are returned"
          format: double
          type: number
        expr:
          $ref: '#/components/schemas/Expr'
        ids:
          description: Array of IDs to resolve into records
          items:
            type: string
          maxItems: 512
          type: array
        org_uid:
          description: Organization UID to query
          maxLength: 64
          type: string
        projection:
          description: "Array of top level object properties which will be emitted,\
            \ if none are specified all will be emitted"
          items:
            type: string
          type: array
        query:
          description: Lucene based search query
          maxLength: 1024
          type: string
        query_from:
          description: Where to start the query in the result set from
          format: int32
          type: integer
        query_size:
          description: Size of the query result set
          format: int32
          maximum: 10000
          type: integer
        return_rptrs:
          type: boolean
        rptrs:
          items:
            type: string
          type: array
        sort_col:
          description: Sort column
          maxLength: 20
          type: string
        sort_order:
          description: Sort order
          maxLength: 6
          type: string
        src_uid:
          description: Source UID to query
          maxLength: 64
          type: string
        start_time:
          description: "Time in unix epoch time, records >= time are returned"
          format: double
          type: number
      required:
      - data_type
      - org_uid
      type: object
    SrcUpdateInput:
      example:
        runtime_details:
          src_uid: src_uid
          os_pretty_name: os_pretty_name
          request_ip: request_ip
          cloud_region: cloud_region
          uname: uname
          cpu_make: cpu_make
          ip_addresses:
          - ip_addresses
          - ip_addresses
          cpu_cores: 6
          agent_arch: agent_arch
          cloud_instance_id: cloud_instance_id
          agent_version: agent_version
          boot_time: 0.8008281904610115
          hostname: hostname
          cloud_type: cloud_type
          cloud_tags:
          - cloud_tags
          - cloud_tags
          cpu_model: cpu_model
          cloud_image_id: cloud_image_id
          os_name: os_name
          mac_addresses:
          - mac_addresses
          - mac_addresses
        description: description
        valid_from: 2000-01-23T04:56:07.000+00:00
        last_data: 2000-01-23T04:56:07.000+00:00
        last_stored_chunk_end_time: 2000-01-23T04:56:07.000+00:00
        type: type
        tags:
        - tags
        - tags
        - tags
        - tags
        - tags
        last_ingest_chunk_end_time: 2000-01-23T04:56:07.000+00:00
        runtime_description: runtime_description
        valid_to: 2000-01-23T04:56:07.000+00:00
        name: name
        resource_name: resource_name
        resource_policy:
          name: name
          statements:
          - condition: "{}"
            effect: effect
            resources:
            - resources
            - resources
            - resources
            - resources
            - resources
            actions:
            - actions
            - actions
            - actions
            - actions
            - actions
            sid: sid
          - condition: "{}"
            effect: effect
            resources:
            - resources
            - resources
            - resources
            - resources
            - resources
            actions:
            - actions
            - actions
            - actions
            - actions
            - actions
            sid: sid
          version: version
      properties:
        description:
          description: User supplied description of the source
          maxLength: 256
          type: string
        last_data:
          format: date-time
          type: string
        last_ingest_chunk_end_time:
          description: The end of the last chunk ingested from the agent
          format: date-time
          type: string
        last_stored_chunk_end_time:
          description: The end of the last chunk stored from the agent
          format: date-time
          type: string
        name:
          description: User supplied name of the source
          maxLength: 32
          type: string
        resource_name:
          description: Resource name used for RBAC
          type: string
        resource_policy:
          $ref: '#/components/schemas/ResourcePolicy'
        runtime_description:
          description: Description of the runtime of the source
          type: string
        runtime_details:
          $ref: '#/components/schemas/Orc_apiRuntimeDetails'
        tags:
          description: User supplied tags
          items:
            type: string
          maxItems: 20
          type: array
        type:
          description: Type of source
          type: string
        valid_from:
          description: "Valid from date, the first date this object was valid"
          format: date-time
          type: string
        valid_to:
          description: "Valid to date, the date this object is valid to"
          format: date-time
          type: string
      type: object
    UIData:
      example:
        org_uid: org_uid
        uid: uid
        data:
          key: ""
        owner_uid: owner_uid
        last_used: 2000-01-23T04:56:07.000+00:00
        valid_to: 2000-01-23T04:56:07.000+00:00
        source_uid: source_uid
        valid_from: 2000-01-23T04:56:07.000+00:00
        data_key: data_key
        tags:
        - tags
        - tags
        - tags
        - tags
        - tags
      properties:
        data:
          additionalProperties: {}
          description: UI supplied JSON object
          type: object
        data_key:
          description: Key for the data
          maxLength: 32
          type: string
        last_used:
          description: The time of las use of the key; only updated every 5 minutes
          format: date-time
          type: string
        org_uid:
          description: Org UID
          maxLength: 32
          type: string
        owner_uid:
          description: Owner UID
          maxLength: 32
          type: string
        source_uid:
          description: Source UID
          maxLength: 32
          type: string
        tags:
          description: User supplied tags
          items:
            type: string
          maxItems: 64
          type: array
        uid:
          description: UID for the UIData
          type: string
        valid_from:
          description: Valid from is the creation date or first date when the API
            key became valid
          format: date-time
          type: string
        valid_to:
          description: Valid to is the expiration date or the last date this API key
            will be valid
          format: date-time
          type: string
      type: object
    UiDataSetOrgDataInput:
      example:
        ? ""
        : ""
        uid: uid
        data:
          key: ""
        last_used: 2000-01-23T04:56:07.000+00:00
        valid_to: 2000-01-23T04:56:07.000+00:00
        valid_from: 2000-01-23T04:56:07.000+00:00
        tags:
        - tags
        - tags
        - tags
        - tags
        - tags
      properties:
        ? ""
        : type: string
        data:
          additionalProperties: {}
          description: UI supplied JSON object
          type: object
        last_used:
          description: The time of las use of the key; only updated every 5 minutes
          format: date-time
          type: string
        tags:
          description: User supplied tags
          items:
            type: string
          maxItems: 64
          type: array
        uid:
          description: UID for the UIData
          type: string
        valid_from:
          description: Valid from is the creation date or first date when the API
            key became valid
          format: date-time
          type: string
        valid_to:
          description: Valid to is the expiration date or the last date this API key
            will be valid
          format: date-time
          type: string
      type: object
    UiDataSetSourceDataInput:
      example:
        ? ""
        : ""
        uid: uid
        data:
          key: ""
        last_used: 2000-01-23T04:56:07.000+00:00
        valid_to: 2000-01-23T04:56:07.000+00:00
        valid_from: 2000-01-23T04:56:07.000+00:00
        tags:
        - tags
        - tags
        - tags
        - tags
        - tags
      properties:
        ? ""
        : type: string
        data:
          additionalProperties: {}
          description: UI supplied JSON object
          type: object
        last_used:
          description: The time of las use of the key; only updated every 5 minutes
          format: date-time
          type: string
        tags:
          description: User supplied tags
          items:
            type: string
          maxItems: 64
          type: array
        uid:
          description: UID for the UIData
          type: string
        valid_from:
          description: Valid from is the creation date or first date when the API
            key became valid
          format: date-time
          type: string
        valid_to:
          description: Valid to is the expiration date or the last date this API key
            will be valid
          format: date-time
          type: string
      type: object
    UiDataSetUserDataInput:
      example:
        ? ""
        : ""
        uid: uid
        data:
          key: ""
        last_used: 2000-01-23T04:56:07.000+00:00
        valid_to: 2000-01-23T04:56:07.000+00:00
        valid_from: 2000-01-23T04:56:07.000+00:00
        tags:
        - tags
        - tags
        - tags
        - tags
        - tags
      properties:
        ? ""
        : type: string
        data:
          additionalProperties: {}
          description: UI supplied JSON object
          type: object
        last_used:
          description: The time of las use of the key; only updated every 5 minutes
          format: date-time
          type: string
        tags:
          description: User supplied tags
          items:
            type: string
          maxItems: 64
          type: array
        uid:
          description: UID for the UIData
          type: string
        valid_from:
          description: Valid from is the creation date or first date when the API
            key became valid
          format: date-time
          type: string
        valid_to:
          description: Valid to is the expiration date or the last date this API key
            will be valid
          format: date-time
          type: string
      type: object
    UiDataSetUserOrgDataInput:
      example:
        ? ""
        : ""
        uid: uid
        data:
          key: ""
        last_used: 2000-01-23T04:56:07.000+00:00
        valid_to: 2000-01-23T04:56:07.000+00:00
        valid_from: 2000-01-23T04:56:07.000+00:00
        tags:
        - tags
        - tags
        - tags
        - tags
        - tags
      properties:
        ? ""
        : type: string
        data:
          additionalProperties: {}
          description: UI supplied JSON object
          type: object
        last_used:
          description: The time of las use of the key; only updated every 5 minutes
          format: date-time
          type: string
        tags:
          description: User supplied tags
          items:
            type: string
          maxItems: 64
          type: array
        uid:
          description: UID for the UIData
          type: string
        valid_from:
          description: Valid from is the creation date or first date when the API
            key became valid
          format: date-time
          type: string
        valid_to:
          description: Valid to is the expiration date or the last date this API key
            will be valid
          format: date-time
          type: string
      type: object
    UiDataSetUserSourceDataInput:
      example:
        ? ""
        : ""
        uid: uid
        data:
          key: ""
        last_used: 2000-01-23T04:56:07.000+00:00
        valid_to: 2000-01-23T04:56:07.000+00:00
        valid_from: 2000-01-23T04:56:07.000+00:00
        tags:
        - tags
        - tags
        - tags
        - tags
        - tags
      properties:
        ? ""
        : type: string
        data:
          additionalProperties: {}
          description: UI supplied JSON object
          type: object
        last_used:
          description: The time of las use of the key; only updated every 5 minutes
          format: date-time
          type: string
        tags:
          description: User supplied tags
          items:
            type: string
          maxItems: 64
          type: array
        uid:
          description: UID for the UIData
          type: string
        valid_from:
          description: Valid from is the creation date or first date when the API
            key became valid
          format: date-time
          type: string
        valid_to:
          description: Valid to is the expiration date or the last date this API key
            will be valid
          format: date-time
          type: string
      type: object
    User:
      example:
        uid: uid
        disable_email: true
        valid_to: 2000-01-23T04:56:07.000+00:00
        valid_from: 2000-01-23T04:56:07.000+00:00
        resource_name: resource_name
        email: email
      properties:
        disable_email:
          description: "Disable sending email, this is set when either the user explicitly\
            \ asks to be unsubscribed to email or there are errors sending emails\
            \ to the user"
          type: boolean
        email:
          description: User email
          type: string
        resource_name:
          description: Resource name used by RBAC
          type: string
        uid:
          description: User UID
          type: string
        valid_from:
          description: Valid from is the creation date or first date when the object
            became valid
          format: date-time
          type: string
        valid_to:
          description: Valid to is the expiration date or the last date this object
            was valid
          format: date-time
          type: string
      required:
      - email
      type: object
    ValidationError:
      properties:
        err_msg:
          description: Message regarding the validation failure
          type: string
        field:
          description: Field name which failed validation
          type: string
        property:
          description: JSON property name of the field which failed validation
          type: string
        tags:
          description: Validation tag which failed
          type: string
      type: object
    NotificationPolicy_routes_inner:
      example:
        data: ""
        destination:
          org_uid: org_uid
          webhook:
            no_tls_validation: true
            url: http://example.com/aeiou
          data: ""
          slack:
            url: http://example.com/aeiou
          description: description
          email:
          - email
          - email
          users:
          - users
          - users
        description: description
        expr:
          schema: schema
          or:
          - null
          - null
          in:
          - ""
          - ""
          - ""
          - ""
          - ""
          has_suffix: has_suffix
          not: null
          contains_str: contains_str
          time_range:
            start_time: 1.4658129805029452
            end_time: 6.027456183070403
          and:
          - null
          - null
          greater_than: ""
          equals: ""
          less_than: ""
          has_prefix: has_prefix
          property: property
          exists: true
          re_match: re_match
        target: target
      properties:
        data:
          description: UI-supplied data
        description:
          type: string
        destination:
          $ref: '#/components/schemas/NotificationPolicyDestination'
        expr:
          $ref: '#/components/schemas/Expr'
        target:
          description: One of the targets specified in `targets`
          type: string
      type: object
    NotificationPolicyDestination_slack:
      example:
        url: http://example.com/aeiou
      properties:
        url:
          format: url
          type: string
      required:
      - url
      type: object
    NotificationPolicyDestination_webhook:
      example:
        no_tls_validation: true
        url: http://example.com/aeiou
      properties:
        no_tls_validation:
          type: boolean
        url:
          format: url
          type: string
      required:
      - url
      type: object
  securitySchemes:
    apiToken:
      bearerFormat: JWT
      scheme: bearer
      type: http
