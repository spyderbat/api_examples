/*
Spyderbat API UI & Public APIs

Restful APIs for use by UI & customers.

API version: 1.0.0
Contact: apisupport@spyderbat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sbapi

import (
	"encoding/json"
)

// DaoPolicy struct for DaoPolicy
type DaoPolicy struct {
	// Allowed providers (use direct for direct sign-in)
	AllowedProviders []string `json:"allowed_providers"`
	// Authentication policy
	AuthPolicy map[string]interface{} `json:"auth_policy,omitempty"`
	// comment
	Comment *string `json:"comment,omitempty"`
	// Regular expression for email addresses
	EmailRegex string `json:"email_regex"`
	SignupPolicy DaoSignupPolicy `json:"signup_policy"`
}

// NewDaoPolicy instantiates a new DaoPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaoPolicy(allowedProviders []string, emailRegex string, signupPolicy DaoSignupPolicy) *DaoPolicy {
	this := DaoPolicy{}
	this.AllowedProviders = allowedProviders
	this.EmailRegex = emailRegex
	this.SignupPolicy = signupPolicy
	return &this
}

// NewDaoPolicyWithDefaults instantiates a new DaoPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaoPolicyWithDefaults() *DaoPolicy {
	this := DaoPolicy{}
	return &this
}

// GetAllowedProviders returns the AllowedProviders field value
func (o *DaoPolicy) GetAllowedProviders() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AllowedProviders
}

// GetAllowedProvidersOk returns a tuple with the AllowedProviders field value
// and a boolean to check if the value has been set.
func (o *DaoPolicy) GetAllowedProvidersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowedProviders, true
}

// SetAllowedProviders sets field value
func (o *DaoPolicy) SetAllowedProviders(v []string) {
	o.AllowedProviders = v
}

// GetAuthPolicy returns the AuthPolicy field value if set, zero value otherwise.
func (o *DaoPolicy) GetAuthPolicy() map[string]interface{} {
	if o == nil || o.AuthPolicy == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AuthPolicy
}

// GetAuthPolicyOk returns a tuple with the AuthPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaoPolicy) GetAuthPolicyOk() (map[string]interface{}, bool) {
	if o == nil || o.AuthPolicy == nil {
		return nil, false
	}
	return o.AuthPolicy, true
}

// HasAuthPolicy returns a boolean if a field has been set.
func (o *DaoPolicy) HasAuthPolicy() bool {
	if o != nil && o.AuthPolicy != nil {
		return true
	}

	return false
}

// SetAuthPolicy gets a reference to the given map[string]interface{} and assigns it to the AuthPolicy field.
func (o *DaoPolicy) SetAuthPolicy(v map[string]interface{}) {
	o.AuthPolicy = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *DaoPolicy) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaoPolicy) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *DaoPolicy) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *DaoPolicy) SetComment(v string) {
	o.Comment = &v
}

// GetEmailRegex returns the EmailRegex field value
func (o *DaoPolicy) GetEmailRegex() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmailRegex
}

// GetEmailRegexOk returns a tuple with the EmailRegex field value
// and a boolean to check if the value has been set.
func (o *DaoPolicy) GetEmailRegexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmailRegex, true
}

// SetEmailRegex sets field value
func (o *DaoPolicy) SetEmailRegex(v string) {
	o.EmailRegex = v
}

// GetSignupPolicy returns the SignupPolicy field value
func (o *DaoPolicy) GetSignupPolicy() DaoSignupPolicy {
	if o == nil {
		var ret DaoSignupPolicy
		return ret
	}

	return o.SignupPolicy
}

// GetSignupPolicyOk returns a tuple with the SignupPolicy field value
// and a boolean to check if the value has been set.
func (o *DaoPolicy) GetSignupPolicyOk() (*DaoSignupPolicy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignupPolicy, true
}

// SetSignupPolicy sets field value
func (o *DaoPolicy) SetSignupPolicy(v DaoSignupPolicy) {
	o.SignupPolicy = v
}

func (o DaoPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["allowed_providers"] = o.AllowedProviders
	}
	if o.AuthPolicy != nil {
		toSerialize["auth_policy"] = o.AuthPolicy
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if true {
		toSerialize["email_regex"] = o.EmailRegex
	}
	if true {
		toSerialize["signup_policy"] = o.SignupPolicy
	}
	return json.Marshal(toSerialize)
}

type NullableDaoPolicy struct {
	value *DaoPolicy
	isSet bool
}

func (v NullableDaoPolicy) Get() *DaoPolicy {
	return v.value
}

func (v *NullableDaoPolicy) Set(val *DaoPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableDaoPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableDaoPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaoPolicy(val *DaoPolicy) *NullableDaoPolicy {
	return &NullableDaoPolicy{value: val, isSet: true}
}

func (v NullableDaoPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaoPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


