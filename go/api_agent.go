/*
Spyderbat API UI & Public APIs

Restful APIs for use by UI & customers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sbapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// AgentApiService AgentApi service
type AgentApiService service

type ApiAgentListRequest struct {
	ctx context.Context
	ApiService *AgentApiService
	orgUID string
	agentRegistrationUidEquals *string
	originalAssociation *bool
	page *int32
	pageSize *int32
	sourceUidEquals *string
}

func (r ApiAgentListRequest) AgentRegistrationUidEquals(agentRegistrationUidEquals string) ApiAgentListRequest {
	r.agentRegistrationUidEquals = &agentRegistrationUidEquals
	return r
}

func (r ApiAgentListRequest) OriginalAssociation(originalAssociation bool) ApiAgentListRequest {
	r.originalAssociation = &originalAssociation
	return r
}

func (r ApiAgentListRequest) Page(page int32) ApiAgentListRequest {
	r.page = &page
	return r
}

func (r ApiAgentListRequest) PageSize(pageSize int32) ApiAgentListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiAgentListRequest) SourceUidEquals(sourceUidEquals string) ApiAgentListRequest {
	r.sourceUidEquals = &sourceUidEquals
	return r
}

func (r ApiAgentListRequest) Execute() ([]Agent, *http.Response, error) {
	return r.ApiService.AgentListExecute(r)
}

/*
AgentList List agents


Lists the agents associated with an organization

* Requires the action  *agent:List* on the organization



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgUID
 @return ApiAgentListRequest
*/
func (a *AgentApiService) AgentList(ctx context.Context, orgUID string) ApiAgentListRequest {
	return ApiAgentListRequest{
		ApiService: a,
		ctx: ctx,
		orgUID: orgUID,
	}
}

// Execute executes the request
//  @return []Agent
func (a *AgentApiService) AgentListExecute(r ApiAgentListRequest) ([]Agent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Agent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentApiService.AgentList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/org/{orgUID}/agent/"
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.orgUID) < 10 {
		return localVarReturnValue, nil, reportError("orgUID must have at least 10 elements")
	}
	if strlen(r.orgUID) > 64 {
		return localVarReturnValue, nil, reportError("orgUID must have less than 64 elements")
	}

	if r.agentRegistrationUidEquals != nil {
		localVarQueryParams.Add("agent_registration_uid_equals", parameterToString(*r.agentRegistrationUidEquals, ""))
	}
	if r.originalAssociation != nil {
		localVarQueryParams.Add("original_association", parameterToString(*r.originalAssociation, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.sourceUidEquals != nil {
		localVarQueryParams.Add("source_uid_equals", parameterToString(*r.sourceUidEquals, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgentLoadRequest struct {
	ctx context.Context
	ApiService *AgentApiService
	agentUID string
	orgUID string
}

func (r ApiAgentLoadRequest) Execute() (*Agent, *http.Response, error) {
	return r.ApiService.AgentLoadExecute(r)
}

/*
AgentLoad Load an agent


Load a specified agent

* Requires the action  *agent:Load* on the organization



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agentUID
 @param orgUID
 @return ApiAgentLoadRequest
*/
func (a *AgentApiService) AgentLoad(ctx context.Context, agentUID string, orgUID string) ApiAgentLoadRequest {
	return ApiAgentLoadRequest{
		ApiService: a,
		ctx: ctx,
		agentUID: agentUID,
		orgUID: orgUID,
	}
}

// Execute executes the request
//  @return Agent
func (a *AgentApiService) AgentLoadExecute(r ApiAgentLoadRequest) (*Agent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Agent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentApiService.AgentLoad")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/org/{orgUID}/agent/{agentUID}"
	localVarPath = strings.Replace(localVarPath, "{"+"agentUID"+"}", url.PathEscape(parameterToString(r.agentUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.agentUID) > 64 {
		return localVarReturnValue, nil, reportError("agentUID must have less than 64 elements")
	}
	if strlen(r.orgUID) > 64 {
		return localVarReturnValue, nil, reportError("orgUID must have less than 64 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
