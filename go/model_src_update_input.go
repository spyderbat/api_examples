/*
Spyderbat API UI & Public APIs

Restful APIs for use by UI & customers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sbapi

import (
	"encoding/json"
	"time"
)

// SrcUpdateInput struct for SrcUpdateInput
type SrcUpdateInput struct {
	// User supplied description of the source
	Description *string `json:"description,omitempty"`
	LastData *time.Time `json:"last_data,omitempty"`
	// The end of the last chunk ingested from the agent
	LastIngestChunkEndTime *time.Time `json:"last_ingest_chunk_end_time,omitempty"`
	// The end of the last chunk stored from the agent
	LastStoredChunkEndTime *time.Time `json:"last_stored_chunk_end_time,omitempty"`
	// User supplied name of the source
	Name *string `json:"name,omitempty"`
	// Resource name used for RBAC
	ResourceName *string `json:"resource_name,omitempty"`
	ResourcePolicy *ResourcePolicy `json:"resource_policy,omitempty"`
	// Description of the runtime of the source
	RuntimeDescription *string `json:"runtime_description,omitempty"`
	RuntimeDetails *OrcApiRuntimeDetails `json:"runtime_details,omitempty"`
	// User supplied tags
	Tags []string `json:"tags,omitempty"`
	// Type of source
	Type *string `json:"type,omitempty"`
	// Valid from date, the first date this object was valid
	ValidFrom *time.Time `json:"valid_from,omitempty"`
	// Valid to date, the date this object is valid to
	ValidTo *time.Time `json:"valid_to,omitempty"`
}

// NewSrcUpdateInput instantiates a new SrcUpdateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSrcUpdateInput() *SrcUpdateInput {
	this := SrcUpdateInput{}
	return &this
}

// NewSrcUpdateInputWithDefaults instantiates a new SrcUpdateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSrcUpdateInputWithDefaults() *SrcUpdateInput {
	this := SrcUpdateInput{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SrcUpdateInput) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SrcUpdateInput) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SrcUpdateInput) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SrcUpdateInput) SetDescription(v string) {
	o.Description = &v
}

// GetLastData returns the LastData field value if set, zero value otherwise.
func (o *SrcUpdateInput) GetLastData() time.Time {
	if o == nil || o.LastData == nil {
		var ret time.Time
		return ret
	}
	return *o.LastData
}

// GetLastDataOk returns a tuple with the LastData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SrcUpdateInput) GetLastDataOk() (*time.Time, bool) {
	if o == nil || o.LastData == nil {
		return nil, false
	}
	return o.LastData, true
}

// HasLastData returns a boolean if a field has been set.
func (o *SrcUpdateInput) HasLastData() bool {
	if o != nil && o.LastData != nil {
		return true
	}

	return false
}

// SetLastData gets a reference to the given time.Time and assigns it to the LastData field.
func (o *SrcUpdateInput) SetLastData(v time.Time) {
	o.LastData = &v
}

// GetLastIngestChunkEndTime returns the LastIngestChunkEndTime field value if set, zero value otherwise.
func (o *SrcUpdateInput) GetLastIngestChunkEndTime() time.Time {
	if o == nil || o.LastIngestChunkEndTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LastIngestChunkEndTime
}

// GetLastIngestChunkEndTimeOk returns a tuple with the LastIngestChunkEndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SrcUpdateInput) GetLastIngestChunkEndTimeOk() (*time.Time, bool) {
	if o == nil || o.LastIngestChunkEndTime == nil {
		return nil, false
	}
	return o.LastIngestChunkEndTime, true
}

// HasLastIngestChunkEndTime returns a boolean if a field has been set.
func (o *SrcUpdateInput) HasLastIngestChunkEndTime() bool {
	if o != nil && o.LastIngestChunkEndTime != nil {
		return true
	}

	return false
}

// SetLastIngestChunkEndTime gets a reference to the given time.Time and assigns it to the LastIngestChunkEndTime field.
func (o *SrcUpdateInput) SetLastIngestChunkEndTime(v time.Time) {
	o.LastIngestChunkEndTime = &v
}

// GetLastStoredChunkEndTime returns the LastStoredChunkEndTime field value if set, zero value otherwise.
func (o *SrcUpdateInput) GetLastStoredChunkEndTime() time.Time {
	if o == nil || o.LastStoredChunkEndTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LastStoredChunkEndTime
}

// GetLastStoredChunkEndTimeOk returns a tuple with the LastStoredChunkEndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SrcUpdateInput) GetLastStoredChunkEndTimeOk() (*time.Time, bool) {
	if o == nil || o.LastStoredChunkEndTime == nil {
		return nil, false
	}
	return o.LastStoredChunkEndTime, true
}

// HasLastStoredChunkEndTime returns a boolean if a field has been set.
func (o *SrcUpdateInput) HasLastStoredChunkEndTime() bool {
	if o != nil && o.LastStoredChunkEndTime != nil {
		return true
	}

	return false
}

// SetLastStoredChunkEndTime gets a reference to the given time.Time and assigns it to the LastStoredChunkEndTime field.
func (o *SrcUpdateInput) SetLastStoredChunkEndTime(v time.Time) {
	o.LastStoredChunkEndTime = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SrcUpdateInput) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SrcUpdateInput) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SrcUpdateInput) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SrcUpdateInput) SetName(v string) {
	o.Name = &v
}

// GetResourceName returns the ResourceName field value if set, zero value otherwise.
func (o *SrcUpdateInput) GetResourceName() string {
	if o == nil || o.ResourceName == nil {
		var ret string
		return ret
	}
	return *o.ResourceName
}

// GetResourceNameOk returns a tuple with the ResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SrcUpdateInput) GetResourceNameOk() (*string, bool) {
	if o == nil || o.ResourceName == nil {
		return nil, false
	}
	return o.ResourceName, true
}

// HasResourceName returns a boolean if a field has been set.
func (o *SrcUpdateInput) HasResourceName() bool {
	if o != nil && o.ResourceName != nil {
		return true
	}

	return false
}

// SetResourceName gets a reference to the given string and assigns it to the ResourceName field.
func (o *SrcUpdateInput) SetResourceName(v string) {
	o.ResourceName = &v
}

// GetResourcePolicy returns the ResourcePolicy field value if set, zero value otherwise.
func (o *SrcUpdateInput) GetResourcePolicy() ResourcePolicy {
	if o == nil || o.ResourcePolicy == nil {
		var ret ResourcePolicy
		return ret
	}
	return *o.ResourcePolicy
}

// GetResourcePolicyOk returns a tuple with the ResourcePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SrcUpdateInput) GetResourcePolicyOk() (*ResourcePolicy, bool) {
	if o == nil || o.ResourcePolicy == nil {
		return nil, false
	}
	return o.ResourcePolicy, true
}

// HasResourcePolicy returns a boolean if a field has been set.
func (o *SrcUpdateInput) HasResourcePolicy() bool {
	if o != nil && o.ResourcePolicy != nil {
		return true
	}

	return false
}

// SetResourcePolicy gets a reference to the given ResourcePolicy and assigns it to the ResourcePolicy field.
func (o *SrcUpdateInput) SetResourcePolicy(v ResourcePolicy) {
	o.ResourcePolicy = &v
}

// GetRuntimeDescription returns the RuntimeDescription field value if set, zero value otherwise.
func (o *SrcUpdateInput) GetRuntimeDescription() string {
	if o == nil || o.RuntimeDescription == nil {
		var ret string
		return ret
	}
	return *o.RuntimeDescription
}

// GetRuntimeDescriptionOk returns a tuple with the RuntimeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SrcUpdateInput) GetRuntimeDescriptionOk() (*string, bool) {
	if o == nil || o.RuntimeDescription == nil {
		return nil, false
	}
	return o.RuntimeDescription, true
}

// HasRuntimeDescription returns a boolean if a field has been set.
func (o *SrcUpdateInput) HasRuntimeDescription() bool {
	if o != nil && o.RuntimeDescription != nil {
		return true
	}

	return false
}

// SetRuntimeDescription gets a reference to the given string and assigns it to the RuntimeDescription field.
func (o *SrcUpdateInput) SetRuntimeDescription(v string) {
	o.RuntimeDescription = &v
}

// GetRuntimeDetails returns the RuntimeDetails field value if set, zero value otherwise.
func (o *SrcUpdateInput) GetRuntimeDetails() OrcApiRuntimeDetails {
	if o == nil || o.RuntimeDetails == nil {
		var ret OrcApiRuntimeDetails
		return ret
	}
	return *o.RuntimeDetails
}

// GetRuntimeDetailsOk returns a tuple with the RuntimeDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SrcUpdateInput) GetRuntimeDetailsOk() (*OrcApiRuntimeDetails, bool) {
	if o == nil || o.RuntimeDetails == nil {
		return nil, false
	}
	return o.RuntimeDetails, true
}

// HasRuntimeDetails returns a boolean if a field has been set.
func (o *SrcUpdateInput) HasRuntimeDetails() bool {
	if o != nil && o.RuntimeDetails != nil {
		return true
	}

	return false
}

// SetRuntimeDetails gets a reference to the given OrcApiRuntimeDetails and assigns it to the RuntimeDetails field.
func (o *SrcUpdateInput) SetRuntimeDetails(v OrcApiRuntimeDetails) {
	o.RuntimeDetails = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *SrcUpdateInput) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SrcUpdateInput) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *SrcUpdateInput) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *SrcUpdateInput) SetTags(v []string) {
	o.Tags = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SrcUpdateInput) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SrcUpdateInput) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SrcUpdateInput) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SrcUpdateInput) SetType(v string) {
	o.Type = &v
}

// GetValidFrom returns the ValidFrom field value if set, zero value otherwise.
func (o *SrcUpdateInput) GetValidFrom() time.Time {
	if o == nil || o.ValidFrom == nil {
		var ret time.Time
		return ret
	}
	return *o.ValidFrom
}

// GetValidFromOk returns a tuple with the ValidFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SrcUpdateInput) GetValidFromOk() (*time.Time, bool) {
	if o == nil || o.ValidFrom == nil {
		return nil, false
	}
	return o.ValidFrom, true
}

// HasValidFrom returns a boolean if a field has been set.
func (o *SrcUpdateInput) HasValidFrom() bool {
	if o != nil && o.ValidFrom != nil {
		return true
	}

	return false
}

// SetValidFrom gets a reference to the given time.Time and assigns it to the ValidFrom field.
func (o *SrcUpdateInput) SetValidFrom(v time.Time) {
	o.ValidFrom = &v
}

// GetValidTo returns the ValidTo field value if set, zero value otherwise.
func (o *SrcUpdateInput) GetValidTo() time.Time {
	if o == nil || o.ValidTo == nil {
		var ret time.Time
		return ret
	}
	return *o.ValidTo
}

// GetValidToOk returns a tuple with the ValidTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SrcUpdateInput) GetValidToOk() (*time.Time, bool) {
	if o == nil || o.ValidTo == nil {
		return nil, false
	}
	return o.ValidTo, true
}

// HasValidTo returns a boolean if a field has been set.
func (o *SrcUpdateInput) HasValidTo() bool {
	if o != nil && o.ValidTo != nil {
		return true
	}

	return false
}

// SetValidTo gets a reference to the given time.Time and assigns it to the ValidTo field.
func (o *SrcUpdateInput) SetValidTo(v time.Time) {
	o.ValidTo = &v
}

func (o SrcUpdateInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.LastData != nil {
		toSerialize["last_data"] = o.LastData
	}
	if o.LastIngestChunkEndTime != nil {
		toSerialize["last_ingest_chunk_end_time"] = o.LastIngestChunkEndTime
	}
	if o.LastStoredChunkEndTime != nil {
		toSerialize["last_stored_chunk_end_time"] = o.LastStoredChunkEndTime
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ResourceName != nil {
		toSerialize["resource_name"] = o.ResourceName
	}
	if o.ResourcePolicy != nil {
		toSerialize["resource_policy"] = o.ResourcePolicy
	}
	if o.RuntimeDescription != nil {
		toSerialize["runtime_description"] = o.RuntimeDescription
	}
	if o.RuntimeDetails != nil {
		toSerialize["runtime_details"] = o.RuntimeDetails
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.ValidFrom != nil {
		toSerialize["valid_from"] = o.ValidFrom
	}
	if o.ValidTo != nil {
		toSerialize["valid_to"] = o.ValidTo
	}
	return json.Marshal(toSerialize)
}

type NullableSrcUpdateInput struct {
	value *SrcUpdateInput
	isSet bool
}

func (v NullableSrcUpdateInput) Get() *SrcUpdateInput {
	return v.value
}

func (v *NullableSrcUpdateInput) Set(val *SrcUpdateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableSrcUpdateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableSrcUpdateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSrcUpdateInput(val *SrcUpdateInput) *NullableSrcUpdateInput {
	return &NullableSrcUpdateInput{value: val, isSet: true}
}

func (v NullableSrcUpdateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSrcUpdateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


