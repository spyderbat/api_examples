/*
Spyderbat API UI & Public APIs

Restful APIs for use by UI & customers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sbapi

import (
	"encoding/json"
)

// ElasticRecordSchema struct for ElasticRecordSchema
type ElasticRecordSchema struct {
	Dynamic *bool `json:"dynamic,omitempty"`
	// List of properties and how they are stored
	Properties *map[string]ElasticRecordField `json:"properties,omitempty"`
}

// NewElasticRecordSchema instantiates a new ElasticRecordSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElasticRecordSchema() *ElasticRecordSchema {
	this := ElasticRecordSchema{}
	return &this
}

// NewElasticRecordSchemaWithDefaults instantiates a new ElasticRecordSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElasticRecordSchemaWithDefaults() *ElasticRecordSchema {
	this := ElasticRecordSchema{}
	return &this
}

// GetDynamic returns the Dynamic field value if set, zero value otherwise.
func (o *ElasticRecordSchema) GetDynamic() bool {
	if o == nil || o.Dynamic == nil {
		var ret bool
		return ret
	}
	return *o.Dynamic
}

// GetDynamicOk returns a tuple with the Dynamic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticRecordSchema) GetDynamicOk() (*bool, bool) {
	if o == nil || o.Dynamic == nil {
		return nil, false
	}
	return o.Dynamic, true
}

// HasDynamic returns a boolean if a field has been set.
func (o *ElasticRecordSchema) HasDynamic() bool {
	if o != nil && o.Dynamic != nil {
		return true
	}

	return false
}

// SetDynamic gets a reference to the given bool and assigns it to the Dynamic field.
func (o *ElasticRecordSchema) SetDynamic(v bool) {
	o.Dynamic = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *ElasticRecordSchema) GetProperties() map[string]ElasticRecordField {
	if o == nil || o.Properties == nil {
		var ret map[string]ElasticRecordField
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticRecordSchema) GetPropertiesOk() (*map[string]ElasticRecordField, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *ElasticRecordSchema) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]ElasticRecordField and assigns it to the Properties field.
func (o *ElasticRecordSchema) SetProperties(v map[string]ElasticRecordField) {
	o.Properties = &v
}

func (o ElasticRecordSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Dynamic != nil {
		toSerialize["dynamic"] = o.Dynamic
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	return json.Marshal(toSerialize)
}

type NullableElasticRecordSchema struct {
	value *ElasticRecordSchema
	isSet bool
}

func (v NullableElasticRecordSchema) Get() *ElasticRecordSchema {
	return v.value
}

func (v *NullableElasticRecordSchema) Set(val *ElasticRecordSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableElasticRecordSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableElasticRecordSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElasticRecordSchema(val *ElasticRecordSchema) *NullableElasticRecordSchema {
	return &NullableElasticRecordSchema{value: val, isSet: true}
}

func (v NullableElasticRecordSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElasticRecordSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


