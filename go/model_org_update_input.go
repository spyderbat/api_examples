/*
Spyderbat API UI & Public APIs

Restful APIs for use by UI & customers.

API version: 1.0.0
Contact: apisupport@spyderbat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spyderbat_api

import (
	"encoding/json"
	"time"
)

// OrgUpdateInput struct for OrgUpdateInput
type OrgUpdateInput struct {
	// Total number of active sources within the last 5 minutes
	ActiveSources *int32 `json:"active_sources,omitempty"`
	// Total number of active users within the last 7 days (which might be active on a different org)
	ActiveUsers *int32 `json:"active_users,omitempty"`
	// Name of the organization
	Name string `json:"name"`
	// Organization Type
	OrgTypeUid *string `json:"org_type_uid,omitempty"`
	// The email address of the user who owns this org
	OwnerEmail string `json:"owner_email"`
	// The user UID who owns this organization
	OwnerUid *string `json:"owner_uid,omitempty"`
	// Resource name utilized by RBAC
	ResourceName *string `json:"resource_name,omitempty"`
	ResourcePolicy *ResourcePolicy `json:"resource_policy,omitempty"`
	// User supplied tags
	Tags []string `json:"tags,omitempty"`
	// Total number of sources
	TotalSources *int32 `json:"total_sources,omitempty"`
	// Total number of users
	TotalUsers *int32 `json:"total_users,omitempty"`
	// Valid from date, the first date this object was valid
	ValidFrom *time.Time `json:"valid_from,omitempty"`
	// Valid to date, the date this object is valid to
	ValidTo *time.Time `json:"valid_to,omitempty"`
}

// NewOrgUpdateInput instantiates a new OrgUpdateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgUpdateInput(name string, ownerEmail string) *OrgUpdateInput {
	this := OrgUpdateInput{}
	this.Name = name
	this.OwnerEmail = ownerEmail
	return &this
}

// NewOrgUpdateInputWithDefaults instantiates a new OrgUpdateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgUpdateInputWithDefaults() *OrgUpdateInput {
	this := OrgUpdateInput{}
	return &this
}

// GetActiveSources returns the ActiveSources field value if set, zero value otherwise.
func (o *OrgUpdateInput) GetActiveSources() int32 {
	if o == nil || o.ActiveSources == nil {
		var ret int32
		return ret
	}
	return *o.ActiveSources
}

// GetActiveSourcesOk returns a tuple with the ActiveSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgUpdateInput) GetActiveSourcesOk() (*int32, bool) {
	if o == nil || o.ActiveSources == nil {
		return nil, false
	}
	return o.ActiveSources, true
}

// HasActiveSources returns a boolean if a field has been set.
func (o *OrgUpdateInput) HasActiveSources() bool {
	if o != nil && o.ActiveSources != nil {
		return true
	}

	return false
}

// SetActiveSources gets a reference to the given int32 and assigns it to the ActiveSources field.
func (o *OrgUpdateInput) SetActiveSources(v int32) {
	o.ActiveSources = &v
}

// GetActiveUsers returns the ActiveUsers field value if set, zero value otherwise.
func (o *OrgUpdateInput) GetActiveUsers() int32 {
	if o == nil || o.ActiveUsers == nil {
		var ret int32
		return ret
	}
	return *o.ActiveUsers
}

// GetActiveUsersOk returns a tuple with the ActiveUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgUpdateInput) GetActiveUsersOk() (*int32, bool) {
	if o == nil || o.ActiveUsers == nil {
		return nil, false
	}
	return o.ActiveUsers, true
}

// HasActiveUsers returns a boolean if a field has been set.
func (o *OrgUpdateInput) HasActiveUsers() bool {
	if o != nil && o.ActiveUsers != nil {
		return true
	}

	return false
}

// SetActiveUsers gets a reference to the given int32 and assigns it to the ActiveUsers field.
func (o *OrgUpdateInput) SetActiveUsers(v int32) {
	o.ActiveUsers = &v
}

// GetName returns the Name field value
func (o *OrgUpdateInput) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OrgUpdateInput) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OrgUpdateInput) SetName(v string) {
	o.Name = v
}

// GetOrgTypeUid returns the OrgTypeUid field value if set, zero value otherwise.
func (o *OrgUpdateInput) GetOrgTypeUid() string {
	if o == nil || o.OrgTypeUid == nil {
		var ret string
		return ret
	}
	return *o.OrgTypeUid
}

// GetOrgTypeUidOk returns a tuple with the OrgTypeUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgUpdateInput) GetOrgTypeUidOk() (*string, bool) {
	if o == nil || o.OrgTypeUid == nil {
		return nil, false
	}
	return o.OrgTypeUid, true
}

// HasOrgTypeUid returns a boolean if a field has been set.
func (o *OrgUpdateInput) HasOrgTypeUid() bool {
	if o != nil && o.OrgTypeUid != nil {
		return true
	}

	return false
}

// SetOrgTypeUid gets a reference to the given string and assigns it to the OrgTypeUid field.
func (o *OrgUpdateInput) SetOrgTypeUid(v string) {
	o.OrgTypeUid = &v
}

// GetOwnerEmail returns the OwnerEmail field value
func (o *OrgUpdateInput) GetOwnerEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OwnerEmail
}

// GetOwnerEmailOk returns a tuple with the OwnerEmail field value
// and a boolean to check if the value has been set.
func (o *OrgUpdateInput) GetOwnerEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerEmail, true
}

// SetOwnerEmail sets field value
func (o *OrgUpdateInput) SetOwnerEmail(v string) {
	o.OwnerEmail = v
}

// GetOwnerUid returns the OwnerUid field value if set, zero value otherwise.
func (o *OrgUpdateInput) GetOwnerUid() string {
	if o == nil || o.OwnerUid == nil {
		var ret string
		return ret
	}
	return *o.OwnerUid
}

// GetOwnerUidOk returns a tuple with the OwnerUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgUpdateInput) GetOwnerUidOk() (*string, bool) {
	if o == nil || o.OwnerUid == nil {
		return nil, false
	}
	return o.OwnerUid, true
}

// HasOwnerUid returns a boolean if a field has been set.
func (o *OrgUpdateInput) HasOwnerUid() bool {
	if o != nil && o.OwnerUid != nil {
		return true
	}

	return false
}

// SetOwnerUid gets a reference to the given string and assigns it to the OwnerUid field.
func (o *OrgUpdateInput) SetOwnerUid(v string) {
	o.OwnerUid = &v
}

// GetResourceName returns the ResourceName field value if set, zero value otherwise.
func (o *OrgUpdateInput) GetResourceName() string {
	if o == nil || o.ResourceName == nil {
		var ret string
		return ret
	}
	return *o.ResourceName
}

// GetResourceNameOk returns a tuple with the ResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgUpdateInput) GetResourceNameOk() (*string, bool) {
	if o == nil || o.ResourceName == nil {
		return nil, false
	}
	return o.ResourceName, true
}

// HasResourceName returns a boolean if a field has been set.
func (o *OrgUpdateInput) HasResourceName() bool {
	if o != nil && o.ResourceName != nil {
		return true
	}

	return false
}

// SetResourceName gets a reference to the given string and assigns it to the ResourceName field.
func (o *OrgUpdateInput) SetResourceName(v string) {
	o.ResourceName = &v
}

// GetResourcePolicy returns the ResourcePolicy field value if set, zero value otherwise.
func (o *OrgUpdateInput) GetResourcePolicy() ResourcePolicy {
	if o == nil || o.ResourcePolicy == nil {
		var ret ResourcePolicy
		return ret
	}
	return *o.ResourcePolicy
}

// GetResourcePolicyOk returns a tuple with the ResourcePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgUpdateInput) GetResourcePolicyOk() (*ResourcePolicy, bool) {
	if o == nil || o.ResourcePolicy == nil {
		return nil, false
	}
	return o.ResourcePolicy, true
}

// HasResourcePolicy returns a boolean if a field has been set.
func (o *OrgUpdateInput) HasResourcePolicy() bool {
	if o != nil && o.ResourcePolicy != nil {
		return true
	}

	return false
}

// SetResourcePolicy gets a reference to the given ResourcePolicy and assigns it to the ResourcePolicy field.
func (o *OrgUpdateInput) SetResourcePolicy(v ResourcePolicy) {
	o.ResourcePolicy = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *OrgUpdateInput) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgUpdateInput) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *OrgUpdateInput) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *OrgUpdateInput) SetTags(v []string) {
	o.Tags = v
}

// GetTotalSources returns the TotalSources field value if set, zero value otherwise.
func (o *OrgUpdateInput) GetTotalSources() int32 {
	if o == nil || o.TotalSources == nil {
		var ret int32
		return ret
	}
	return *o.TotalSources
}

// GetTotalSourcesOk returns a tuple with the TotalSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgUpdateInput) GetTotalSourcesOk() (*int32, bool) {
	if o == nil || o.TotalSources == nil {
		return nil, false
	}
	return o.TotalSources, true
}

// HasTotalSources returns a boolean if a field has been set.
func (o *OrgUpdateInput) HasTotalSources() bool {
	if o != nil && o.TotalSources != nil {
		return true
	}

	return false
}

// SetTotalSources gets a reference to the given int32 and assigns it to the TotalSources field.
func (o *OrgUpdateInput) SetTotalSources(v int32) {
	o.TotalSources = &v
}

// GetTotalUsers returns the TotalUsers field value if set, zero value otherwise.
func (o *OrgUpdateInput) GetTotalUsers() int32 {
	if o == nil || o.TotalUsers == nil {
		var ret int32
		return ret
	}
	return *o.TotalUsers
}

// GetTotalUsersOk returns a tuple with the TotalUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgUpdateInput) GetTotalUsersOk() (*int32, bool) {
	if o == nil || o.TotalUsers == nil {
		return nil, false
	}
	return o.TotalUsers, true
}

// HasTotalUsers returns a boolean if a field has been set.
func (o *OrgUpdateInput) HasTotalUsers() bool {
	if o != nil && o.TotalUsers != nil {
		return true
	}

	return false
}

// SetTotalUsers gets a reference to the given int32 and assigns it to the TotalUsers field.
func (o *OrgUpdateInput) SetTotalUsers(v int32) {
	o.TotalUsers = &v
}

// GetValidFrom returns the ValidFrom field value if set, zero value otherwise.
func (o *OrgUpdateInput) GetValidFrom() time.Time {
	if o == nil || o.ValidFrom == nil {
		var ret time.Time
		return ret
	}
	return *o.ValidFrom
}

// GetValidFromOk returns a tuple with the ValidFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgUpdateInput) GetValidFromOk() (*time.Time, bool) {
	if o == nil || o.ValidFrom == nil {
		return nil, false
	}
	return o.ValidFrom, true
}

// HasValidFrom returns a boolean if a field has been set.
func (o *OrgUpdateInput) HasValidFrom() bool {
	if o != nil && o.ValidFrom != nil {
		return true
	}

	return false
}

// SetValidFrom gets a reference to the given time.Time and assigns it to the ValidFrom field.
func (o *OrgUpdateInput) SetValidFrom(v time.Time) {
	o.ValidFrom = &v
}

// GetValidTo returns the ValidTo field value if set, zero value otherwise.
func (o *OrgUpdateInput) GetValidTo() time.Time {
	if o == nil || o.ValidTo == nil {
		var ret time.Time
		return ret
	}
	return *o.ValidTo
}

// GetValidToOk returns a tuple with the ValidTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgUpdateInput) GetValidToOk() (*time.Time, bool) {
	if o == nil || o.ValidTo == nil {
		return nil, false
	}
	return o.ValidTo, true
}

// HasValidTo returns a boolean if a field has been set.
func (o *OrgUpdateInput) HasValidTo() bool {
	if o != nil && o.ValidTo != nil {
		return true
	}

	return false
}

// SetValidTo gets a reference to the given time.Time and assigns it to the ValidTo field.
func (o *OrgUpdateInput) SetValidTo(v time.Time) {
	o.ValidTo = &v
}

func (o OrgUpdateInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ActiveSources != nil {
		toSerialize["active_sources"] = o.ActiveSources
	}
	if o.ActiveUsers != nil {
		toSerialize["active_users"] = o.ActiveUsers
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.OrgTypeUid != nil {
		toSerialize["org_type_uid"] = o.OrgTypeUid
	}
	if true {
		toSerialize["owner_email"] = o.OwnerEmail
	}
	if o.OwnerUid != nil {
		toSerialize["owner_uid"] = o.OwnerUid
	}
	if o.ResourceName != nil {
		toSerialize["resource_name"] = o.ResourceName
	}
	if o.ResourcePolicy != nil {
		toSerialize["resource_policy"] = o.ResourcePolicy
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.TotalSources != nil {
		toSerialize["total_sources"] = o.TotalSources
	}
	if o.TotalUsers != nil {
		toSerialize["total_users"] = o.TotalUsers
	}
	if o.ValidFrom != nil {
		toSerialize["valid_from"] = o.ValidFrom
	}
	if o.ValidTo != nil {
		toSerialize["valid_to"] = o.ValidTo
	}
	return json.Marshal(toSerialize)
}

type NullableOrgUpdateInput struct {
	value *OrgUpdateInput
	isSet bool
}

func (v NullableOrgUpdateInput) Get() *OrgUpdateInput {
	return v.value
}

func (v *NullableOrgUpdateInput) Set(val *OrgUpdateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgUpdateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgUpdateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgUpdateInput(val *OrgUpdateInput) *NullableOrgUpdateInput {
	return &NullableOrgUpdateInput{value: val, isSet: true}
}

func (v NullableOrgUpdateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgUpdateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


