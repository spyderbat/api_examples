/*
Spyderbat API UI & Public APIs

Restful APIs for use by UI & customers.

API version: 1.0.0
Contact: apisupport@spyderbat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spyderbat_api

import (
	"encoding/json"
)

// ElasticRecordField struct for ElasticRecordField
type ElasticRecordField struct {
	Dynamic *bool `json:"dynamic,omitempty"`
	Fields *map[string]ElasticRecordField `json:"fields,omitempty"`
	Index *bool `json:"index,omitempty"`
	// The properties associated with this field
	Properties *map[string]ElasticRecordField `json:"properties,omitempty"`
	Store *bool `json:"store,omitempty"`
	// The type used for indexing, keyword=matches entire seaerch term, text=partial match, ip=ip address, float=number
	Type *string `json:"type,omitempty"`
}

// NewElasticRecordField instantiates a new ElasticRecordField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElasticRecordField() *ElasticRecordField {
	this := ElasticRecordField{}
	return &this
}

// NewElasticRecordFieldWithDefaults instantiates a new ElasticRecordField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElasticRecordFieldWithDefaults() *ElasticRecordField {
	this := ElasticRecordField{}
	return &this
}

// GetDynamic returns the Dynamic field value if set, zero value otherwise.
func (o *ElasticRecordField) GetDynamic() bool {
	if o == nil || o.Dynamic == nil {
		var ret bool
		return ret
	}
	return *o.Dynamic
}

// GetDynamicOk returns a tuple with the Dynamic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticRecordField) GetDynamicOk() (*bool, bool) {
	if o == nil || o.Dynamic == nil {
		return nil, false
	}
	return o.Dynamic, true
}

// HasDynamic returns a boolean if a field has been set.
func (o *ElasticRecordField) HasDynamic() bool {
	if o != nil && o.Dynamic != nil {
		return true
	}

	return false
}

// SetDynamic gets a reference to the given bool and assigns it to the Dynamic field.
func (o *ElasticRecordField) SetDynamic(v bool) {
	o.Dynamic = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *ElasticRecordField) GetFields() map[string]ElasticRecordField {
	if o == nil || o.Fields == nil {
		var ret map[string]ElasticRecordField
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticRecordField) GetFieldsOk() (*map[string]ElasticRecordField, bool) {
	if o == nil || o.Fields == nil {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *ElasticRecordField) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given map[string]ElasticRecordField and assigns it to the Fields field.
func (o *ElasticRecordField) SetFields(v map[string]ElasticRecordField) {
	o.Fields = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *ElasticRecordField) GetIndex() bool {
	if o == nil || o.Index == nil {
		var ret bool
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticRecordField) GetIndexOk() (*bool, bool) {
	if o == nil || o.Index == nil {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *ElasticRecordField) HasIndex() bool {
	if o != nil && o.Index != nil {
		return true
	}

	return false
}

// SetIndex gets a reference to the given bool and assigns it to the Index field.
func (o *ElasticRecordField) SetIndex(v bool) {
	o.Index = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *ElasticRecordField) GetProperties() map[string]ElasticRecordField {
	if o == nil || o.Properties == nil {
		var ret map[string]ElasticRecordField
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticRecordField) GetPropertiesOk() (*map[string]ElasticRecordField, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *ElasticRecordField) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]ElasticRecordField and assigns it to the Properties field.
func (o *ElasticRecordField) SetProperties(v map[string]ElasticRecordField) {
	o.Properties = &v
}

// GetStore returns the Store field value if set, zero value otherwise.
func (o *ElasticRecordField) GetStore() bool {
	if o == nil || o.Store == nil {
		var ret bool
		return ret
	}
	return *o.Store
}

// GetStoreOk returns a tuple with the Store field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticRecordField) GetStoreOk() (*bool, bool) {
	if o == nil || o.Store == nil {
		return nil, false
	}
	return o.Store, true
}

// HasStore returns a boolean if a field has been set.
func (o *ElasticRecordField) HasStore() bool {
	if o != nil && o.Store != nil {
		return true
	}

	return false
}

// SetStore gets a reference to the given bool and assigns it to the Store field.
func (o *ElasticRecordField) SetStore(v bool) {
	o.Store = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ElasticRecordField) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticRecordField) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ElasticRecordField) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ElasticRecordField) SetType(v string) {
	o.Type = &v
}

func (o ElasticRecordField) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Dynamic != nil {
		toSerialize["dynamic"] = o.Dynamic
	}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	if o.Index != nil {
		toSerialize["index"] = o.Index
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.Store != nil {
		toSerialize["store"] = o.Store
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableElasticRecordField struct {
	value *ElasticRecordField
	isSet bool
}

func (v NullableElasticRecordField) Get() *ElasticRecordField {
	return v.value
}

func (v *NullableElasticRecordField) Set(val *ElasticRecordField) {
	v.value = val
	v.isSet = true
}

func (v NullableElasticRecordField) IsSet() bool {
	return v.isSet
}

func (v *NullableElasticRecordField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElasticRecordField(val *ElasticRecordField) *NullableElasticRecordField {
	return &NullableElasticRecordField{value: val, isSet: true}
}

func (v NullableElasticRecordField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElasticRecordField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


