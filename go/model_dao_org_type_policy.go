/*
Spyderbat API UI & Public APIs

Restful APIs for use by UI & customers.

API version: 1.0.0
Contact: apisupport@spyderbat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spyderbat_api

import (
	"encoding/json"
)

// DaoOrgTypePolicy Policy for the org
type DaoOrgTypePolicy struct {
	// Maximum number of active sources
	MaxActiveSources *int32 `json:"max_active_sources,omitempty"`
	// Maximum number of associated organizational roles
	MaxOrgRoles *int32 `json:"max_org_roles,omitempty"`
	// Name of the processing stack
	ProcessingStack *string `json:"processing_stack,omitempty"`
	// Retention period for stored data, in days
	RetentionPeriod *int32 `json:"retention_period,omitempty"`
}

// NewDaoOrgTypePolicy instantiates a new DaoOrgTypePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaoOrgTypePolicy() *DaoOrgTypePolicy {
	this := DaoOrgTypePolicy{}
	return &this
}

// NewDaoOrgTypePolicyWithDefaults instantiates a new DaoOrgTypePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaoOrgTypePolicyWithDefaults() *DaoOrgTypePolicy {
	this := DaoOrgTypePolicy{}
	return &this
}

// GetMaxActiveSources returns the MaxActiveSources field value if set, zero value otherwise.
func (o *DaoOrgTypePolicy) GetMaxActiveSources() int32 {
	if o == nil || o.MaxActiveSources == nil {
		var ret int32
		return ret
	}
	return *o.MaxActiveSources
}

// GetMaxActiveSourcesOk returns a tuple with the MaxActiveSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaoOrgTypePolicy) GetMaxActiveSourcesOk() (*int32, bool) {
	if o == nil || o.MaxActiveSources == nil {
		return nil, false
	}
	return o.MaxActiveSources, true
}

// HasMaxActiveSources returns a boolean if a field has been set.
func (o *DaoOrgTypePolicy) HasMaxActiveSources() bool {
	if o != nil && o.MaxActiveSources != nil {
		return true
	}

	return false
}

// SetMaxActiveSources gets a reference to the given int32 and assigns it to the MaxActiveSources field.
func (o *DaoOrgTypePolicy) SetMaxActiveSources(v int32) {
	o.MaxActiveSources = &v
}

// GetMaxOrgRoles returns the MaxOrgRoles field value if set, zero value otherwise.
func (o *DaoOrgTypePolicy) GetMaxOrgRoles() int32 {
	if o == nil || o.MaxOrgRoles == nil {
		var ret int32
		return ret
	}
	return *o.MaxOrgRoles
}

// GetMaxOrgRolesOk returns a tuple with the MaxOrgRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaoOrgTypePolicy) GetMaxOrgRolesOk() (*int32, bool) {
	if o == nil || o.MaxOrgRoles == nil {
		return nil, false
	}
	return o.MaxOrgRoles, true
}

// HasMaxOrgRoles returns a boolean if a field has been set.
func (o *DaoOrgTypePolicy) HasMaxOrgRoles() bool {
	if o != nil && o.MaxOrgRoles != nil {
		return true
	}

	return false
}

// SetMaxOrgRoles gets a reference to the given int32 and assigns it to the MaxOrgRoles field.
func (o *DaoOrgTypePolicy) SetMaxOrgRoles(v int32) {
	o.MaxOrgRoles = &v
}

// GetProcessingStack returns the ProcessingStack field value if set, zero value otherwise.
func (o *DaoOrgTypePolicy) GetProcessingStack() string {
	if o == nil || o.ProcessingStack == nil {
		var ret string
		return ret
	}
	return *o.ProcessingStack
}

// GetProcessingStackOk returns a tuple with the ProcessingStack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaoOrgTypePolicy) GetProcessingStackOk() (*string, bool) {
	if o == nil || o.ProcessingStack == nil {
		return nil, false
	}
	return o.ProcessingStack, true
}

// HasProcessingStack returns a boolean if a field has been set.
func (o *DaoOrgTypePolicy) HasProcessingStack() bool {
	if o != nil && o.ProcessingStack != nil {
		return true
	}

	return false
}

// SetProcessingStack gets a reference to the given string and assigns it to the ProcessingStack field.
func (o *DaoOrgTypePolicy) SetProcessingStack(v string) {
	o.ProcessingStack = &v
}

// GetRetentionPeriod returns the RetentionPeriod field value if set, zero value otherwise.
func (o *DaoOrgTypePolicy) GetRetentionPeriod() int32 {
	if o == nil || o.RetentionPeriod == nil {
		var ret int32
		return ret
	}
	return *o.RetentionPeriod
}

// GetRetentionPeriodOk returns a tuple with the RetentionPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaoOrgTypePolicy) GetRetentionPeriodOk() (*int32, bool) {
	if o == nil || o.RetentionPeriod == nil {
		return nil, false
	}
	return o.RetentionPeriod, true
}

// HasRetentionPeriod returns a boolean if a field has been set.
func (o *DaoOrgTypePolicy) HasRetentionPeriod() bool {
	if o != nil && o.RetentionPeriod != nil {
		return true
	}

	return false
}

// SetRetentionPeriod gets a reference to the given int32 and assigns it to the RetentionPeriod field.
func (o *DaoOrgTypePolicy) SetRetentionPeriod(v int32) {
	o.RetentionPeriod = &v
}

func (o DaoOrgTypePolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MaxActiveSources != nil {
		toSerialize["max_active_sources"] = o.MaxActiveSources
	}
	if o.MaxOrgRoles != nil {
		toSerialize["max_org_roles"] = o.MaxOrgRoles
	}
	if o.ProcessingStack != nil {
		toSerialize["processing_stack"] = o.ProcessingStack
	}
	if o.RetentionPeriod != nil {
		toSerialize["retention_period"] = o.RetentionPeriod
	}
	return json.Marshal(toSerialize)
}

type NullableDaoOrgTypePolicy struct {
	value *DaoOrgTypePolicy
	isSet bool
}

func (v NullableDaoOrgTypePolicy) Get() *DaoOrgTypePolicy {
	return v.value
}

func (v *NullableDaoOrgTypePolicy) Set(val *DaoOrgTypePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableDaoOrgTypePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableDaoOrgTypePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaoOrgTypePolicy(val *DaoOrgTypePolicy) *NullableDaoOrgTypePolicy {
	return &NullableDaoOrgTypePolicy{value: val, isSet: true}
}

func (v NullableDaoOrgTypePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaoOrgTypePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


