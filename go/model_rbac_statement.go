/*
Spyderbat API UI & Public APIs

Restful APIs for use by UI & customers.

API version: 1.0.0
Contact: apisupport@spyderbat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sbapi

import (
	"encoding/json"
)

// RbacStatement struct for RbacStatement
type RbacStatement struct {
	// The actions that may be performed
	Actions []string `json:"actions,omitempty"`
	// Additional conditions which may be applied
	Condition map[string]interface{} `json:"condition,omitempty"`
	// The effect of the statement, i.e. allow or deny
	Effect string `json:"effect"`
	// The resource the statement applies to
	Resources []string `json:"resources,omitempty"`
	// Statement ID, used to identify the statement in audit logs
	Sid string `json:"sid"`
}

// NewRbacStatement instantiates a new RbacStatement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRbacStatement(effect string, sid string) *RbacStatement {
	this := RbacStatement{}
	this.Effect = effect
	this.Sid = sid
	return &this
}

// NewRbacStatementWithDefaults instantiates a new RbacStatement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRbacStatementWithDefaults() *RbacStatement {
	this := RbacStatement{}
	return &this
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *RbacStatement) GetActions() []string {
	if o == nil || o.Actions == nil {
		var ret []string
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RbacStatement) GetActionsOk() ([]string, bool) {
	if o == nil || o.Actions == nil {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *RbacStatement) HasActions() bool {
	if o != nil && o.Actions != nil {
		return true
	}

	return false
}

// SetActions gets a reference to the given []string and assigns it to the Actions field.
func (o *RbacStatement) SetActions(v []string) {
	o.Actions = v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *RbacStatement) GetCondition() map[string]interface{} {
	if o == nil || o.Condition == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RbacStatement) GetConditionOk() (map[string]interface{}, bool) {
	if o == nil || o.Condition == nil {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *RbacStatement) HasCondition() bool {
	if o != nil && o.Condition != nil {
		return true
	}

	return false
}

// SetCondition gets a reference to the given map[string]interface{} and assigns it to the Condition field.
func (o *RbacStatement) SetCondition(v map[string]interface{}) {
	o.Condition = v
}

// GetEffect returns the Effect field value
func (o *RbacStatement) GetEffect() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Effect
}

// GetEffectOk returns a tuple with the Effect field value
// and a boolean to check if the value has been set.
func (o *RbacStatement) GetEffectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Effect, true
}

// SetEffect sets field value
func (o *RbacStatement) SetEffect(v string) {
	o.Effect = v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *RbacStatement) GetResources() []string {
	if o == nil || o.Resources == nil {
		var ret []string
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RbacStatement) GetResourcesOk() ([]string, bool) {
	if o == nil || o.Resources == nil {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *RbacStatement) HasResources() bool {
	if o != nil && o.Resources != nil {
		return true
	}

	return false
}

// SetResources gets a reference to the given []string and assigns it to the Resources field.
func (o *RbacStatement) SetResources(v []string) {
	o.Resources = v
}

// GetSid returns the Sid field value
func (o *RbacStatement) GetSid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sid
}

// GetSidOk returns a tuple with the Sid field value
// and a boolean to check if the value has been set.
func (o *RbacStatement) GetSidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sid, true
}

// SetSid sets field value
func (o *RbacStatement) SetSid(v string) {
	o.Sid = v
}

func (o RbacStatement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Actions != nil {
		toSerialize["actions"] = o.Actions
	}
	if o.Condition != nil {
		toSerialize["condition"] = o.Condition
	}
	if true {
		toSerialize["effect"] = o.Effect
	}
	if o.Resources != nil {
		toSerialize["resources"] = o.Resources
	}
	if true {
		toSerialize["sid"] = o.Sid
	}
	return json.Marshal(toSerialize)
}

type NullableRbacStatement struct {
	value *RbacStatement
	isSet bool
}

func (v NullableRbacStatement) Get() *RbacStatement {
	return v.value
}

func (v *NullableRbacStatement) Set(val *RbacStatement) {
	v.value = val
	v.isSet = true
}

func (v NullableRbacStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableRbacStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRbacStatement(val *RbacStatement) *NullableRbacStatement {
	return &NullableRbacStatement{value: val, isSet: true}
}

func (v NullableRbacStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRbacStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


