/*
Spyderbat API UI & Public APIs

Restful APIs for use by UI & customers.

API version: 1.0.0
Contact: apisupport@spyderbat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sbapi

import (
	"encoding/json"
)

// OrcApiBatWork struct for OrcApiBatWork
type OrcApiBatWork struct {
	// arguments to pass to the commandline
	Arguments []string `json:"arguments,omitempty"`
	// ID of this specific type of bat, specified by Spyderbat
	BatUid *string `json:"bat_uid,omitempty"`
	// Execute this bat or not?
	Enabled *bool `json:"enabled,omitempty"`
	// input parameters to the bat
	Parameters map[string]interface{} `json:"parameters,omitempty"`
	// Order in which to start this bat
	StartOrder *int32 `json:"start_order,omitempty"`
	// uid of the specific bat work for a specific agent
	Uid *string `json:"uid,omitempty"`
	// Newest version of the bat from the repository
	Version map[string]interface{} `json:"version,omitempty"`
}

// NewOrcApiBatWork instantiates a new OrcApiBatWork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrcApiBatWork() *OrcApiBatWork {
	this := OrcApiBatWork{}
	return &this
}

// NewOrcApiBatWorkWithDefaults instantiates a new OrcApiBatWork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrcApiBatWorkWithDefaults() *OrcApiBatWork {
	this := OrcApiBatWork{}
	return &this
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *OrcApiBatWork) GetArguments() []string {
	if o == nil || o.Arguments == nil {
		var ret []string
		return ret
	}
	return o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrcApiBatWork) GetArgumentsOk() ([]string, bool) {
	if o == nil || o.Arguments == nil {
		return nil, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *OrcApiBatWork) HasArguments() bool {
	if o != nil && o.Arguments != nil {
		return true
	}

	return false
}

// SetArguments gets a reference to the given []string and assigns it to the Arguments field.
func (o *OrcApiBatWork) SetArguments(v []string) {
	o.Arguments = v
}

// GetBatUid returns the BatUid field value if set, zero value otherwise.
func (o *OrcApiBatWork) GetBatUid() string {
	if o == nil || o.BatUid == nil {
		var ret string
		return ret
	}
	return *o.BatUid
}

// GetBatUidOk returns a tuple with the BatUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrcApiBatWork) GetBatUidOk() (*string, bool) {
	if o == nil || o.BatUid == nil {
		return nil, false
	}
	return o.BatUid, true
}

// HasBatUid returns a boolean if a field has been set.
func (o *OrcApiBatWork) HasBatUid() bool {
	if o != nil && o.BatUid != nil {
		return true
	}

	return false
}

// SetBatUid gets a reference to the given string and assigns it to the BatUid field.
func (o *OrcApiBatWork) SetBatUid(v string) {
	o.BatUid = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *OrcApiBatWork) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrcApiBatWork) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *OrcApiBatWork) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *OrcApiBatWork) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *OrcApiBatWork) GetParameters() map[string]interface{} {
	if o == nil || o.Parameters == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrcApiBatWork) GetParametersOk() (map[string]interface{}, bool) {
	if o == nil || o.Parameters == nil {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *OrcApiBatWork) HasParameters() bool {
	if o != nil && o.Parameters != nil {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]interface{} and assigns it to the Parameters field.
func (o *OrcApiBatWork) SetParameters(v map[string]interface{}) {
	o.Parameters = v
}

// GetStartOrder returns the StartOrder field value if set, zero value otherwise.
func (o *OrcApiBatWork) GetStartOrder() int32 {
	if o == nil || o.StartOrder == nil {
		var ret int32
		return ret
	}
	return *o.StartOrder
}

// GetStartOrderOk returns a tuple with the StartOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrcApiBatWork) GetStartOrderOk() (*int32, bool) {
	if o == nil || o.StartOrder == nil {
		return nil, false
	}
	return o.StartOrder, true
}

// HasStartOrder returns a boolean if a field has been set.
func (o *OrcApiBatWork) HasStartOrder() bool {
	if o != nil && o.StartOrder != nil {
		return true
	}

	return false
}

// SetStartOrder gets a reference to the given int32 and assigns it to the StartOrder field.
func (o *OrcApiBatWork) SetStartOrder(v int32) {
	o.StartOrder = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *OrcApiBatWork) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrcApiBatWork) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *OrcApiBatWork) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *OrcApiBatWork) SetUid(v string) {
	o.Uid = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *OrcApiBatWork) GetVersion() map[string]interface{} {
	if o == nil || o.Version == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrcApiBatWork) GetVersionOk() (map[string]interface{}, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *OrcApiBatWork) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given map[string]interface{} and assigns it to the Version field.
func (o *OrcApiBatWork) SetVersion(v map[string]interface{}) {
	o.Version = v
}

func (o OrcApiBatWork) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Arguments != nil {
		toSerialize["arguments"] = o.Arguments
	}
	if o.BatUid != nil {
		toSerialize["bat_uid"] = o.BatUid
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	if o.StartOrder != nil {
		toSerialize["start_order"] = o.StartOrder
	}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableOrcApiBatWork struct {
	value *OrcApiBatWork
	isSet bool
}

func (v NullableOrcApiBatWork) Get() *OrcApiBatWork {
	return v.value
}

func (v *NullableOrcApiBatWork) Set(val *OrcApiBatWork) {
	v.value = val
	v.isSet = true
}

func (v NullableOrcApiBatWork) IsSet() bool {
	return v.isSet
}

func (v *NullableOrcApiBatWork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrcApiBatWork(val *OrcApiBatWork) *NullableOrcApiBatWork {
	return &NullableOrcApiBatWork{value: val, isSet: true}
}

func (v NullableOrcApiBatWork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrcApiBatWork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


