/*
Spyderbat API UI & Public APIs

Restful APIs for use by UI & customers.

API version: 1.0.0
Contact: apisupport@spyderbat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spyderbat_api

import (
	"encoding/json"
)

// DaoOrgUser struct for DaoOrgUser
type DaoOrgUser struct {
	// The email address of the user who belongs to this org
	Email string `json:"email"`
	// The roles of the user who belongs to this org
	Roles []string `json:"roles"`
}

// NewDaoOrgUser instantiates a new DaoOrgUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaoOrgUser(email string, roles []string) *DaoOrgUser {
	this := DaoOrgUser{}
	this.Email = email
	this.Roles = roles
	return &this
}

// NewDaoOrgUserWithDefaults instantiates a new DaoOrgUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaoOrgUserWithDefaults() *DaoOrgUser {
	this := DaoOrgUser{}
	return &this
}

// GetEmail returns the Email field value
func (o *DaoOrgUser) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *DaoOrgUser) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *DaoOrgUser) SetEmail(v string) {
	o.Email = v
}

// GetRoles returns the Roles field value
func (o *DaoOrgUser) GetRoles() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *DaoOrgUser) GetRolesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Roles, true
}

// SetRoles sets field value
func (o *DaoOrgUser) SetRoles(v []string) {
	o.Roles = v
}

func (o DaoOrgUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["roles"] = o.Roles
	}
	return json.Marshal(toSerialize)
}

type NullableDaoOrgUser struct {
	value *DaoOrgUser
	isSet bool
}

func (v NullableDaoOrgUser) Get() *DaoOrgUser {
	return v.value
}

func (v *NullableDaoOrgUser) Set(val *DaoOrgUser) {
	v.value = val
	v.isSet = true
}

func (v NullableDaoOrgUser) IsSet() bool {
	return v.isSet
}

func (v *NullableDaoOrgUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaoOrgUser(val *DaoOrgUser) *NullableDaoOrgUser {
	return &NullableDaoOrgUser{value: val, isSet: true}
}

func (v NullableDaoOrgUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaoOrgUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


