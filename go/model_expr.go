/*
Spyderbat API UI & Public APIs

Restful APIs for use by UI & customers.

API version: 1.0.0
Contact: apisupport@spyderbat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spyderbat_api

import (
	"encoding/json"
)

// Expr Data which matches this expression are returned
type Expr struct {
	// returns true if all of the contained expressions are true
	And []Expr `json:"and,omitempty"`
	// returns true if the property is a string and contains the specified value
	ContainsStr *string `json:"contains_str,omitempty"`
	// returns true if the property matches the supplied value
	Equals interface{} `json:"equals,omitempty"`
	// returns true if the property exists
	Exists *bool `json:"exists,omitempty"`
	// returns true if the property is a number and is greater than this value
	GreaterThan interface{} `json:"greater_than,omitempty"`
	// returns true if the property is a string and has the specified prefix
	HasPrefix *string `json:"has_prefix,omitempty"`
	// returns true if the property is a string and has the specified suffix
	HasSuffix *string `json:"has_suffix,omitempty"`
	// returns true if the property matches any of the values specified
	In []interface{} `json:"in,omitempty"`
	// returns true if te property is a number and is less than this value
	LessThan interface{} `json:"less_than,omitempty"`
	Not *Expr `json:"not,omitempty"`
	// returns true if any of the contained expressions are true
	Or []Expr `json:"or,omitempty"`
	// property to match against, in dotted property notation
	Property *string `json:"property,omitempty"`
	// returns true if the property is a string and matches the specified regex
	ReMatch *string `json:"re_match,omitempty"`
	// matches only records with the specified schema
	Schema *string `json:"schema,omitempty"`
	TimeRange *RstreamTimeRange `json:"time_range,omitempty"`
}

// NewExpr instantiates a new Expr object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpr() *Expr {
	this := Expr{}
	return &this
}

// NewExprWithDefaults instantiates a new Expr object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExprWithDefaults() *Expr {
	this := Expr{}
	return &this
}

// GetAnd returns the And field value if set, zero value otherwise.
func (o *Expr) GetAnd() []Expr {
	if o == nil || o.And == nil {
		var ret []Expr
		return ret
	}
	return o.And
}

// GetAndOk returns a tuple with the And field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expr) GetAndOk() ([]Expr, bool) {
	if o == nil || o.And == nil {
		return nil, false
	}
	return o.And, true
}

// HasAnd returns a boolean if a field has been set.
func (o *Expr) HasAnd() bool {
	if o != nil && o.And != nil {
		return true
	}

	return false
}

// SetAnd gets a reference to the given []Expr and assigns it to the And field.
func (o *Expr) SetAnd(v []Expr) {
	o.And = v
}

// GetContainsStr returns the ContainsStr field value if set, zero value otherwise.
func (o *Expr) GetContainsStr() string {
	if o == nil || o.ContainsStr == nil {
		var ret string
		return ret
	}
	return *o.ContainsStr
}

// GetContainsStrOk returns a tuple with the ContainsStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expr) GetContainsStrOk() (*string, bool) {
	if o == nil || o.ContainsStr == nil {
		return nil, false
	}
	return o.ContainsStr, true
}

// HasContainsStr returns a boolean if a field has been set.
func (o *Expr) HasContainsStr() bool {
	if o != nil && o.ContainsStr != nil {
		return true
	}

	return false
}

// SetContainsStr gets a reference to the given string and assigns it to the ContainsStr field.
func (o *Expr) SetContainsStr(v string) {
	o.ContainsStr = &v
}

// GetEquals returns the Equals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Expr) GetEquals() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Equals
}

// GetEqualsOk returns a tuple with the Equals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Expr) GetEqualsOk() (*interface{}, bool) {
	if o == nil || o.Equals == nil {
		return nil, false
	}
	return &o.Equals, true
}

// HasEquals returns a boolean if a field has been set.
func (o *Expr) HasEquals() bool {
	if o != nil && o.Equals != nil {
		return true
	}

	return false
}

// SetEquals gets a reference to the given interface{} and assigns it to the Equals field.
func (o *Expr) SetEquals(v interface{}) {
	o.Equals = v
}

// GetExists returns the Exists field value if set, zero value otherwise.
func (o *Expr) GetExists() bool {
	if o == nil || o.Exists == nil {
		var ret bool
		return ret
	}
	return *o.Exists
}

// GetExistsOk returns a tuple with the Exists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expr) GetExistsOk() (*bool, bool) {
	if o == nil || o.Exists == nil {
		return nil, false
	}
	return o.Exists, true
}

// HasExists returns a boolean if a field has been set.
func (o *Expr) HasExists() bool {
	if o != nil && o.Exists != nil {
		return true
	}

	return false
}

// SetExists gets a reference to the given bool and assigns it to the Exists field.
func (o *Expr) SetExists(v bool) {
	o.Exists = &v
}

// GetGreaterThan returns the GreaterThan field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Expr) GetGreaterThan() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.GreaterThan
}

// GetGreaterThanOk returns a tuple with the GreaterThan field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Expr) GetGreaterThanOk() (*interface{}, bool) {
	if o == nil || o.GreaterThan == nil {
		return nil, false
	}
	return &o.GreaterThan, true
}

// HasGreaterThan returns a boolean if a field has been set.
func (o *Expr) HasGreaterThan() bool {
	if o != nil && o.GreaterThan != nil {
		return true
	}

	return false
}

// SetGreaterThan gets a reference to the given interface{} and assigns it to the GreaterThan field.
func (o *Expr) SetGreaterThan(v interface{}) {
	o.GreaterThan = v
}

// GetHasPrefix returns the HasPrefix field value if set, zero value otherwise.
func (o *Expr) GetHasPrefix() string {
	if o == nil || o.HasPrefix == nil {
		var ret string
		return ret
	}
	return *o.HasPrefix
}

// GetHasPrefixOk returns a tuple with the HasPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expr) GetHasPrefixOk() (*string, bool) {
	if o == nil || o.HasPrefix == nil {
		return nil, false
	}
	return o.HasPrefix, true
}

// HasHasPrefix returns a boolean if a field has been set.
func (o *Expr) HasHasPrefix() bool {
	if o != nil && o.HasPrefix != nil {
		return true
	}

	return false
}

// SetHasPrefix gets a reference to the given string and assigns it to the HasPrefix field.
func (o *Expr) SetHasPrefix(v string) {
	o.HasPrefix = &v
}

// GetHasSuffix returns the HasSuffix field value if set, zero value otherwise.
func (o *Expr) GetHasSuffix() string {
	if o == nil || o.HasSuffix == nil {
		var ret string
		return ret
	}
	return *o.HasSuffix
}

// GetHasSuffixOk returns a tuple with the HasSuffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expr) GetHasSuffixOk() (*string, bool) {
	if o == nil || o.HasSuffix == nil {
		return nil, false
	}
	return o.HasSuffix, true
}

// HasHasSuffix returns a boolean if a field has been set.
func (o *Expr) HasHasSuffix() bool {
	if o != nil && o.HasSuffix != nil {
		return true
	}

	return false
}

// SetHasSuffix gets a reference to the given string and assigns it to the HasSuffix field.
func (o *Expr) SetHasSuffix(v string) {
	o.HasSuffix = &v
}

// GetIn returns the In field value if set, zero value otherwise.
func (o *Expr) GetIn() []interface{} {
	if o == nil || o.In == nil {
		var ret []interface{}
		return ret
	}
	return o.In
}

// GetInOk returns a tuple with the In field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expr) GetInOk() ([]interface{}, bool) {
	if o == nil || o.In == nil {
		return nil, false
	}
	return o.In, true
}

// HasIn returns a boolean if a field has been set.
func (o *Expr) HasIn() bool {
	if o != nil && o.In != nil {
		return true
	}

	return false
}

// SetIn gets a reference to the given []interface{} and assigns it to the In field.
func (o *Expr) SetIn(v []interface{}) {
	o.In = v
}

// GetLessThan returns the LessThan field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Expr) GetLessThan() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.LessThan
}

// GetLessThanOk returns a tuple with the LessThan field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Expr) GetLessThanOk() (*interface{}, bool) {
	if o == nil || o.LessThan == nil {
		return nil, false
	}
	return &o.LessThan, true
}

// HasLessThan returns a boolean if a field has been set.
func (o *Expr) HasLessThan() bool {
	if o != nil && o.LessThan != nil {
		return true
	}

	return false
}

// SetLessThan gets a reference to the given interface{} and assigns it to the LessThan field.
func (o *Expr) SetLessThan(v interface{}) {
	o.LessThan = v
}

// GetNot returns the Not field value if set, zero value otherwise.
func (o *Expr) GetNot() Expr {
	if o == nil || o.Not == nil {
		var ret Expr
		return ret
	}
	return *o.Not
}

// GetNotOk returns a tuple with the Not field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expr) GetNotOk() (*Expr, bool) {
	if o == nil || o.Not == nil {
		return nil, false
	}
	return o.Not, true
}

// HasNot returns a boolean if a field has been set.
func (o *Expr) HasNot() bool {
	if o != nil && o.Not != nil {
		return true
	}

	return false
}

// SetNot gets a reference to the given Expr and assigns it to the Not field.
func (o *Expr) SetNot(v Expr) {
	o.Not = &v
}

// GetOr returns the Or field value if set, zero value otherwise.
func (o *Expr) GetOr() []Expr {
	if o == nil || o.Or == nil {
		var ret []Expr
		return ret
	}
	return o.Or
}

// GetOrOk returns a tuple with the Or field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expr) GetOrOk() ([]Expr, bool) {
	if o == nil || o.Or == nil {
		return nil, false
	}
	return o.Or, true
}

// HasOr returns a boolean if a field has been set.
func (o *Expr) HasOr() bool {
	if o != nil && o.Or != nil {
		return true
	}

	return false
}

// SetOr gets a reference to the given []Expr and assigns it to the Or field.
func (o *Expr) SetOr(v []Expr) {
	o.Or = v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *Expr) GetProperty() string {
	if o == nil || o.Property == nil {
		var ret string
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expr) GetPropertyOk() (*string, bool) {
	if o == nil || o.Property == nil {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *Expr) HasProperty() bool {
	if o != nil && o.Property != nil {
		return true
	}

	return false
}

// SetProperty gets a reference to the given string and assigns it to the Property field.
func (o *Expr) SetProperty(v string) {
	o.Property = &v
}

// GetReMatch returns the ReMatch field value if set, zero value otherwise.
func (o *Expr) GetReMatch() string {
	if o == nil || o.ReMatch == nil {
		var ret string
		return ret
	}
	return *o.ReMatch
}

// GetReMatchOk returns a tuple with the ReMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expr) GetReMatchOk() (*string, bool) {
	if o == nil || o.ReMatch == nil {
		return nil, false
	}
	return o.ReMatch, true
}

// HasReMatch returns a boolean if a field has been set.
func (o *Expr) HasReMatch() bool {
	if o != nil && o.ReMatch != nil {
		return true
	}

	return false
}

// SetReMatch gets a reference to the given string and assigns it to the ReMatch field.
func (o *Expr) SetReMatch(v string) {
	o.ReMatch = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *Expr) GetSchema() string {
	if o == nil || o.Schema == nil {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expr) GetSchemaOk() (*string, bool) {
	if o == nil || o.Schema == nil {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *Expr) HasSchema() bool {
	if o != nil && o.Schema != nil {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *Expr) SetSchema(v string) {
	o.Schema = &v
}

// GetTimeRange returns the TimeRange field value if set, zero value otherwise.
func (o *Expr) GetTimeRange() RstreamTimeRange {
	if o == nil || o.TimeRange == nil {
		var ret RstreamTimeRange
		return ret
	}
	return *o.TimeRange
}

// GetTimeRangeOk returns a tuple with the TimeRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Expr) GetTimeRangeOk() (*RstreamTimeRange, bool) {
	if o == nil || o.TimeRange == nil {
		return nil, false
	}
	return o.TimeRange, true
}

// HasTimeRange returns a boolean if a field has been set.
func (o *Expr) HasTimeRange() bool {
	if o != nil && o.TimeRange != nil {
		return true
	}

	return false
}

// SetTimeRange gets a reference to the given RstreamTimeRange and assigns it to the TimeRange field.
func (o *Expr) SetTimeRange(v RstreamTimeRange) {
	o.TimeRange = &v
}

func (o Expr) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.And != nil {
		toSerialize["and"] = o.And
	}
	if o.ContainsStr != nil {
		toSerialize["contains_str"] = o.ContainsStr
	}
	if o.Equals != nil {
		toSerialize["equals"] = o.Equals
	}
	if o.Exists != nil {
		toSerialize["exists"] = o.Exists
	}
	if o.GreaterThan != nil {
		toSerialize["greater_than"] = o.GreaterThan
	}
	if o.HasPrefix != nil {
		toSerialize["has_prefix"] = o.HasPrefix
	}
	if o.HasSuffix != nil {
		toSerialize["has_suffix"] = o.HasSuffix
	}
	if o.In != nil {
		toSerialize["in"] = o.In
	}
	if o.LessThan != nil {
		toSerialize["less_than"] = o.LessThan
	}
	if o.Not != nil {
		toSerialize["not"] = o.Not
	}
	if o.Or != nil {
		toSerialize["or"] = o.Or
	}
	if o.Property != nil {
		toSerialize["property"] = o.Property
	}
	if o.ReMatch != nil {
		toSerialize["re_match"] = o.ReMatch
	}
	if o.Schema != nil {
		toSerialize["schema"] = o.Schema
	}
	if o.TimeRange != nil {
		toSerialize["time_range"] = o.TimeRange
	}
	return json.Marshal(toSerialize)
}

type NullableExpr struct {
	value *Expr
	isSet bool
}

func (v NullableExpr) Get() *Expr {
	return v.value
}

func (v *NullableExpr) Set(val *Expr) {
	v.value = val
	v.isSet = true
}

func (v NullableExpr) IsSet() bool {
	return v.isSet
}

func (v *NullableExpr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpr(val *Expr) *NullableExpr {
	return &NullableExpr{value: val, isSet: true}
}

func (v NullableExpr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


