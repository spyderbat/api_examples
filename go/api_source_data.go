/*
Spyderbat API UI & Public APIs

Restful APIs for use by UI & customers.

API version: 1.0.0
Contact: apisupport@spyderbat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sbapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// SourceDataApiService SourceDataApi service
type SourceDataApiService service

type ApiSrcDataQueryRequest struct {
	ctx context.Context
	ApiService *SourceDataApiService
	srcDataQueryInput *SrcDataQueryInput
}

func (r ApiSrcDataQueryRequest) SrcDataQueryInput(srcDataQueryInput SrcDataQueryInput) ApiSrcDataQueryRequest {
	r.srcDataQueryInput = &srcDataQueryInput
	return r
}

func (r ApiSrcDataQueryRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.SrcDataQueryExecute(r)
}

/*
SrcDataQuery Query source data


Allows querying of the source data, data is stored as 'records' which are returned as json objects, in nd-json (see ndjson.org) format. 

* Data is returned as it is matched, and no ordering guarentees exist. 
* The call completes after it has finished searching for matching records. 
* The query expression is limited to seaching a 24 hour period of time, it is the callers responsibility to construct an appropriate 24 hour range.
* Documentation for the returned spydergraph datatype can be found at https://app.spyderbat.com/schema/spydergraph/index.html

* The user must have both the *org.ListSourceData* action on the org and *source_data.Query* action on the source



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSrcDataQueryRequest
*/
func (a *SourceDataApiService) SrcDataQuery(ctx context.Context) ApiSrcDataQueryRequest {
	return ApiSrcDataQueryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *SourceDataApiService) SrcDataQueryExecute(r ApiSrcDataQueryRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SourceDataApiService.SrcDataQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/source/query/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/x-ndjson", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.srcDataQueryInput
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSrcDataQueryV2Request struct {
	ctx context.Context
	ApiService *SourceDataApiService
	orgUID string
	dt *string
	e *string
	et *float64
	id *[]string
	pj *[]string
	q *string
	qf *int32
	qs *int32
	rr *bool
	src *string
	st *float64
}

// DataType to query
func (r ApiSrcDataQueryV2Request) Dt(dt string) ApiSrcDataQueryV2Request {
	r.dt = &dt
	return r
}

// Data which matches this expression are returned, as a json object
func (r ApiSrcDataQueryV2Request) E(e string) ApiSrcDataQueryV2Request {
	r.e = &e
	return r
}

// Time in unix epoch time, records &lt; time are returned
func (r ApiSrcDataQueryV2Request) Et(et float64) ApiSrcDataQueryV2Request {
	r.et = &et
	return r
}

// List of IDs to resolve
func (r ApiSrcDataQueryV2Request) Id(id []string) ApiSrcDataQueryV2Request {
	r.id = &id
	return r
}

// Array of top level object properties which will be emitted, if none are specified all will be emitted; ex pj&#x3D;id&amp;pj&#x3D;version
func (r ApiSrcDataQueryV2Request) Pj(pj []string) ApiSrcDataQueryV2Request {
	r.pj = &pj
	return r
}

// Lucene based search query
func (r ApiSrcDataQueryV2Request) Q(q string) ApiSrcDataQueryV2Request {
	r.q = &q
	return r
}

// Where to start the query in the result set from
func (r ApiSrcDataQueryV2Request) Qf(qf int32) ApiSrcDataQueryV2Request {
	r.qf = &qf
	return r
}

// Size of the query result set
func (r ApiSrcDataQueryV2Request) Qs(qs int32) ApiSrcDataQueryV2Request {
	r.qs = &qs
	return r
}

// Return rptrs mixed with the data
func (r ApiSrcDataQueryV2Request) Rr(rr bool) ApiSrcDataQueryV2Request {
	r.rr = &rr
	return r
}

// Source UID to query
func (r ApiSrcDataQueryV2Request) Src(src string) ApiSrcDataQueryV2Request {
	r.src = &src
	return r
}

// Time in unix epoch time, records &gt;&#x3D; time are returned
func (r ApiSrcDataQueryV2Request) St(st float64) ApiSrcDataQueryV2Request {
	r.st = &st
	return r
}

func (r ApiSrcDataQueryV2Request) Execute() (string, *http.Response, error) {
	return r.ApiService.SrcDataQueryV2Execute(r)
}

/*
SrcDataQueryV2 Query source data

Same as the post query above except results are cached

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgUID Organization UID to query
 @return ApiSrcDataQueryV2Request
*/
func (a *SourceDataApiService) SrcDataQueryV2(ctx context.Context, orgUID string) ApiSrcDataQueryV2Request {
	return ApiSrcDataQueryV2Request{
		ApiService: a,
		ctx: ctx,
		orgUID: orgUID,
	}
}

// Execute executes the request
//  @return string
func (a *SourceDataApiService) SrcDataQueryV2Execute(r ApiSrcDataQueryV2Request) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SourceDataApiService.SrcDataQueryV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/org/{orgUID}/data/"
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.orgUID) > 64 {
		return localVarReturnValue, nil, reportError("orgUID must have less than 64 elements")
	}
	if r.dt == nil {
		return localVarReturnValue, nil, reportError("dt is required and must be specified")
	}
	if strlen(*r.dt) > 24 {
		return localVarReturnValue, nil, reportError("dt must have less than 24 elements")
	}

	localVarQueryParams.Add("dt", parameterToString(*r.dt, ""))
	if r.e != nil {
		localVarQueryParams.Add("e", parameterToString(*r.e, ""))
	}
	if r.et != nil {
		localVarQueryParams.Add("et", parameterToString(*r.et, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.pj != nil {
		t := *r.pj
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("pj", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("pj", parameterToString(t, "multi"))
		}
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.qf != nil {
		localVarQueryParams.Add("qf", parameterToString(*r.qf, ""))
	}
	if r.qs != nil {
		localVarQueryParams.Add("qs", parameterToString(*r.qs, ""))
	}
	if r.rr != nil {
		localVarQueryParams.Add("rr", parameterToString(*r.rr, ""))
	}
	if r.src != nil {
		localVarQueryParams.Add("src", parameterToString(*r.src, ""))
	}
	if r.st != nil {
		localVarQueryParams.Add("st", parameterToString(*r.st, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/x-ndjson", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSrcSendDataRequest struct {
	ctx context.Context
	ApiService *SourceDataApiService
	dataType string
	orgUID string
	sourceUID string
}

func (r ApiSrcSendDataRequest) Execute() (*http.Response, error) {
	return r.ApiService.SrcSendDataExecute(r)
}

/*
SrcSendData Send data to a source, this is expected to be gzip compressed nd-json. The 'Content-Encoding' header should be specified with a value of 'gzip'

Sends data to a source

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataType
 @param orgUID
 @param sourceUID
 @return ApiSrcSendDataRequest
*/
func (a *SourceDataApiService) SrcSendData(ctx context.Context, dataType string, orgUID string, sourceUID string) ApiSrcSendDataRequest {
	return ApiSrcSendDataRequest{
		ApiService: a,
		ctx: ctx,
		dataType: dataType,
		orgUID: orgUID,
		sourceUID: sourceUID,
	}
}

// Execute executes the request
func (a *SourceDataApiService) SrcSendDataExecute(r ApiSrcSendDataRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SourceDataApiService.SrcSendData")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/org/{orgUID}/source/{sourceUID}/data/{dataType}"
	localVarPath = strings.Replace(localVarPath, "{"+"dataType"+"}", url.PathEscape(parameterToString(r.dataType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceUID"+"}", url.PathEscape(parameterToString(r.sourceUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.dataType) > 128 {
		return nil, reportError("dataType must have less than 128 elements")
	}
	if strlen(r.orgUID) > 64 {
		return nil, reportError("orgUID must have less than 64 elements")
	}
	if strlen(r.sourceUID) > 64 {
		return nil, reportError("sourceUID must have less than 64 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
