/*
Spyderbat API UI & Public APIs

Restful APIs for use by UI & customers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sbapi

import (
	"encoding/json"
)

// DashboardSearch struct for DashboardSearch
type DashboardSearch struct {
	// UI supplied JSON object
	Data map[string]interface{} `json:"data,omitempty"`
	// Description of query (max 64 chars)
	Description *string `json:"description,omitempty"`
	// Are notifications generated from this search
	Notify *bool `json:"notify,omitempty"`
	// Frequency of notification in seconds. One of 300, 3600, or 86400.
	NotifyFrequency *int32 `json:"notify_frequency,omitempty"`
	// Org UID
	OrgUid *string `json:"org_uid,omitempty"`
	// Search query to run
	Search *string `json:"search,omitempty"`
	// User supplied tags
	Tags []string `json:"tags,omitempty"`
	// UID for the DashboardSearch
	Uid *string `json:"uid,omitempty"`
}

// NewDashboardSearch instantiates a new DashboardSearch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardSearch() *DashboardSearch {
	this := DashboardSearch{}
	return &this
}

// NewDashboardSearchWithDefaults instantiates a new DashboardSearch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardSearchWithDefaults() *DashboardSearch {
	this := DashboardSearch{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *DashboardSearch) GetData() map[string]interface{} {
	if o == nil || o.Data == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardSearch) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *DashboardSearch) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *DashboardSearch) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DashboardSearch) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardSearch) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DashboardSearch) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DashboardSearch) SetDescription(v string) {
	o.Description = &v
}

// GetNotify returns the Notify field value if set, zero value otherwise.
func (o *DashboardSearch) GetNotify() bool {
	if o == nil || o.Notify == nil {
		var ret bool
		return ret
	}
	return *o.Notify
}

// GetNotifyOk returns a tuple with the Notify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardSearch) GetNotifyOk() (*bool, bool) {
	if o == nil || o.Notify == nil {
		return nil, false
	}
	return o.Notify, true
}

// HasNotify returns a boolean if a field has been set.
func (o *DashboardSearch) HasNotify() bool {
	if o != nil && o.Notify != nil {
		return true
	}

	return false
}

// SetNotify gets a reference to the given bool and assigns it to the Notify field.
func (o *DashboardSearch) SetNotify(v bool) {
	o.Notify = &v
}

// GetNotifyFrequency returns the NotifyFrequency field value if set, zero value otherwise.
func (o *DashboardSearch) GetNotifyFrequency() int32 {
	if o == nil || o.NotifyFrequency == nil {
		var ret int32
		return ret
	}
	return *o.NotifyFrequency
}

// GetNotifyFrequencyOk returns a tuple with the NotifyFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardSearch) GetNotifyFrequencyOk() (*int32, bool) {
	if o == nil || o.NotifyFrequency == nil {
		return nil, false
	}
	return o.NotifyFrequency, true
}

// HasNotifyFrequency returns a boolean if a field has been set.
func (o *DashboardSearch) HasNotifyFrequency() bool {
	if o != nil && o.NotifyFrequency != nil {
		return true
	}

	return false
}

// SetNotifyFrequency gets a reference to the given int32 and assigns it to the NotifyFrequency field.
func (o *DashboardSearch) SetNotifyFrequency(v int32) {
	o.NotifyFrequency = &v
}

// GetOrgUid returns the OrgUid field value if set, zero value otherwise.
func (o *DashboardSearch) GetOrgUid() string {
	if o == nil || o.OrgUid == nil {
		var ret string
		return ret
	}
	return *o.OrgUid
}

// GetOrgUidOk returns a tuple with the OrgUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardSearch) GetOrgUidOk() (*string, bool) {
	if o == nil || o.OrgUid == nil {
		return nil, false
	}
	return o.OrgUid, true
}

// HasOrgUid returns a boolean if a field has been set.
func (o *DashboardSearch) HasOrgUid() bool {
	if o != nil && o.OrgUid != nil {
		return true
	}

	return false
}

// SetOrgUid gets a reference to the given string and assigns it to the OrgUid field.
func (o *DashboardSearch) SetOrgUid(v string) {
	o.OrgUid = &v
}

// GetSearch returns the Search field value if set, zero value otherwise.
func (o *DashboardSearch) GetSearch() string {
	if o == nil || o.Search == nil {
		var ret string
		return ret
	}
	return *o.Search
}

// GetSearchOk returns a tuple with the Search field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardSearch) GetSearchOk() (*string, bool) {
	if o == nil || o.Search == nil {
		return nil, false
	}
	return o.Search, true
}

// HasSearch returns a boolean if a field has been set.
func (o *DashboardSearch) HasSearch() bool {
	if o != nil && o.Search != nil {
		return true
	}

	return false
}

// SetSearch gets a reference to the given string and assigns it to the Search field.
func (o *DashboardSearch) SetSearch(v string) {
	o.Search = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DashboardSearch) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardSearch) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DashboardSearch) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *DashboardSearch) SetTags(v []string) {
	o.Tags = v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *DashboardSearch) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardSearch) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *DashboardSearch) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *DashboardSearch) SetUid(v string) {
	o.Uid = &v
}

func (o DashboardSearch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Notify != nil {
		toSerialize["notify"] = o.Notify
	}
	if o.NotifyFrequency != nil {
		toSerialize["notify_frequency"] = o.NotifyFrequency
	}
	if o.OrgUid != nil {
		toSerialize["org_uid"] = o.OrgUid
	}
	if o.Search != nil {
		toSerialize["search"] = o.Search
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	return json.Marshal(toSerialize)
}

type NullableDashboardSearch struct {
	value *DashboardSearch
	isSet bool
}

func (v NullableDashboardSearch) Get() *DashboardSearch {
	return v.value
}

func (v *NullableDashboardSearch) Set(val *DashboardSearch) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardSearch) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardSearch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardSearch(val *DashboardSearch) *NullableDashboardSearch {
	return &NullableDashboardSearch{value: val, isSet: true}
}

func (v NullableDashboardSearch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardSearch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


