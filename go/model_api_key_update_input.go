/*
Spyderbat API UI & Public APIs

Restful APIs for use by UI & customers.

API version: 1.0.0
Contact: apisupport@spyderbat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sbapi

import (
	"encoding/json"
)

// ApiKeyUpdateInput struct for ApiKeyUpdateInput
type ApiKeyUpdateInput struct {
	// Description of the API key
	Description *string `json:"description,omitempty"`
	// Is the key enabled or not
	Enabled *bool `json:"enabled,omitempty"`
}

// NewApiKeyUpdateInput instantiates a new ApiKeyUpdateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiKeyUpdateInput() *ApiKeyUpdateInput {
	this := ApiKeyUpdateInput{}
	return &this
}

// NewApiKeyUpdateInputWithDefaults instantiates a new ApiKeyUpdateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiKeyUpdateInputWithDefaults() *ApiKeyUpdateInput {
	this := ApiKeyUpdateInput{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ApiKeyUpdateInput) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKeyUpdateInput) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ApiKeyUpdateInput) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ApiKeyUpdateInput) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ApiKeyUpdateInput) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKeyUpdateInput) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ApiKeyUpdateInput) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ApiKeyUpdateInput) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o ApiKeyUpdateInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableApiKeyUpdateInput struct {
	value *ApiKeyUpdateInput
	isSet bool
}

func (v NullableApiKeyUpdateInput) Get() *ApiKeyUpdateInput {
	return v.value
}

func (v *NullableApiKeyUpdateInput) Set(val *ApiKeyUpdateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableApiKeyUpdateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableApiKeyUpdateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiKeyUpdateInput(val *ApiKeyUpdateInput) *NullableApiKeyUpdateInput {
	return &NullableApiKeyUpdateInput{value: val, isSet: true}
}

func (v NullableApiKeyUpdateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiKeyUpdateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


