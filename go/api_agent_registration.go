/*
Spyderbat API UI & Public APIs

Restful APIs for use by UI & customers.

API version: 1.0.0
Contact: apisupport@spyderbat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spyderbat_api

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// AgentRegistrationApiService AgentRegistrationApi service
type AgentRegistrationApiService service

type ApiAgentRegistrationCreateRequest struct {
	ctx context.Context
	ApiService *AgentRegistrationApiService
	orgUID string
	agentRegistrationCreateInput *AgentRegistrationCreateInput
}

func (r ApiAgentRegistrationCreateRequest) AgentRegistrationCreateInput(agentRegistrationCreateInput AgentRegistrationCreateInput) ApiAgentRegistrationCreateRequest {
	r.agentRegistrationCreateInput = &agentRegistrationCreateInput
	return r
}

func (r ApiAgentRegistrationCreateRequest) Execute() (*ApiAgentCreateHandlerOutput, *http.Response, error) {
	return r.ApiService.AgentRegistrationCreateExecute(r)
}

/*
AgentRegistrationCreate Create an agent registration


Creates a new agent registration

* Requires the action  *agent_registration:Create* on the organization


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgUID The OrgUID the registration is associated with
 @return ApiAgentRegistrationCreateRequest
*/
func (a *AgentRegistrationApiService) AgentRegistrationCreate(ctx context.Context, orgUID string) ApiAgentRegistrationCreateRequest {
	return ApiAgentRegistrationCreateRequest{
		ApiService: a,
		ctx: ctx,
		orgUID: orgUID,
	}
}

// Execute executes the request
//  @return ApiAgentCreateHandlerOutput
func (a *AgentRegistrationApiService) AgentRegistrationCreateExecute(r ApiAgentRegistrationCreateRequest) (*ApiAgentCreateHandlerOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiAgentCreateHandlerOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentRegistrationApiService.AgentRegistrationCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/org/{orgUID}/agent_registration/"
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.orgUID) > 32 {
		return localVarReturnValue, nil, reportError("orgUID must have less than 32 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.agentRegistrationCreateInput
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgentRegistrationDownloadLinkRequest struct {
	ctx context.Context
	ApiService *AgentRegistrationApiService
	orgUID string
	uid string
}

func (r ApiAgentRegistrationDownloadLinkRequest) Execute() (*ApiAgentRegistrationDownloadLinkHandlerOutput, *http.Response, error) {
	return r.ApiService.AgentRegistrationDownloadLinkExecute(r)
}

/*
AgentRegistrationDownloadLink Get a download link for this registration


Create a download link for the registration

* Requires the action  *agent_registration:Load* on the agent registration



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgUID
 @param uid
 @return ApiAgentRegistrationDownloadLinkRequest
*/
func (a *AgentRegistrationApiService) AgentRegistrationDownloadLink(ctx context.Context, orgUID string, uid string) ApiAgentRegistrationDownloadLinkRequest {
	return ApiAgentRegistrationDownloadLinkRequest{
		ApiService: a,
		ctx: ctx,
		orgUID: orgUID,
		uid: uid,
	}
}

// Execute executes the request
//  @return ApiAgentRegistrationDownloadLinkHandlerOutput
func (a *AgentRegistrationApiService) AgentRegistrationDownloadLinkExecute(r ApiAgentRegistrationDownloadLinkRequest) (*ApiAgentRegistrationDownloadLinkHandlerOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiAgentRegistrationDownloadLinkHandlerOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentRegistrationApiService.AgentRegistrationDownloadLink")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/org/{orgUID}/agent_registration/{uid}/download_link"
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterToString(r.uid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.orgUID) > 64 {
		return localVarReturnValue, nil, reportError("orgUID must have less than 64 elements")
	}
	if strlen(r.uid) > 64 {
		return localVarReturnValue, nil, reportError("uid must have less than 64 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgentRegistrationGetLogRequest struct {
	ctx context.Context
	ApiService *AgentRegistrationApiService
	orgUID string
	uid string
	page *int32
	pageSize *int32
}

func (r ApiAgentRegistrationGetLogRequest) Page(page int32) ApiAgentRegistrationGetLogRequest {
	r.page = &page
	return r
}

func (r ApiAgentRegistrationGetLogRequest) PageSize(pageSize int32) ApiAgentRegistrationGetLogRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiAgentRegistrationGetLogRequest) Execute() ([]DaoAgentLog, *http.Response, error) {
	return r.ApiService.AgentRegistrationGetLogExecute(r)
}

/*
AgentRegistrationGetLog Get log of recent agent registration activity


Get lots relating to recent agent registration activity

* Requires the action  *agent_registration:ListLog* on the agent registration



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgUID
 @param uid
 @return ApiAgentRegistrationGetLogRequest
*/
func (a *AgentRegistrationApiService) AgentRegistrationGetLog(ctx context.Context, orgUID string, uid string) ApiAgentRegistrationGetLogRequest {
	return ApiAgentRegistrationGetLogRequest{
		ApiService: a,
		ctx: ctx,
		orgUID: orgUID,
		uid: uid,
	}
}

// Execute executes the request
//  @return []DaoAgentLog
func (a *AgentRegistrationApiService) AgentRegistrationGetLogExecute(r ApiAgentRegistrationGetLogRequest) ([]DaoAgentLog, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []DaoAgentLog
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentRegistrationApiService.AgentRegistrationGetLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/org/{orgUID}/agent_registration/{uid}/log"
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterToString(r.uid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.orgUID) < 10 {
		return localVarReturnValue, nil, reportError("orgUID must have at least 10 elements")
	}
	if strlen(r.orgUID) > 64 {
		return localVarReturnValue, nil, reportError("orgUID must have less than 64 elements")
	}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgentRegistrationListRequest struct {
	ctx context.Context
	ApiService *AgentRegistrationApiService
	orgUID string
	page *int32
	pageSize *int32
}

func (r ApiAgentRegistrationListRequest) Page(page int32) ApiAgentRegistrationListRequest {
	r.page = &page
	return r
}

func (r ApiAgentRegistrationListRequest) PageSize(pageSize int32) ApiAgentRegistrationListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiAgentRegistrationListRequest) Execute() ([]AgentRegistration, *http.Response, error) {
	return r.ApiService.AgentRegistrationListExecute(r)
}

/*
AgentRegistrationList List agent registrations


Lists the agent registrations associated with an organization

* Requires the action  *agent_registration:List* on the organization



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgUID
 @return ApiAgentRegistrationListRequest
*/
func (a *AgentRegistrationApiService) AgentRegistrationList(ctx context.Context, orgUID string) ApiAgentRegistrationListRequest {
	return ApiAgentRegistrationListRequest{
		ApiService: a,
		ctx: ctx,
		orgUID: orgUID,
	}
}

// Execute executes the request
//  @return []AgentRegistration
func (a *AgentRegistrationApiService) AgentRegistrationListExecute(r ApiAgentRegistrationListRequest) ([]AgentRegistration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AgentRegistration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentRegistrationApiService.AgentRegistrationList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/org/{orgUID}/agent_registration/"
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.orgUID) < 10 {
		return localVarReturnValue, nil, reportError("orgUID must have at least 10 elements")
	}
	if strlen(r.orgUID) > 64 {
		return localVarReturnValue, nil, reportError("orgUID must have less than 64 elements")
	}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgentRegistrationLoadRequest struct {
	ctx context.Context
	ApiService *AgentRegistrationApiService
	orgUID string
	uid string
}

func (r ApiAgentRegistrationLoadRequest) Execute() (*AgentRegistration, *http.Response, error) {
	return r.ApiService.AgentRegistrationLoadExecute(r)
}

/*
AgentRegistrationLoad Load an agent registration


Load a specified agent registration

* Requires the action  *agent_registration:Load* on the agent registration



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgUID
 @param uid
 @return ApiAgentRegistrationLoadRequest
*/
func (a *AgentRegistrationApiService) AgentRegistrationLoad(ctx context.Context, orgUID string, uid string) ApiAgentRegistrationLoadRequest {
	return ApiAgentRegistrationLoadRequest{
		ApiService: a,
		ctx: ctx,
		orgUID: orgUID,
		uid: uid,
	}
}

// Execute executes the request
//  @return AgentRegistration
func (a *AgentRegistrationApiService) AgentRegistrationLoadExecute(r ApiAgentRegistrationLoadRequest) (*AgentRegistration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AgentRegistration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentRegistrationApiService.AgentRegistrationLoad")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/org/{orgUID}/agent_registration/{uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterToString(r.uid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.orgUID) > 64 {
		return localVarReturnValue, nil, reportError("orgUID must have less than 64 elements")
	}
	if strlen(r.uid) > 64 {
		return localVarReturnValue, nil, reportError("uid must have less than 64 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgentRegistrationUpdateRequest struct {
	ctx context.Context
	ApiService *AgentRegistrationApiService
	orgUID string
	uid string
	agentRegistrationUpdateInput *AgentRegistrationUpdateInput
}

func (r ApiAgentRegistrationUpdateRequest) AgentRegistrationUpdateInput(agentRegistrationUpdateInput AgentRegistrationUpdateInput) ApiAgentRegistrationUpdateRequest {
	r.agentRegistrationUpdateInput = &agentRegistrationUpdateInput
	return r
}

func (r ApiAgentRegistrationUpdateRequest) Execute() (*http.Response, error) {
	return r.ApiService.AgentRegistrationUpdateExecute(r)
}

/*
AgentRegistrationUpdate Update an agent registration


Updates an existing registration

* Requires the action  *agent_registration:Update* on the organization and the registration


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgUID The OrgUID the registration is associated with
 @param uid Agent Registration UID
 @return ApiAgentRegistrationUpdateRequest
*/
func (a *AgentRegistrationApiService) AgentRegistrationUpdate(ctx context.Context, orgUID string, uid string) ApiAgentRegistrationUpdateRequest {
	return ApiAgentRegistrationUpdateRequest{
		ApiService: a,
		ctx: ctx,
		orgUID: orgUID,
		uid: uid,
	}
}

// Execute executes the request
func (a *AgentRegistrationApiService) AgentRegistrationUpdateExecute(r ApiAgentRegistrationUpdateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgentRegistrationApiService.AgentRegistrationUpdate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/org/{orgUID}/agent_registration/{uid}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uid"+"}", url.PathEscape(parameterToString(r.uid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.orgUID) > 32 {
		return nil, reportError("orgUID must have less than 32 elements")
	}
	if strlen(r.uid) > 64 {
		return nil, reportError("uid must have less than 64 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.agentRegistrationUpdateInput
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
