/*
Spyderbat API UI & Public APIs

Restful APIs for use by UI & customers.

API version: 1.0.0
Contact: apisupport@spyderbat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sbapi

import (
	"encoding/json"
)

// DaoPlan Plan
type DaoPlan struct {
	// Policies for the plan
	Policies []DaoPolicy `json:"policies,omitempty"`
}

// NewDaoPlan instantiates a new DaoPlan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaoPlan() *DaoPlan {
	this := DaoPlan{}
	return &this
}

// NewDaoPlanWithDefaults instantiates a new DaoPlan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaoPlanWithDefaults() *DaoPlan {
	this := DaoPlan{}
	return &this
}

// GetPolicies returns the Policies field value if set, zero value otherwise.
func (o *DaoPlan) GetPolicies() []DaoPolicy {
	if o == nil || o.Policies == nil {
		var ret []DaoPolicy
		return ret
	}
	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaoPlan) GetPoliciesOk() ([]DaoPolicy, bool) {
	if o == nil || o.Policies == nil {
		return nil, false
	}
	return o.Policies, true
}

// HasPolicies returns a boolean if a field has been set.
func (o *DaoPlan) HasPolicies() bool {
	if o != nil && o.Policies != nil {
		return true
	}

	return false
}

// SetPolicies gets a reference to the given []DaoPolicy and assigns it to the Policies field.
func (o *DaoPlan) SetPolicies(v []DaoPolicy) {
	o.Policies = v
}

func (o DaoPlan) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Policies != nil {
		toSerialize["policies"] = o.Policies
	}
	return json.Marshal(toSerialize)
}

type NullableDaoPlan struct {
	value *DaoPlan
	isSet bool
}

func (v NullableDaoPlan) Get() *DaoPlan {
	return v.value
}

func (v *NullableDaoPlan) Set(val *DaoPlan) {
	v.value = val
	v.isSet = true
}

func (v NullableDaoPlan) IsSet() bool {
	return v.isSet
}

func (v *NullableDaoPlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaoPlan(val *DaoPlan) *NullableDaoPlan {
	return &NullableDaoPlan{value: val, isSet: true}
}

func (v NullableDaoPlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaoPlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


