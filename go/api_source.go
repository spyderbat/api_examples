/*
Spyderbat API UI & Public APIs

Restful APIs for use by UI & customers.

API version: 1.0.0
Contact: apisupport@spyderbat.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sbapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// SourceApiService SourceApi service
type SourceApiService service

type ApiIntegrationSoarSrcListRequest struct {
	ctx context.Context
	ApiService *SourceApiService
	orgUID string
	et *int64
	hostname *string
	ipAddress *string
	macAddress *string
	page *int32
	pageSize *int32
	st *int64
}

// optional end time of the query
func (r ApiIntegrationSoarSrcListRequest) Et(et int64) ApiIntegrationSoarSrcListRequest {
	r.et = &et
	return r
}

// A single hostname to match
func (r ApiIntegrationSoarSrcListRequest) Hostname(hostname string) ApiIntegrationSoarSrcListRequest {
	r.hostname = &hostname
	return r
}

// A single IP address to match
func (r ApiIntegrationSoarSrcListRequest) IpAddress(ipAddress string) ApiIntegrationSoarSrcListRequest {
	r.ipAddress = &ipAddress
	return r
}

// A single mac address to match
func (r ApiIntegrationSoarSrcListRequest) MacAddress(macAddress string) ApiIntegrationSoarSrcListRequest {
	r.macAddress = &macAddress
	return r
}

func (r ApiIntegrationSoarSrcListRequest) Page(page int32) ApiIntegrationSoarSrcListRequest {
	r.page = &page
	return r
}

func (r ApiIntegrationSoarSrcListRequest) PageSize(pageSize int32) ApiIntegrationSoarSrcListRequest {
	r.pageSize = &pageSize
	return r
}

// optional start time of the query, if only a start time is provided, end time will be start+10m
func (r ApiIntegrationSoarSrcListRequest) St(st int64) ApiIntegrationSoarSrcListRequest {
	r.st = &st
	return r
}

func (r ApiIntegrationSoarSrcListRequest) Execute() ([]ApiSOARListHandlerOutput, *http.Response, error) {
	return r.ApiService.IntegrationSoarSrcListExecute(r)
}

/*
IntegrationSoarSrcList List sources for integration with SOARs


Lists the sources of data that match the specified query parameters, and return 
URL entry points into the UI for matching sources. 

* Requires the action  *org:ListSources* on the organization


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgUID
 @return ApiIntegrationSoarSrcListRequest
*/
func (a *SourceApiService) IntegrationSoarSrcList(ctx context.Context, orgUID string) ApiIntegrationSoarSrcListRequest {
	return ApiIntegrationSoarSrcListRequest{
		ApiService: a,
		ctx: ctx,
		orgUID: orgUID,
	}
}

// Execute executes the request
//  @return []ApiSOARListHandlerOutput
func (a *SourceApiService) IntegrationSoarSrcListExecute(r ApiIntegrationSoarSrcListRequest) ([]ApiSOARListHandlerOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ApiSOARListHandlerOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SourceApiService.IntegrationSoarSrcList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/integration/soar/org/{orgUID}/source/"
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.orgUID) > 64 {
		return localVarReturnValue, nil, reportError("orgUID must have less than 64 elements")
	}

	if r.et != nil {
		localVarQueryParams.Add("et", parameterToString(*r.et, ""))
	}
	if r.hostname != nil {
		localVarQueryParams.Add("hostname", parameterToString(*r.hostname, ""))
	}
	if r.ipAddress != nil {
		localVarQueryParams.Add("ip_address", parameterToString(*r.ipAddress, ""))
	}
	if r.macAddress != nil {
		localVarQueryParams.Add("mac_address", parameterToString(*r.macAddress, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.st != nil {
		localVarQueryParams.Add("st", parameterToString(*r.st, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSrcCreateRequest struct {
	ctx context.Context
	ApiService *SourceApiService
	orgUID string
	srcCreateInput *SrcCreateInput
}

func (r ApiSrcCreateRequest) SrcCreateInput(srcCreateInput SrcCreateInput) ApiSrcCreateRequest {
	r.srcCreateInput = &srcCreateInput
	return r
}

func (r ApiSrcCreateRequest) Execute() (*ApiSourceCreateHandlerOutput, *http.Response, error) {
	return r.ApiService.SrcCreateExecute(r)
}

/*
SrcCreate Create a source


Creates a new source of data

* Requires the action  *org:CreateSource* on the organization


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgUID The org this source is associated with
 @return ApiSrcCreateRequest
*/
func (a *SourceApiService) SrcCreate(ctx context.Context, orgUID string) ApiSrcCreateRequest {
	return ApiSrcCreateRequest{
		ApiService: a,
		ctx: ctx,
		orgUID: orgUID,
	}
}

// Execute executes the request
//  @return ApiSourceCreateHandlerOutput
func (a *SourceApiService) SrcCreateExecute(r ApiSrcCreateRequest) (*ApiSourceCreateHandlerOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiSourceCreateHandlerOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SourceApiService.SrcCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/org/{orgUID}/source/"
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.orgUID) > 64 {
		return localVarReturnValue, nil, reportError("orgUID must have less than 64 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.srcCreateInput
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSrcDeleteRequest struct {
	ctx context.Context
	ApiService *SourceApiService
	orgUID string
	sourceUID string
}

func (r ApiSrcDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.SrcDeleteExecute(r)
}

/*
SrcDelete Delete a source


Delete a source

* Requires the action  *org:DeleteSource* on the organization


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgUID
 @param sourceUID
 @return ApiSrcDeleteRequest
*/
func (a *SourceApiService) SrcDelete(ctx context.Context, orgUID string, sourceUID string) ApiSrcDeleteRequest {
	return ApiSrcDeleteRequest{
		ApiService: a,
		ctx: ctx,
		orgUID: orgUID,
		sourceUID: sourceUID,
	}
}

// Execute executes the request
func (a *SourceApiService) SrcDeleteExecute(r ApiSrcDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SourceApiService.SrcDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/org/{orgUID}/source/{sourceUID}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceUID"+"}", url.PathEscape(parameterToString(r.sourceUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.orgUID) > 64 {
		return nil, reportError("orgUID must have less than 64 elements")
	}
	if strlen(r.sourceUID) > 64 {
		return nil, reportError("sourceUID must have less than 64 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSrcListRequest struct {
	ctx context.Context
	ApiService *SourceApiService
	orgUID string
	agentUidEquals *string
	descriptionContains *string
	hasTags *[]string
	originalAssociation *bool
	page *int32
	pageSize *int32
}

func (r ApiSrcListRequest) AgentUidEquals(agentUidEquals string) ApiSrcListRequest {
	r.agentUidEquals = &agentUidEquals
	return r
}

func (r ApiSrcListRequest) DescriptionContains(descriptionContains string) ApiSrcListRequest {
	r.descriptionContains = &descriptionContains
	return r
}

func (r ApiSrcListRequest) HasTags(hasTags []string) ApiSrcListRequest {
	r.hasTags = &hasTags
	return r
}

func (r ApiSrcListRequest) OriginalAssociation(originalAssociation bool) ApiSrcListRequest {
	r.originalAssociation = &originalAssociation
	return r
}

func (r ApiSrcListRequest) Page(page int32) ApiSrcListRequest {
	r.page = &page
	return r
}

func (r ApiSrcListRequest) PageSize(pageSize int32) ApiSrcListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiSrcListRequest) Execute() ([]Source, *http.Response, error) {
	return r.ApiService.SrcListExecute(r)
}

/*
SrcList List sources


Lists the sources of data for an organization

* Requires the action  *org:ListSources* on the organization


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgUID
 @return ApiSrcListRequest
*/
func (a *SourceApiService) SrcList(ctx context.Context, orgUID string) ApiSrcListRequest {
	return ApiSrcListRequest{
		ApiService: a,
		ctx: ctx,
		orgUID: orgUID,
	}
}

// Execute executes the request
//  @return []Source
func (a *SourceApiService) SrcListExecute(r ApiSrcListRequest) ([]Source, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Source
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SourceApiService.SrcList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/org/{orgUID}/source/"
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.orgUID) < 10 {
		return localVarReturnValue, nil, reportError("orgUID must have at least 10 elements")
	}
	if strlen(r.orgUID) > 64 {
		return localVarReturnValue, nil, reportError("orgUID must have less than 64 elements")
	}

	if r.agentUidEquals != nil {
		localVarQueryParams.Add("agent_uid_equals", parameterToString(*r.agentUidEquals, ""))
	}
	if r.descriptionContains != nil {
		localVarQueryParams.Add("description_contains", parameterToString(*r.descriptionContains, ""))
	}
	if r.hasTags != nil {
		t := *r.hasTags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("has_tags", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("has_tags", parameterToString(t, "multi"))
		}
	}
	if r.originalAssociation != nil {
		localVarQueryParams.Add("original_association", parameterToString(*r.originalAssociation, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSrcLoadRequest struct {
	ctx context.Context
	ApiService *SourceApiService
	orgUID string
	sourceUID string
}

func (r ApiSrcLoadRequest) Execute() (*Source, *http.Response, error) {
	return r.ApiService.SrcLoadExecute(r)
}

/*
SrcLoad Load a source


Loads the meta data for a source of data

* Requires the action  *org:LoadSource* on the organization


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgUID
 @param sourceUID
 @return ApiSrcLoadRequest
*/
func (a *SourceApiService) SrcLoad(ctx context.Context, orgUID string, sourceUID string) ApiSrcLoadRequest {
	return ApiSrcLoadRequest{
		ApiService: a,
		ctx: ctx,
		orgUID: orgUID,
		sourceUID: sourceUID,
	}
}

// Execute executes the request
//  @return Source
func (a *SourceApiService) SrcLoadExecute(r ApiSrcLoadRequest) (*Source, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Source
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SourceApiService.SrcLoad")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/org/{orgUID}/source/{sourceUID}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceUID"+"}", url.PathEscape(parameterToString(r.sourceUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.orgUID) > 64 {
		return localVarReturnValue, nil, reportError("orgUID must have less than 64 elements")
	}
	if strlen(r.sourceUID) > 64 {
		return localVarReturnValue, nil, reportError("sourceUID must have less than 64 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSrcUpdateRequest struct {
	ctx context.Context
	ApiService *SourceApiService
	orgUID string
	sourceUID string
	srcUpdateInput *SrcUpdateInput
}

func (r ApiSrcUpdateRequest) SrcUpdateInput(srcUpdateInput SrcUpdateInput) ApiSrcUpdateRequest {
	r.srcUpdateInput = &srcUpdateInput
	return r
}

func (r ApiSrcUpdateRequest) Execute() (*http.Response, error) {
	return r.ApiService.SrcUpdateExecute(r)
}

/*
SrcUpdate Update a source


Updates the meta data for a source of data

* Requires the action  *org:UpdateSource* on the organization


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgUID The org this source is associated with
 @param sourceUID The UID of the source
 @return ApiSrcUpdateRequest
*/
func (a *SourceApiService) SrcUpdate(ctx context.Context, orgUID string, sourceUID string) ApiSrcUpdateRequest {
	return ApiSrcUpdateRequest{
		ApiService: a,
		ctx: ctx,
		orgUID: orgUID,
		sourceUID: sourceUID,
	}
}

// Execute executes the request
func (a *SourceApiService) SrcUpdateExecute(r ApiSrcUpdateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SourceApiService.SrcUpdate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/org/{orgUID}/source/{sourceUID}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceUID"+"}", url.PathEscape(parameterToString(r.sourceUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.orgUID) > 64 {
		return nil, reportError("orgUID must have less than 64 elements")
	}
	if strlen(r.sourceUID) > 64 {
		return nil, reportError("sourceUID must have less than 64 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.srcUpdateInput
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
