/*
Spyderbat API UI & Public APIs

Restful APIs for use by UI & customers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sbapi

import (
	"encoding/json"
)

// ApiRBACActions struct for ApiRBACActions
type ApiRBACActions struct {
	Actions []RBACAction `json:"actions,omitempty"`
}

// NewApiRBACActions instantiates a new ApiRBACActions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiRBACActions() *ApiRBACActions {
	this := ApiRBACActions{}
	return &this
}

// NewApiRBACActionsWithDefaults instantiates a new ApiRBACActions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiRBACActionsWithDefaults() *ApiRBACActions {
	this := ApiRBACActions{}
	return &this
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *ApiRBACActions) GetActions() []RBACAction {
	if o == nil || o.Actions == nil {
		var ret []RBACAction
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiRBACActions) GetActionsOk() ([]RBACAction, bool) {
	if o == nil || o.Actions == nil {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *ApiRBACActions) HasActions() bool {
	if o != nil && o.Actions != nil {
		return true
	}

	return false
}

// SetActions gets a reference to the given []RBACAction and assigns it to the Actions field.
func (o *ApiRBACActions) SetActions(v []RBACAction) {
	o.Actions = v
}

func (o ApiRBACActions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Actions != nil {
		toSerialize["actions"] = o.Actions
	}
	return json.Marshal(toSerialize)
}

type NullableApiRBACActions struct {
	value *ApiRBACActions
	isSet bool
}

func (v NullableApiRBACActions) Get() *ApiRBACActions {
	return v.value
}

func (v *NullableApiRBACActions) Set(val *ApiRBACActions) {
	v.value = val
	v.isSet = true
}

func (v NullableApiRBACActions) IsSet() bool {
	return v.isSet
}

func (v *NullableApiRBACActions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiRBACActions(val *ApiRBACActions) *NullableApiRBACActions {
	return &NullableApiRBACActions{value: val, isSet: true}
}

func (v NullableApiRBACActions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiRBACActions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


