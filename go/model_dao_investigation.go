/*
Spyderbat API UI & Public APIs

Restful APIs for use by UI & customers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sbapi

import (
	"encoding/json"
	"time"
)

// DaoInvestigation struct for DaoInvestigation
type DaoInvestigation struct {
	// UID of user who created the investigation
	CreatedBy *string `json:"created_by,omitempty"`
	// JSON Object associated with the investigation
	Data map[string]interface{} `json:"data,omitempty"`
	// UID of the user who last modified the investigation
	ModifiedBy *string `json:"modified_by,omitempty"`
	// Date the investigation was last modified
	ModifiedOn *time.Time `json:"modified_on,omitempty"`
	// Name of the investigation
	Name *string `json:"name,omitempty"`
	// Investigation OrgUID
	OrgUid *string `json:"org_uid,omitempty"`
	// Resource name used for RBAC
	ResourceName *string `json:"resource_name,omitempty"`
	ResourcePolicy *ResourcePolicy `json:"resource_policy,omitempty"`
	// User supplied tags
	Tags []string `json:"tags,omitempty"`
	// Investigation UID
	Uid *string `json:"uid,omitempty"`
	// Valid from date, the first date this object was valid
	ValidFrom *time.Time `json:"valid_from,omitempty"`
	// Valid to date, the date this object is valid to
	ValidTo *time.Time `json:"valid_to,omitempty"`
	// Version of the investigation
	Version *int32 `json:"version,omitempty"`
}

// NewDaoInvestigation instantiates a new DaoInvestigation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaoInvestigation() *DaoInvestigation {
	this := DaoInvestigation{}
	return &this
}

// NewDaoInvestigationWithDefaults instantiates a new DaoInvestigation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaoInvestigationWithDefaults() *DaoInvestigation {
	this := DaoInvestigation{}
	return &this
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *DaoInvestigation) GetCreatedBy() string {
	if o == nil || o.CreatedBy == nil {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaoInvestigation) GetCreatedByOk() (*string, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *DaoInvestigation) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *DaoInvestigation) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *DaoInvestigation) GetData() map[string]interface{} {
	if o == nil || o.Data == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaoInvestigation) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *DaoInvestigation) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *DaoInvestigation) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetModifiedBy returns the ModifiedBy field value if set, zero value otherwise.
func (o *DaoInvestigation) GetModifiedBy() string {
	if o == nil || o.ModifiedBy == nil {
		var ret string
		return ret
	}
	return *o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaoInvestigation) GetModifiedByOk() (*string, bool) {
	if o == nil || o.ModifiedBy == nil {
		return nil, false
	}
	return o.ModifiedBy, true
}

// HasModifiedBy returns a boolean if a field has been set.
func (o *DaoInvestigation) HasModifiedBy() bool {
	if o != nil && o.ModifiedBy != nil {
		return true
	}

	return false
}

// SetModifiedBy gets a reference to the given string and assigns it to the ModifiedBy field.
func (o *DaoInvestigation) SetModifiedBy(v string) {
	o.ModifiedBy = &v
}

// GetModifiedOn returns the ModifiedOn field value if set, zero value otherwise.
func (o *DaoInvestigation) GetModifiedOn() time.Time {
	if o == nil || o.ModifiedOn == nil {
		var ret time.Time
		return ret
	}
	return *o.ModifiedOn
}

// GetModifiedOnOk returns a tuple with the ModifiedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaoInvestigation) GetModifiedOnOk() (*time.Time, bool) {
	if o == nil || o.ModifiedOn == nil {
		return nil, false
	}
	return o.ModifiedOn, true
}

// HasModifiedOn returns a boolean if a field has been set.
func (o *DaoInvestigation) HasModifiedOn() bool {
	if o != nil && o.ModifiedOn != nil {
		return true
	}

	return false
}

// SetModifiedOn gets a reference to the given time.Time and assigns it to the ModifiedOn field.
func (o *DaoInvestigation) SetModifiedOn(v time.Time) {
	o.ModifiedOn = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DaoInvestigation) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaoInvestigation) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DaoInvestigation) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DaoInvestigation) SetName(v string) {
	o.Name = &v
}

// GetOrgUid returns the OrgUid field value if set, zero value otherwise.
func (o *DaoInvestigation) GetOrgUid() string {
	if o == nil || o.OrgUid == nil {
		var ret string
		return ret
	}
	return *o.OrgUid
}

// GetOrgUidOk returns a tuple with the OrgUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaoInvestigation) GetOrgUidOk() (*string, bool) {
	if o == nil || o.OrgUid == nil {
		return nil, false
	}
	return o.OrgUid, true
}

// HasOrgUid returns a boolean if a field has been set.
func (o *DaoInvestigation) HasOrgUid() bool {
	if o != nil && o.OrgUid != nil {
		return true
	}

	return false
}

// SetOrgUid gets a reference to the given string and assigns it to the OrgUid field.
func (o *DaoInvestigation) SetOrgUid(v string) {
	o.OrgUid = &v
}

// GetResourceName returns the ResourceName field value if set, zero value otherwise.
func (o *DaoInvestigation) GetResourceName() string {
	if o == nil || o.ResourceName == nil {
		var ret string
		return ret
	}
	return *o.ResourceName
}

// GetResourceNameOk returns a tuple with the ResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaoInvestigation) GetResourceNameOk() (*string, bool) {
	if o == nil || o.ResourceName == nil {
		return nil, false
	}
	return o.ResourceName, true
}

// HasResourceName returns a boolean if a field has been set.
func (o *DaoInvestigation) HasResourceName() bool {
	if o != nil && o.ResourceName != nil {
		return true
	}

	return false
}

// SetResourceName gets a reference to the given string and assigns it to the ResourceName field.
func (o *DaoInvestigation) SetResourceName(v string) {
	o.ResourceName = &v
}

// GetResourcePolicy returns the ResourcePolicy field value if set, zero value otherwise.
func (o *DaoInvestigation) GetResourcePolicy() ResourcePolicy {
	if o == nil || o.ResourcePolicy == nil {
		var ret ResourcePolicy
		return ret
	}
	return *o.ResourcePolicy
}

// GetResourcePolicyOk returns a tuple with the ResourcePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaoInvestigation) GetResourcePolicyOk() (*ResourcePolicy, bool) {
	if o == nil || o.ResourcePolicy == nil {
		return nil, false
	}
	return o.ResourcePolicy, true
}

// HasResourcePolicy returns a boolean if a field has been set.
func (o *DaoInvestigation) HasResourcePolicy() bool {
	if o != nil && o.ResourcePolicy != nil {
		return true
	}

	return false
}

// SetResourcePolicy gets a reference to the given ResourcePolicy and assigns it to the ResourcePolicy field.
func (o *DaoInvestigation) SetResourcePolicy(v ResourcePolicy) {
	o.ResourcePolicy = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DaoInvestigation) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaoInvestigation) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DaoInvestigation) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *DaoInvestigation) SetTags(v []string) {
	o.Tags = v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *DaoInvestigation) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaoInvestigation) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *DaoInvestigation) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *DaoInvestigation) SetUid(v string) {
	o.Uid = &v
}

// GetValidFrom returns the ValidFrom field value if set, zero value otherwise.
func (o *DaoInvestigation) GetValidFrom() time.Time {
	if o == nil || o.ValidFrom == nil {
		var ret time.Time
		return ret
	}
	return *o.ValidFrom
}

// GetValidFromOk returns a tuple with the ValidFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaoInvestigation) GetValidFromOk() (*time.Time, bool) {
	if o == nil || o.ValidFrom == nil {
		return nil, false
	}
	return o.ValidFrom, true
}

// HasValidFrom returns a boolean if a field has been set.
func (o *DaoInvestigation) HasValidFrom() bool {
	if o != nil && o.ValidFrom != nil {
		return true
	}

	return false
}

// SetValidFrom gets a reference to the given time.Time and assigns it to the ValidFrom field.
func (o *DaoInvestigation) SetValidFrom(v time.Time) {
	o.ValidFrom = &v
}

// GetValidTo returns the ValidTo field value if set, zero value otherwise.
func (o *DaoInvestigation) GetValidTo() time.Time {
	if o == nil || o.ValidTo == nil {
		var ret time.Time
		return ret
	}
	return *o.ValidTo
}

// GetValidToOk returns a tuple with the ValidTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaoInvestigation) GetValidToOk() (*time.Time, bool) {
	if o == nil || o.ValidTo == nil {
		return nil, false
	}
	return o.ValidTo, true
}

// HasValidTo returns a boolean if a field has been set.
func (o *DaoInvestigation) HasValidTo() bool {
	if o != nil && o.ValidTo != nil {
		return true
	}

	return false
}

// SetValidTo gets a reference to the given time.Time and assigns it to the ValidTo field.
func (o *DaoInvestigation) SetValidTo(v time.Time) {
	o.ValidTo = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *DaoInvestigation) GetVersion() int32 {
	if o == nil || o.Version == nil {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaoInvestigation) GetVersionOk() (*int32, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *DaoInvestigation) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *DaoInvestigation) SetVersion(v int32) {
	o.Version = &v
}

func (o DaoInvestigation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedBy != nil {
		toSerialize["created_by"] = o.CreatedBy
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.ModifiedBy != nil {
		toSerialize["modified_by"] = o.ModifiedBy
	}
	if o.ModifiedOn != nil {
		toSerialize["modified_on"] = o.ModifiedOn
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.OrgUid != nil {
		toSerialize["org_uid"] = o.OrgUid
	}
	if o.ResourceName != nil {
		toSerialize["resource_name"] = o.ResourceName
	}
	if o.ResourcePolicy != nil {
		toSerialize["resource_policy"] = o.ResourcePolicy
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	if o.ValidFrom != nil {
		toSerialize["valid_from"] = o.ValidFrom
	}
	if o.ValidTo != nil {
		toSerialize["valid_to"] = o.ValidTo
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableDaoInvestigation struct {
	value *DaoInvestigation
	isSet bool
}

func (v NullableDaoInvestigation) Get() *DaoInvestigation {
	return v.value
}

func (v *NullableDaoInvestigation) Set(val *DaoInvestigation) {
	v.value = val
	v.isSet = true
}

func (v NullableDaoInvestigation) IsSet() bool {
	return v.isSet
}

func (v *NullableDaoInvestigation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaoInvestigation(val *DaoInvestigation) *NullableDaoInvestigation {
	return &NullableDaoInvestigation{value: val, isSet: true}
}

func (v NullableDaoInvestigation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaoInvestigation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


