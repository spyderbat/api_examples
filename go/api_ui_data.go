/*
Spyderbat API UI & Public APIs

Restful APIs for use by UI & customers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sbapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// UIDataApiService UIDataApi service
type UIDataApiService service

type ApiUiDataDeleteOrgDataRequest struct {
	ctx context.Context
	ApiService *UIDataApiService
	dataKey string
	orgUID string
	sourceUID string
	userUID string
}

func (r ApiUiDataDeleteOrgDataRequest) Execute() (*http.Response, error) {
	return r.ApiService.UiDataDeleteOrgDataExecute(r)
}

/*
UiDataDeleteOrgData Delete Org UI Data


Sets UI Data

 * Requires *uidata:Delete*



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataKey Key for the data
 @param orgUID Org UID
 @param sourceUID Src UID
 @param userUID Owner UID
 @return ApiUiDataDeleteOrgDataRequest
*/
func (a *UIDataApiService) UiDataDeleteOrgData(ctx context.Context, dataKey string, orgUID string, sourceUID string, userUID string) ApiUiDataDeleteOrgDataRequest {
	return ApiUiDataDeleteOrgDataRequest{
		ApiService: a,
		ctx: ctx,
		dataKey: dataKey,
		orgUID: orgUID,
		sourceUID: sourceUID,
		userUID: userUID,
	}
}

// Execute executes the request
func (a *UIDataApiService) UiDataDeleteOrgDataExecute(r ApiUiDataDeleteOrgDataRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UIDataApiService.UiDataDeleteOrgData")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/org/{orgUID}/uidata/{dataKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"dataKey"+"}", url.PathEscape(parameterToString(r.dataKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceUID"+"}", url.PathEscape(parameterToString(r.sourceUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userUID"+"}", url.PathEscape(parameterToString(r.userUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.dataKey) > 32 {
		return nil, reportError("dataKey must have less than 32 elements")
	}
	if strlen(r.orgUID) > 32 {
		return nil, reportError("orgUID must have less than 32 elements")
	}
	if strlen(r.sourceUID) > 32 {
		return nil, reportError("sourceUID must have less than 32 elements")
	}
	if strlen(r.userUID) > 32 {
		return nil, reportError("userUID must have less than 32 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUiDataDeleteSourceDataRequest struct {
	ctx context.Context
	ApiService *UIDataApiService
	dataKey string
	orgUID string
	sourceUID string
	userUID string
}

func (r ApiUiDataDeleteSourceDataRequest) Execute() (*http.Response, error) {
	return r.ApiService.UiDataDeleteSourceDataExecute(r)
}

/*
UiDataDeleteSourceData Delete Source UI Data


Sets UI Data

 * Requires *uidata:Delete*



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataKey Key for the data
 @param orgUID Org UID
 @param sourceUID Src UID
 @param userUID Owner UID
 @return ApiUiDataDeleteSourceDataRequest
*/
func (a *UIDataApiService) UiDataDeleteSourceData(ctx context.Context, dataKey string, orgUID string, sourceUID string, userUID string) ApiUiDataDeleteSourceDataRequest {
	return ApiUiDataDeleteSourceDataRequest{
		ApiService: a,
		ctx: ctx,
		dataKey: dataKey,
		orgUID: orgUID,
		sourceUID: sourceUID,
		userUID: userUID,
	}
}

// Execute executes the request
func (a *UIDataApiService) UiDataDeleteSourceDataExecute(r ApiUiDataDeleteSourceDataRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UIDataApiService.UiDataDeleteSourceData")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/org/{orgUID}/source/{sourceUID}/uidata/{dataKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"dataKey"+"}", url.PathEscape(parameterToString(r.dataKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceUID"+"}", url.PathEscape(parameterToString(r.sourceUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userUID"+"}", url.PathEscape(parameterToString(r.userUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.dataKey) > 32 {
		return nil, reportError("dataKey must have less than 32 elements")
	}
	if strlen(r.orgUID) > 32 {
		return nil, reportError("orgUID must have less than 32 elements")
	}
	if strlen(r.sourceUID) > 32 {
		return nil, reportError("sourceUID must have less than 32 elements")
	}
	if strlen(r.userUID) > 32 {
		return nil, reportError("userUID must have less than 32 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUiDataDeleteUserDataRequest struct {
	ctx context.Context
	ApiService *UIDataApiService
	dataKey string
	orgUID string
	sourceUID string
	userUID string
}

func (r ApiUiDataDeleteUserDataRequest) Execute() (*http.Response, error) {
	return r.ApiService.UiDataDeleteUserDataExecute(r)
}

/*
UiDataDeleteUserData Delete User UI Data


Sets UI Data

 * Requires *uidata:Delete*



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataKey Key for the data
 @param orgUID Org UID
 @param sourceUID Src UID
 @param userUID Owner UID
 @return ApiUiDataDeleteUserDataRequest
*/
func (a *UIDataApiService) UiDataDeleteUserData(ctx context.Context, dataKey string, orgUID string, sourceUID string, userUID string) ApiUiDataDeleteUserDataRequest {
	return ApiUiDataDeleteUserDataRequest{
		ApiService: a,
		ctx: ctx,
		dataKey: dataKey,
		orgUID: orgUID,
		sourceUID: sourceUID,
		userUID: userUID,
	}
}

// Execute executes the request
func (a *UIDataApiService) UiDataDeleteUserDataExecute(r ApiUiDataDeleteUserDataRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UIDataApiService.UiDataDeleteUserData")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/user/{userUID}/uidata/{dataKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"dataKey"+"}", url.PathEscape(parameterToString(r.dataKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceUID"+"}", url.PathEscape(parameterToString(r.sourceUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userUID"+"}", url.PathEscape(parameterToString(r.userUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.dataKey) > 32 {
		return nil, reportError("dataKey must have less than 32 elements")
	}
	if strlen(r.orgUID) > 32 {
		return nil, reportError("orgUID must have less than 32 elements")
	}
	if strlen(r.sourceUID) > 32 {
		return nil, reportError("sourceUID must have less than 32 elements")
	}
	if strlen(r.userUID) > 32 {
		return nil, reportError("userUID must have less than 32 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUiDataDeleteUserOrgDataRequest struct {
	ctx context.Context
	ApiService *UIDataApiService
	dataKey string
	orgUID string
	sourceUID string
	userUID string
}

func (r ApiUiDataDeleteUserOrgDataRequest) Execute() (*http.Response, error) {
	return r.ApiService.UiDataDeleteUserOrgDataExecute(r)
}

/*
UiDataDeleteUserOrgData Delete UserOrg UI Data


Sets UI Data

 * Requires *uidata:Delete*



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataKey Key for the data
 @param orgUID Org UID
 @param sourceUID Src UID
 @param userUID Owner UID
 @return ApiUiDataDeleteUserOrgDataRequest
*/
func (a *UIDataApiService) UiDataDeleteUserOrgData(ctx context.Context, dataKey string, orgUID string, sourceUID string, userUID string) ApiUiDataDeleteUserOrgDataRequest {
	return ApiUiDataDeleteUserOrgDataRequest{
		ApiService: a,
		ctx: ctx,
		dataKey: dataKey,
		orgUID: orgUID,
		sourceUID: sourceUID,
		userUID: userUID,
	}
}

// Execute executes the request
func (a *UIDataApiService) UiDataDeleteUserOrgDataExecute(r ApiUiDataDeleteUserOrgDataRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UIDataApiService.UiDataDeleteUserOrgData")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/user/{userUID}/org/{orgUID}/uidata/{dataKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"dataKey"+"}", url.PathEscape(parameterToString(r.dataKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceUID"+"}", url.PathEscape(parameterToString(r.sourceUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userUID"+"}", url.PathEscape(parameterToString(r.userUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.dataKey) > 32 {
		return nil, reportError("dataKey must have less than 32 elements")
	}
	if strlen(r.orgUID) > 32 {
		return nil, reportError("orgUID must have less than 32 elements")
	}
	if strlen(r.sourceUID) > 32 {
		return nil, reportError("sourceUID must have less than 32 elements")
	}
	if strlen(r.userUID) > 32 {
		return nil, reportError("userUID must have less than 32 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUiDataDeleteUserSourceDataRequest struct {
	ctx context.Context
	ApiService *UIDataApiService
	dataKey string
	orgUID string
	sourceUID string
	userUID string
}

func (r ApiUiDataDeleteUserSourceDataRequest) Execute() (*http.Response, error) {
	return r.ApiService.UiDataDeleteUserSourceDataExecute(r)
}

/*
UiDataDeleteUserSourceData Delete UserSource UI Data


Sets UI Data

 * Requires *uidata:Delete*



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataKey Key for the data
 @param orgUID Org UID
 @param sourceUID Src UID
 @param userUID Owner UID
 @return ApiUiDataDeleteUserSourceDataRequest
*/
func (a *UIDataApiService) UiDataDeleteUserSourceData(ctx context.Context, dataKey string, orgUID string, sourceUID string, userUID string) ApiUiDataDeleteUserSourceDataRequest {
	return ApiUiDataDeleteUserSourceDataRequest{
		ApiService: a,
		ctx: ctx,
		dataKey: dataKey,
		orgUID: orgUID,
		sourceUID: sourceUID,
		userUID: userUID,
	}
}

// Execute executes the request
func (a *UIDataApiService) UiDataDeleteUserSourceDataExecute(r ApiUiDataDeleteUserSourceDataRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UIDataApiService.UiDataDeleteUserSourceData")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/user/{userUID}/org/{orgUID}/source/{sourceUID}/uidata/{dataKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"dataKey"+"}", url.PathEscape(parameterToString(r.dataKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceUID"+"}", url.PathEscape(parameterToString(r.sourceUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userUID"+"}", url.PathEscape(parameterToString(r.userUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.dataKey) > 32 {
		return nil, reportError("dataKey must have less than 32 elements")
	}
	if strlen(r.orgUID) > 32 {
		return nil, reportError("orgUID must have less than 32 elements")
	}
	if strlen(r.sourceUID) > 32 {
		return nil, reportError("sourceUID must have less than 32 elements")
	}
	if strlen(r.userUID) > 32 {
		return nil, reportError("userUID must have less than 32 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUiDataGetOrgDataRequest struct {
	ctx context.Context
	ApiService *UIDataApiService
	dataKey string
	orgUID string
	sourceUID string
	userUID string
}

func (r ApiUiDataGetOrgDataRequest) Execute() (*UIData, *http.Response, error) {
	return r.ApiService.UiDataGetOrgDataExecute(r)
}

/*
UiDataGetOrgData Get Org UI Data


Gets UI Data

 * Updates lastused
 * Requires *uidata:Get*



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataKey Key for the data
 @param orgUID Org UID
 @param sourceUID Src UID
 @param userUID Owner UID
 @return ApiUiDataGetOrgDataRequest
*/
func (a *UIDataApiService) UiDataGetOrgData(ctx context.Context, dataKey string, orgUID string, sourceUID string, userUID string) ApiUiDataGetOrgDataRequest {
	return ApiUiDataGetOrgDataRequest{
		ApiService: a,
		ctx: ctx,
		dataKey: dataKey,
		orgUID: orgUID,
		sourceUID: sourceUID,
		userUID: userUID,
	}
}

// Execute executes the request
//  @return UIData
func (a *UIDataApiService) UiDataGetOrgDataExecute(r ApiUiDataGetOrgDataRequest) (*UIData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UIData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UIDataApiService.UiDataGetOrgData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/org/{orgUID}/uidata/{dataKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"dataKey"+"}", url.PathEscape(parameterToString(r.dataKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceUID"+"}", url.PathEscape(parameterToString(r.sourceUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userUID"+"}", url.PathEscape(parameterToString(r.userUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.dataKey) > 32 {
		return localVarReturnValue, nil, reportError("dataKey must have less than 32 elements")
	}
	if strlen(r.orgUID) > 32 {
		return localVarReturnValue, nil, reportError("orgUID must have less than 32 elements")
	}
	if strlen(r.sourceUID) > 32 {
		return localVarReturnValue, nil, reportError("sourceUID must have less than 32 elements")
	}
	if strlen(r.userUID) > 32 {
		return localVarReturnValue, nil, reportError("userUID must have less than 32 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUiDataGetSourceDataRequest struct {
	ctx context.Context
	ApiService *UIDataApiService
	dataKey string
	orgUID string
	sourceUID string
	userUID string
}

func (r ApiUiDataGetSourceDataRequest) Execute() (*UIData, *http.Response, error) {
	return r.ApiService.UiDataGetSourceDataExecute(r)
}

/*
UiDataGetSourceData Get Source UI Data


Gets UI Data

 * Updates lastused
 * Requires *uidata:Get*



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataKey Key for the data
 @param orgUID Org UID
 @param sourceUID Src UID
 @param userUID Owner UID
 @return ApiUiDataGetSourceDataRequest
*/
func (a *UIDataApiService) UiDataGetSourceData(ctx context.Context, dataKey string, orgUID string, sourceUID string, userUID string) ApiUiDataGetSourceDataRequest {
	return ApiUiDataGetSourceDataRequest{
		ApiService: a,
		ctx: ctx,
		dataKey: dataKey,
		orgUID: orgUID,
		sourceUID: sourceUID,
		userUID: userUID,
	}
}

// Execute executes the request
//  @return UIData
func (a *UIDataApiService) UiDataGetSourceDataExecute(r ApiUiDataGetSourceDataRequest) (*UIData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UIData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UIDataApiService.UiDataGetSourceData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/org/{orgUID}/source/{sourceUID}/uidata/{dataKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"dataKey"+"}", url.PathEscape(parameterToString(r.dataKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceUID"+"}", url.PathEscape(parameterToString(r.sourceUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userUID"+"}", url.PathEscape(parameterToString(r.userUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.dataKey) > 32 {
		return localVarReturnValue, nil, reportError("dataKey must have less than 32 elements")
	}
	if strlen(r.orgUID) > 32 {
		return localVarReturnValue, nil, reportError("orgUID must have less than 32 elements")
	}
	if strlen(r.sourceUID) > 32 {
		return localVarReturnValue, nil, reportError("sourceUID must have less than 32 elements")
	}
	if strlen(r.userUID) > 32 {
		return localVarReturnValue, nil, reportError("userUID must have less than 32 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUiDataGetUserDataRequest struct {
	ctx context.Context
	ApiService *UIDataApiService
	dataKey string
	orgUID string
	sourceUID string
	userUID string
}

func (r ApiUiDataGetUserDataRequest) Execute() (*UIData, *http.Response, error) {
	return r.ApiService.UiDataGetUserDataExecute(r)
}

/*
UiDataGetUserData Get User UI Data


Gets UI Data

 * Updates lastused
 * Requires *uidata:Get*



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataKey Key for the data
 @param orgUID Org UID
 @param sourceUID Src UID
 @param userUID Owner UID
 @return ApiUiDataGetUserDataRequest
*/
func (a *UIDataApiService) UiDataGetUserData(ctx context.Context, dataKey string, orgUID string, sourceUID string, userUID string) ApiUiDataGetUserDataRequest {
	return ApiUiDataGetUserDataRequest{
		ApiService: a,
		ctx: ctx,
		dataKey: dataKey,
		orgUID: orgUID,
		sourceUID: sourceUID,
		userUID: userUID,
	}
}

// Execute executes the request
//  @return UIData
func (a *UIDataApiService) UiDataGetUserDataExecute(r ApiUiDataGetUserDataRequest) (*UIData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UIData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UIDataApiService.UiDataGetUserData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/user/{userUID}/uidata/{dataKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"dataKey"+"}", url.PathEscape(parameterToString(r.dataKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceUID"+"}", url.PathEscape(parameterToString(r.sourceUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userUID"+"}", url.PathEscape(parameterToString(r.userUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.dataKey) > 32 {
		return localVarReturnValue, nil, reportError("dataKey must have less than 32 elements")
	}
	if strlen(r.orgUID) > 32 {
		return localVarReturnValue, nil, reportError("orgUID must have less than 32 elements")
	}
	if strlen(r.sourceUID) > 32 {
		return localVarReturnValue, nil, reportError("sourceUID must have less than 32 elements")
	}
	if strlen(r.userUID) > 32 {
		return localVarReturnValue, nil, reportError("userUID must have less than 32 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUiDataGetUserOrgDataRequest struct {
	ctx context.Context
	ApiService *UIDataApiService
	dataKey string
	orgUID string
	sourceUID string
	userUID string
}

func (r ApiUiDataGetUserOrgDataRequest) Execute() (*UIData, *http.Response, error) {
	return r.ApiService.UiDataGetUserOrgDataExecute(r)
}

/*
UiDataGetUserOrgData Get UserOrg UI Data


Gets UI Data

 * Updates lastused
 * Requires *uidata:Get*



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataKey Key for the data
 @param orgUID Org UID
 @param sourceUID Src UID
 @param userUID Owner UID
 @return ApiUiDataGetUserOrgDataRequest
*/
func (a *UIDataApiService) UiDataGetUserOrgData(ctx context.Context, dataKey string, orgUID string, sourceUID string, userUID string) ApiUiDataGetUserOrgDataRequest {
	return ApiUiDataGetUserOrgDataRequest{
		ApiService: a,
		ctx: ctx,
		dataKey: dataKey,
		orgUID: orgUID,
		sourceUID: sourceUID,
		userUID: userUID,
	}
}

// Execute executes the request
//  @return UIData
func (a *UIDataApiService) UiDataGetUserOrgDataExecute(r ApiUiDataGetUserOrgDataRequest) (*UIData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UIData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UIDataApiService.UiDataGetUserOrgData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/user/{userUID}/org/{orgUID}/uidata/{dataKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"dataKey"+"}", url.PathEscape(parameterToString(r.dataKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceUID"+"}", url.PathEscape(parameterToString(r.sourceUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userUID"+"}", url.PathEscape(parameterToString(r.userUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.dataKey) > 32 {
		return localVarReturnValue, nil, reportError("dataKey must have less than 32 elements")
	}
	if strlen(r.orgUID) > 32 {
		return localVarReturnValue, nil, reportError("orgUID must have less than 32 elements")
	}
	if strlen(r.sourceUID) > 32 {
		return localVarReturnValue, nil, reportError("sourceUID must have less than 32 elements")
	}
	if strlen(r.userUID) > 32 {
		return localVarReturnValue, nil, reportError("userUID must have less than 32 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUiDataGetUserSourceDataRequest struct {
	ctx context.Context
	ApiService *UIDataApiService
	dataKey string
	orgUID string
	sourceUID string
	userUID string
}

func (r ApiUiDataGetUserSourceDataRequest) Execute() (*UIData, *http.Response, error) {
	return r.ApiService.UiDataGetUserSourceDataExecute(r)
}

/*
UiDataGetUserSourceData Get UserSource UI Data


Gets UI Data

 * Updates lastused
 * Requires *uidata:Get*



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataKey Key for the data
 @param orgUID Org UID
 @param sourceUID Src UID
 @param userUID Owner UID
 @return ApiUiDataGetUserSourceDataRequest
*/
func (a *UIDataApiService) UiDataGetUserSourceData(ctx context.Context, dataKey string, orgUID string, sourceUID string, userUID string) ApiUiDataGetUserSourceDataRequest {
	return ApiUiDataGetUserSourceDataRequest{
		ApiService: a,
		ctx: ctx,
		dataKey: dataKey,
		orgUID: orgUID,
		sourceUID: sourceUID,
		userUID: userUID,
	}
}

// Execute executes the request
//  @return UIData
func (a *UIDataApiService) UiDataGetUserSourceDataExecute(r ApiUiDataGetUserSourceDataRequest) (*UIData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UIData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UIDataApiService.UiDataGetUserSourceData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/user/{userUID}/org/{orgUID}/source/{sourceUID}/uidata/{dataKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"dataKey"+"}", url.PathEscape(parameterToString(r.dataKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceUID"+"}", url.PathEscape(parameterToString(r.sourceUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userUID"+"}", url.PathEscape(parameterToString(r.userUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.dataKey) > 32 {
		return localVarReturnValue, nil, reportError("dataKey must have less than 32 elements")
	}
	if strlen(r.orgUID) > 32 {
		return localVarReturnValue, nil, reportError("orgUID must have less than 32 elements")
	}
	if strlen(r.sourceUID) > 32 {
		return localVarReturnValue, nil, reportError("sourceUID must have less than 32 elements")
	}
	if strlen(r.userUID) > 32 {
		return localVarReturnValue, nil, reportError("userUID must have less than 32 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUiDataQueryOrgDataRequest struct {
	ctx context.Context
	ApiService *UIDataApiService
	dataKey string
	orgUID string
	sourceUID string
	userUID string
	tags *[]string
}

// Tags to search for
func (r ApiUiDataQueryOrgDataRequest) Tags(tags []string) ApiUiDataQueryOrgDataRequest {
	r.tags = &tags
	return r
}

func (r ApiUiDataQueryOrgDataRequest) Execute() ([]UIData, *http.Response, error) {
	return r.ApiService.UiDataQueryOrgDataExecute(r)
}

/*
UiDataQueryOrgData Query Org UI Data


Query UI Data

 * Requires *uidata:Query*



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataKey Key for the data
 @param orgUID Org UID
 @param sourceUID Src UID
 @param userUID Owner UID
 @return ApiUiDataQueryOrgDataRequest
*/
func (a *UIDataApiService) UiDataQueryOrgData(ctx context.Context, dataKey string, orgUID string, sourceUID string, userUID string) ApiUiDataQueryOrgDataRequest {
	return ApiUiDataQueryOrgDataRequest{
		ApiService: a,
		ctx: ctx,
		dataKey: dataKey,
		orgUID: orgUID,
		sourceUID: sourceUID,
		userUID: userUID,
	}
}

// Execute executes the request
//  @return []UIData
func (a *UIDataApiService) UiDataQueryOrgDataExecute(r ApiUiDataQueryOrgDataRequest) ([]UIData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []UIData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UIDataApiService.UiDataQueryOrgData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/org/{orgUID}/uidata/"
	localVarPath = strings.Replace(localVarPath, "{"+"dataKey"+"}", url.PathEscape(parameterToString(r.dataKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceUID"+"}", url.PathEscape(parameterToString(r.sourceUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userUID"+"}", url.PathEscape(parameterToString(r.userUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.dataKey) > 32 {
		return localVarReturnValue, nil, reportError("dataKey must have less than 32 elements")
	}
	if strlen(r.orgUID) > 32 {
		return localVarReturnValue, nil, reportError("orgUID must have less than 32 elements")
	}
	if strlen(r.sourceUID) > 32 {
		return localVarReturnValue, nil, reportError("sourceUID must have less than 32 elements")
	}
	if strlen(r.userUID) > 32 {
		return localVarReturnValue, nil, reportError("userUID must have less than 32 elements")
	}

	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tags", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tags", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUiDataQuerySourceDataRequest struct {
	ctx context.Context
	ApiService *UIDataApiService
	dataKey string
	orgUID string
	sourceUID string
	userUID string
	tags *[]string
}

// Tags to search for
func (r ApiUiDataQuerySourceDataRequest) Tags(tags []string) ApiUiDataQuerySourceDataRequest {
	r.tags = &tags
	return r
}

func (r ApiUiDataQuerySourceDataRequest) Execute() ([]UIData, *http.Response, error) {
	return r.ApiService.UiDataQuerySourceDataExecute(r)
}

/*
UiDataQuerySourceData Query Source UI Data


Query UI Data

 * Requires *uidata:Query*



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataKey Key for the data
 @param orgUID Org UID
 @param sourceUID Src UID
 @param userUID Owner UID
 @return ApiUiDataQuerySourceDataRequest
*/
func (a *UIDataApiService) UiDataQuerySourceData(ctx context.Context, dataKey string, orgUID string, sourceUID string, userUID string) ApiUiDataQuerySourceDataRequest {
	return ApiUiDataQuerySourceDataRequest{
		ApiService: a,
		ctx: ctx,
		dataKey: dataKey,
		orgUID: orgUID,
		sourceUID: sourceUID,
		userUID: userUID,
	}
}

// Execute executes the request
//  @return []UIData
func (a *UIDataApiService) UiDataQuerySourceDataExecute(r ApiUiDataQuerySourceDataRequest) ([]UIData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []UIData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UIDataApiService.UiDataQuerySourceData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/org/{orgUID}/source/{sourceUID}/uidata/"
	localVarPath = strings.Replace(localVarPath, "{"+"dataKey"+"}", url.PathEscape(parameterToString(r.dataKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceUID"+"}", url.PathEscape(parameterToString(r.sourceUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userUID"+"}", url.PathEscape(parameterToString(r.userUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.dataKey) > 32 {
		return localVarReturnValue, nil, reportError("dataKey must have less than 32 elements")
	}
	if strlen(r.orgUID) > 32 {
		return localVarReturnValue, nil, reportError("orgUID must have less than 32 elements")
	}
	if strlen(r.sourceUID) > 32 {
		return localVarReturnValue, nil, reportError("sourceUID must have less than 32 elements")
	}
	if strlen(r.userUID) > 32 {
		return localVarReturnValue, nil, reportError("userUID must have less than 32 elements")
	}

	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tags", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tags", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUiDataQueryUserDataRequest struct {
	ctx context.Context
	ApiService *UIDataApiService
	dataKey string
	orgUID string
	sourceUID string
	userUID string
	tags *[]string
}

// Tags to search for
func (r ApiUiDataQueryUserDataRequest) Tags(tags []string) ApiUiDataQueryUserDataRequest {
	r.tags = &tags
	return r
}

func (r ApiUiDataQueryUserDataRequest) Execute() ([]UIData, *http.Response, error) {
	return r.ApiService.UiDataQueryUserDataExecute(r)
}

/*
UiDataQueryUserData Query User UI Data


Query UI Data

 * Requires *uidata:Query*



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataKey Key for the data
 @param orgUID Org UID
 @param sourceUID Src UID
 @param userUID Owner UID
 @return ApiUiDataQueryUserDataRequest
*/
func (a *UIDataApiService) UiDataQueryUserData(ctx context.Context, dataKey string, orgUID string, sourceUID string, userUID string) ApiUiDataQueryUserDataRequest {
	return ApiUiDataQueryUserDataRequest{
		ApiService: a,
		ctx: ctx,
		dataKey: dataKey,
		orgUID: orgUID,
		sourceUID: sourceUID,
		userUID: userUID,
	}
}

// Execute executes the request
//  @return []UIData
func (a *UIDataApiService) UiDataQueryUserDataExecute(r ApiUiDataQueryUserDataRequest) ([]UIData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []UIData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UIDataApiService.UiDataQueryUserData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/user/{userUID}/uidata/"
	localVarPath = strings.Replace(localVarPath, "{"+"dataKey"+"}", url.PathEscape(parameterToString(r.dataKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceUID"+"}", url.PathEscape(parameterToString(r.sourceUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userUID"+"}", url.PathEscape(parameterToString(r.userUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.dataKey) > 32 {
		return localVarReturnValue, nil, reportError("dataKey must have less than 32 elements")
	}
	if strlen(r.orgUID) > 32 {
		return localVarReturnValue, nil, reportError("orgUID must have less than 32 elements")
	}
	if strlen(r.sourceUID) > 32 {
		return localVarReturnValue, nil, reportError("sourceUID must have less than 32 elements")
	}
	if strlen(r.userUID) > 32 {
		return localVarReturnValue, nil, reportError("userUID must have less than 32 elements")
	}

	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tags", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tags", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUiDataQueryUserOrgDataRequest struct {
	ctx context.Context
	ApiService *UIDataApiService
	dataKey string
	orgUID string
	sourceUID string
	userUID string
	tags *[]string
}

// Tags to search for
func (r ApiUiDataQueryUserOrgDataRequest) Tags(tags []string) ApiUiDataQueryUserOrgDataRequest {
	r.tags = &tags
	return r
}

func (r ApiUiDataQueryUserOrgDataRequest) Execute() ([]UIData, *http.Response, error) {
	return r.ApiService.UiDataQueryUserOrgDataExecute(r)
}

/*
UiDataQueryUserOrgData Query UserOrg UI Data


Query UI Data

 * Requires *uidata:Query*



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataKey Key for the data
 @param orgUID Org UID
 @param sourceUID Src UID
 @param userUID Owner UID
 @return ApiUiDataQueryUserOrgDataRequest
*/
func (a *UIDataApiService) UiDataQueryUserOrgData(ctx context.Context, dataKey string, orgUID string, sourceUID string, userUID string) ApiUiDataQueryUserOrgDataRequest {
	return ApiUiDataQueryUserOrgDataRequest{
		ApiService: a,
		ctx: ctx,
		dataKey: dataKey,
		orgUID: orgUID,
		sourceUID: sourceUID,
		userUID: userUID,
	}
}

// Execute executes the request
//  @return []UIData
func (a *UIDataApiService) UiDataQueryUserOrgDataExecute(r ApiUiDataQueryUserOrgDataRequest) ([]UIData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []UIData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UIDataApiService.UiDataQueryUserOrgData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/user/{userUID}/org/{orgUID}/uidata/"
	localVarPath = strings.Replace(localVarPath, "{"+"dataKey"+"}", url.PathEscape(parameterToString(r.dataKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceUID"+"}", url.PathEscape(parameterToString(r.sourceUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userUID"+"}", url.PathEscape(parameterToString(r.userUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.dataKey) > 32 {
		return localVarReturnValue, nil, reportError("dataKey must have less than 32 elements")
	}
	if strlen(r.orgUID) > 32 {
		return localVarReturnValue, nil, reportError("orgUID must have less than 32 elements")
	}
	if strlen(r.sourceUID) > 32 {
		return localVarReturnValue, nil, reportError("sourceUID must have less than 32 elements")
	}
	if strlen(r.userUID) > 32 {
		return localVarReturnValue, nil, reportError("userUID must have less than 32 elements")
	}

	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tags", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tags", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUiDataQueryUserSourceDataRequest struct {
	ctx context.Context
	ApiService *UIDataApiService
	dataKey string
	orgUID string
	sourceUID string
	userUID string
	tags *[]string
}

// Tags to search for
func (r ApiUiDataQueryUserSourceDataRequest) Tags(tags []string) ApiUiDataQueryUserSourceDataRequest {
	r.tags = &tags
	return r
}

func (r ApiUiDataQueryUserSourceDataRequest) Execute() ([]UIData, *http.Response, error) {
	return r.ApiService.UiDataQueryUserSourceDataExecute(r)
}

/*
UiDataQueryUserSourceData Query UserSource UI Data


Query UI Data

 * Requires *uidata:Query*



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataKey Key for the data
 @param orgUID Org UID
 @param sourceUID Src UID
 @param userUID Owner UID
 @return ApiUiDataQueryUserSourceDataRequest
*/
func (a *UIDataApiService) UiDataQueryUserSourceData(ctx context.Context, dataKey string, orgUID string, sourceUID string, userUID string) ApiUiDataQueryUserSourceDataRequest {
	return ApiUiDataQueryUserSourceDataRequest{
		ApiService: a,
		ctx: ctx,
		dataKey: dataKey,
		orgUID: orgUID,
		sourceUID: sourceUID,
		userUID: userUID,
	}
}

// Execute executes the request
//  @return []UIData
func (a *UIDataApiService) UiDataQueryUserSourceDataExecute(r ApiUiDataQueryUserSourceDataRequest) ([]UIData, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []UIData
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UIDataApiService.UiDataQueryUserSourceData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/user/{userUID}/org/{orgUID}/source/{sourceUID}/uidata/"
	localVarPath = strings.Replace(localVarPath, "{"+"dataKey"+"}", url.PathEscape(parameterToString(r.dataKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceUID"+"}", url.PathEscape(parameterToString(r.sourceUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userUID"+"}", url.PathEscape(parameterToString(r.userUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.dataKey) > 32 {
		return localVarReturnValue, nil, reportError("dataKey must have less than 32 elements")
	}
	if strlen(r.orgUID) > 32 {
		return localVarReturnValue, nil, reportError("orgUID must have less than 32 elements")
	}
	if strlen(r.sourceUID) > 32 {
		return localVarReturnValue, nil, reportError("sourceUID must have less than 32 elements")
	}
	if strlen(r.userUID) > 32 {
		return localVarReturnValue, nil, reportError("userUID must have less than 32 elements")
	}

	if r.tags != nil {
		t := *r.tags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tags", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tags", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUiDataSetOrgDataRequest struct {
	ctx context.Context
	ApiService *UIDataApiService
	dataKey string
	orgUID string
	sourceUID string
	userUID string
	uiDataSetOrgDataInput *UiDataSetOrgDataInput
}

func (r ApiUiDataSetOrgDataRequest) UiDataSetOrgDataInput(uiDataSetOrgDataInput UiDataSetOrgDataInput) ApiUiDataSetOrgDataRequest {
	r.uiDataSetOrgDataInput = &uiDataSetOrgDataInput
	return r
}

func (r ApiUiDataSetOrgDataRequest) Execute() (*http.Response, error) {
	return r.ApiService.UiDataSetOrgDataExecute(r)
}

/*
UiDataSetOrgData Set Org UI Data


Sets UI Data

 * Updates data, valid_to (if set), lastused
 * Requires *uidata:Set*



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataKey Key for the data
 @param orgUID Org UID
 @param sourceUID Source UID
 @param userUID Owner UID
 @return ApiUiDataSetOrgDataRequest
*/
func (a *UIDataApiService) UiDataSetOrgData(ctx context.Context, dataKey string, orgUID string, sourceUID string, userUID string) ApiUiDataSetOrgDataRequest {
	return ApiUiDataSetOrgDataRequest{
		ApiService: a,
		ctx: ctx,
		dataKey: dataKey,
		orgUID: orgUID,
		sourceUID: sourceUID,
		userUID: userUID,
	}
}

// Execute executes the request
func (a *UIDataApiService) UiDataSetOrgDataExecute(r ApiUiDataSetOrgDataRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UIDataApiService.UiDataSetOrgData")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/org/{orgUID}/uidata/{dataKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"dataKey"+"}", url.PathEscape(parameterToString(r.dataKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceUID"+"}", url.PathEscape(parameterToString(r.sourceUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userUID"+"}", url.PathEscape(parameterToString(r.userUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.dataKey) > 32 {
		return nil, reportError("dataKey must have less than 32 elements")
	}
	if strlen(r.orgUID) > 32 {
		return nil, reportError("orgUID must have less than 32 elements")
	}
	if strlen(r.sourceUID) > 32 {
		return nil, reportError("sourceUID must have less than 32 elements")
	}
	if strlen(r.userUID) > 32 {
		return nil, reportError("userUID must have less than 32 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.uiDataSetOrgDataInput
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUiDataSetSourceDataRequest struct {
	ctx context.Context
	ApiService *UIDataApiService
	dataKey string
	orgUID string
	sourceUID string
	userUID string
	uiDataSetSourceDataInput *UiDataSetSourceDataInput
}

func (r ApiUiDataSetSourceDataRequest) UiDataSetSourceDataInput(uiDataSetSourceDataInput UiDataSetSourceDataInput) ApiUiDataSetSourceDataRequest {
	r.uiDataSetSourceDataInput = &uiDataSetSourceDataInput
	return r
}

func (r ApiUiDataSetSourceDataRequest) Execute() (*http.Response, error) {
	return r.ApiService.UiDataSetSourceDataExecute(r)
}

/*
UiDataSetSourceData Set Source UI Data


Sets UI Data

 * Updates data, valid_to (if set), lastused
 * Requires *uidata:Set*



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataKey Key for the data
 @param orgUID Org UID
 @param sourceUID Source UID
 @param userUID Owner UID
 @return ApiUiDataSetSourceDataRequest
*/
func (a *UIDataApiService) UiDataSetSourceData(ctx context.Context, dataKey string, orgUID string, sourceUID string, userUID string) ApiUiDataSetSourceDataRequest {
	return ApiUiDataSetSourceDataRequest{
		ApiService: a,
		ctx: ctx,
		dataKey: dataKey,
		orgUID: orgUID,
		sourceUID: sourceUID,
		userUID: userUID,
	}
}

// Execute executes the request
func (a *UIDataApiService) UiDataSetSourceDataExecute(r ApiUiDataSetSourceDataRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UIDataApiService.UiDataSetSourceData")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/org/{orgUID}/source/{sourceUID}/uidata/{dataKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"dataKey"+"}", url.PathEscape(parameterToString(r.dataKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceUID"+"}", url.PathEscape(parameterToString(r.sourceUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userUID"+"}", url.PathEscape(parameterToString(r.userUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.dataKey) > 32 {
		return nil, reportError("dataKey must have less than 32 elements")
	}
	if strlen(r.orgUID) > 32 {
		return nil, reportError("orgUID must have less than 32 elements")
	}
	if strlen(r.sourceUID) > 32 {
		return nil, reportError("sourceUID must have less than 32 elements")
	}
	if strlen(r.userUID) > 32 {
		return nil, reportError("userUID must have less than 32 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.uiDataSetSourceDataInput
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUiDataSetUserDataRequest struct {
	ctx context.Context
	ApiService *UIDataApiService
	dataKey string
	orgUID string
	sourceUID string
	userUID string
	uiDataSetUserDataInput *UiDataSetUserDataInput
}

func (r ApiUiDataSetUserDataRequest) UiDataSetUserDataInput(uiDataSetUserDataInput UiDataSetUserDataInput) ApiUiDataSetUserDataRequest {
	r.uiDataSetUserDataInput = &uiDataSetUserDataInput
	return r
}

func (r ApiUiDataSetUserDataRequest) Execute() (*http.Response, error) {
	return r.ApiService.UiDataSetUserDataExecute(r)
}

/*
UiDataSetUserData Set User UI Data


Sets UI Data

 * Updates data, valid_to (if set), lastused
 * Requires *uidata:Set*



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataKey Key for the data
 @param orgUID Org UID
 @param sourceUID Source UID
 @param userUID Owner UID
 @return ApiUiDataSetUserDataRequest
*/
func (a *UIDataApiService) UiDataSetUserData(ctx context.Context, dataKey string, orgUID string, sourceUID string, userUID string) ApiUiDataSetUserDataRequest {
	return ApiUiDataSetUserDataRequest{
		ApiService: a,
		ctx: ctx,
		dataKey: dataKey,
		orgUID: orgUID,
		sourceUID: sourceUID,
		userUID: userUID,
	}
}

// Execute executes the request
func (a *UIDataApiService) UiDataSetUserDataExecute(r ApiUiDataSetUserDataRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UIDataApiService.UiDataSetUserData")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/user/{userUID}/uidata/{dataKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"dataKey"+"}", url.PathEscape(parameterToString(r.dataKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceUID"+"}", url.PathEscape(parameterToString(r.sourceUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userUID"+"}", url.PathEscape(parameterToString(r.userUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.dataKey) > 32 {
		return nil, reportError("dataKey must have less than 32 elements")
	}
	if strlen(r.orgUID) > 32 {
		return nil, reportError("orgUID must have less than 32 elements")
	}
	if strlen(r.sourceUID) > 32 {
		return nil, reportError("sourceUID must have less than 32 elements")
	}
	if strlen(r.userUID) > 32 {
		return nil, reportError("userUID must have less than 32 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.uiDataSetUserDataInput
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUiDataSetUserOrgDataRequest struct {
	ctx context.Context
	ApiService *UIDataApiService
	dataKey string
	orgUID string
	sourceUID string
	userUID string
	uiDataSetUserOrgDataInput *UiDataSetUserOrgDataInput
}

func (r ApiUiDataSetUserOrgDataRequest) UiDataSetUserOrgDataInput(uiDataSetUserOrgDataInput UiDataSetUserOrgDataInput) ApiUiDataSetUserOrgDataRequest {
	r.uiDataSetUserOrgDataInput = &uiDataSetUserOrgDataInput
	return r
}

func (r ApiUiDataSetUserOrgDataRequest) Execute() (*http.Response, error) {
	return r.ApiService.UiDataSetUserOrgDataExecute(r)
}

/*
UiDataSetUserOrgData Set UserOrg UI Data


Sets UI Data

 * Updates data, valid_to (if set), lastused
 * Requires *uidata:Set*



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataKey Key for the data
 @param orgUID Org UID
 @param sourceUID Source UID
 @param userUID Owner UID
 @return ApiUiDataSetUserOrgDataRequest
*/
func (a *UIDataApiService) UiDataSetUserOrgData(ctx context.Context, dataKey string, orgUID string, sourceUID string, userUID string) ApiUiDataSetUserOrgDataRequest {
	return ApiUiDataSetUserOrgDataRequest{
		ApiService: a,
		ctx: ctx,
		dataKey: dataKey,
		orgUID: orgUID,
		sourceUID: sourceUID,
		userUID: userUID,
	}
}

// Execute executes the request
func (a *UIDataApiService) UiDataSetUserOrgDataExecute(r ApiUiDataSetUserOrgDataRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UIDataApiService.UiDataSetUserOrgData")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/user/{userUID}/org/{orgUID}/uidata/{dataKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"dataKey"+"}", url.PathEscape(parameterToString(r.dataKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceUID"+"}", url.PathEscape(parameterToString(r.sourceUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userUID"+"}", url.PathEscape(parameterToString(r.userUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.dataKey) > 32 {
		return nil, reportError("dataKey must have less than 32 elements")
	}
	if strlen(r.orgUID) > 32 {
		return nil, reportError("orgUID must have less than 32 elements")
	}
	if strlen(r.sourceUID) > 32 {
		return nil, reportError("sourceUID must have less than 32 elements")
	}
	if strlen(r.userUID) > 32 {
		return nil, reportError("userUID must have less than 32 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.uiDataSetUserOrgDataInput
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUiDataSetUserSourceDataRequest struct {
	ctx context.Context
	ApiService *UIDataApiService
	dataKey string
	orgUID string
	sourceUID string
	userUID string
	uiDataSetUserSourceDataInput *UiDataSetUserSourceDataInput
}

func (r ApiUiDataSetUserSourceDataRequest) UiDataSetUserSourceDataInput(uiDataSetUserSourceDataInput UiDataSetUserSourceDataInput) ApiUiDataSetUserSourceDataRequest {
	r.uiDataSetUserSourceDataInput = &uiDataSetUserSourceDataInput
	return r
}

func (r ApiUiDataSetUserSourceDataRequest) Execute() (*http.Response, error) {
	return r.ApiService.UiDataSetUserSourceDataExecute(r)
}

/*
UiDataSetUserSourceData Set UserSource UI Data


Sets UI Data

 * Updates data, valid_to (if set), lastused
 * Requires *uidata:Set*



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dataKey Key for the data
 @param orgUID Org UID
 @param sourceUID Source UID
 @param userUID Owner UID
 @return ApiUiDataSetUserSourceDataRequest
*/
func (a *UIDataApiService) UiDataSetUserSourceData(ctx context.Context, dataKey string, orgUID string, sourceUID string, userUID string) ApiUiDataSetUserSourceDataRequest {
	return ApiUiDataSetUserSourceDataRequest{
		ApiService: a,
		ctx: ctx,
		dataKey: dataKey,
		orgUID: orgUID,
		sourceUID: sourceUID,
		userUID: userUID,
	}
}

// Execute executes the request
func (a *UIDataApiService) UiDataSetUserSourceDataExecute(r ApiUiDataSetUserSourceDataRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UIDataApiService.UiDataSetUserSourceData")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/user/{userUID}/org/{orgUID}/source/{sourceUID}/uidata/{dataKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"dataKey"+"}", url.PathEscape(parameterToString(r.dataKey, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orgUID"+"}", url.PathEscape(parameterToString(r.orgUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sourceUID"+"}", url.PathEscape(parameterToString(r.sourceUID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userUID"+"}", url.PathEscape(parameterToString(r.userUID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.dataKey) > 32 {
		return nil, reportError("dataKey must have less than 32 elements")
	}
	if strlen(r.orgUID) > 32 {
		return nil, reportError("orgUID must have less than 32 elements")
	}
	if strlen(r.sourceUID) > 32 {
		return nil, reportError("sourceUID must have less than 32 elements")
	}
	if strlen(r.userUID) > 32 {
		return nil, reportError("userUID must have less than 32 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.uiDataSetUserSourceDataInput
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
