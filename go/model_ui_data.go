/*
Spyderbat API UI & Public APIs

Restful APIs for use by UI & customers.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sbapi

import (
	"encoding/json"
	"time"
)

// UIData struct for UIData
type UIData struct {
	// UI supplied JSON object
	Data map[string]interface{} `json:"data,omitempty"`
	// Key for the data
	DataKey *string `json:"data_key,omitempty"`
	// The time of las use of the key; only updated every 5 minutes
	LastUsed *time.Time `json:"last_used,omitempty"`
	// Org UID
	OrgUid *string `json:"org_uid,omitempty"`
	// Owner UID
	OwnerUid *string `json:"owner_uid,omitempty"`
	// Source UID
	SourceUid *string `json:"source_uid,omitempty"`
	// User supplied tags
	Tags []string `json:"tags,omitempty"`
	// UID for the UIData
	Uid *string `json:"uid,omitempty"`
	// Valid from is the creation date or first date when the API key became valid
	ValidFrom *time.Time `json:"valid_from,omitempty"`
	// Valid to is the expiration date or the last date this API key will be valid
	ValidTo *time.Time `json:"valid_to,omitempty"`
}

// NewUIData instantiates a new UIData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUIData() *UIData {
	this := UIData{}
	return &this
}

// NewUIDataWithDefaults instantiates a new UIData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUIDataWithDefaults() *UIData {
	this := UIData{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *UIData) GetData() map[string]interface{} {
	if o == nil || o.Data == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIData) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *UIData) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *UIData) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetDataKey returns the DataKey field value if set, zero value otherwise.
func (o *UIData) GetDataKey() string {
	if o == nil || o.DataKey == nil {
		var ret string
		return ret
	}
	return *o.DataKey
}

// GetDataKeyOk returns a tuple with the DataKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIData) GetDataKeyOk() (*string, bool) {
	if o == nil || o.DataKey == nil {
		return nil, false
	}
	return o.DataKey, true
}

// HasDataKey returns a boolean if a field has been set.
func (o *UIData) HasDataKey() bool {
	if o != nil && o.DataKey != nil {
		return true
	}

	return false
}

// SetDataKey gets a reference to the given string and assigns it to the DataKey field.
func (o *UIData) SetDataKey(v string) {
	o.DataKey = &v
}

// GetLastUsed returns the LastUsed field value if set, zero value otherwise.
func (o *UIData) GetLastUsed() time.Time {
	if o == nil || o.LastUsed == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUsed
}

// GetLastUsedOk returns a tuple with the LastUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIData) GetLastUsedOk() (*time.Time, bool) {
	if o == nil || o.LastUsed == nil {
		return nil, false
	}
	return o.LastUsed, true
}

// HasLastUsed returns a boolean if a field has been set.
func (o *UIData) HasLastUsed() bool {
	if o != nil && o.LastUsed != nil {
		return true
	}

	return false
}

// SetLastUsed gets a reference to the given time.Time and assigns it to the LastUsed field.
func (o *UIData) SetLastUsed(v time.Time) {
	o.LastUsed = &v
}

// GetOrgUid returns the OrgUid field value if set, zero value otherwise.
func (o *UIData) GetOrgUid() string {
	if o == nil || o.OrgUid == nil {
		var ret string
		return ret
	}
	return *o.OrgUid
}

// GetOrgUidOk returns a tuple with the OrgUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIData) GetOrgUidOk() (*string, bool) {
	if o == nil || o.OrgUid == nil {
		return nil, false
	}
	return o.OrgUid, true
}

// HasOrgUid returns a boolean if a field has been set.
func (o *UIData) HasOrgUid() bool {
	if o != nil && o.OrgUid != nil {
		return true
	}

	return false
}

// SetOrgUid gets a reference to the given string and assigns it to the OrgUid field.
func (o *UIData) SetOrgUid(v string) {
	o.OrgUid = &v
}

// GetOwnerUid returns the OwnerUid field value if set, zero value otherwise.
func (o *UIData) GetOwnerUid() string {
	if o == nil || o.OwnerUid == nil {
		var ret string
		return ret
	}
	return *o.OwnerUid
}

// GetOwnerUidOk returns a tuple with the OwnerUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIData) GetOwnerUidOk() (*string, bool) {
	if o == nil || o.OwnerUid == nil {
		return nil, false
	}
	return o.OwnerUid, true
}

// HasOwnerUid returns a boolean if a field has been set.
func (o *UIData) HasOwnerUid() bool {
	if o != nil && o.OwnerUid != nil {
		return true
	}

	return false
}

// SetOwnerUid gets a reference to the given string and assigns it to the OwnerUid field.
func (o *UIData) SetOwnerUid(v string) {
	o.OwnerUid = &v
}

// GetSourceUid returns the SourceUid field value if set, zero value otherwise.
func (o *UIData) GetSourceUid() string {
	if o == nil || o.SourceUid == nil {
		var ret string
		return ret
	}
	return *o.SourceUid
}

// GetSourceUidOk returns a tuple with the SourceUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIData) GetSourceUidOk() (*string, bool) {
	if o == nil || o.SourceUid == nil {
		return nil, false
	}
	return o.SourceUid, true
}

// HasSourceUid returns a boolean if a field has been set.
func (o *UIData) HasSourceUid() bool {
	if o != nil && o.SourceUid != nil {
		return true
	}

	return false
}

// SetSourceUid gets a reference to the given string and assigns it to the SourceUid field.
func (o *UIData) SetSourceUid(v string) {
	o.SourceUid = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UIData) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIData) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UIData) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *UIData) SetTags(v []string) {
	o.Tags = v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *UIData) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIData) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *UIData) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *UIData) SetUid(v string) {
	o.Uid = &v
}

// GetValidFrom returns the ValidFrom field value if set, zero value otherwise.
func (o *UIData) GetValidFrom() time.Time {
	if o == nil || o.ValidFrom == nil {
		var ret time.Time
		return ret
	}
	return *o.ValidFrom
}

// GetValidFromOk returns a tuple with the ValidFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIData) GetValidFromOk() (*time.Time, bool) {
	if o == nil || o.ValidFrom == nil {
		return nil, false
	}
	return o.ValidFrom, true
}

// HasValidFrom returns a boolean if a field has been set.
func (o *UIData) HasValidFrom() bool {
	if o != nil && o.ValidFrom != nil {
		return true
	}

	return false
}

// SetValidFrom gets a reference to the given time.Time and assigns it to the ValidFrom field.
func (o *UIData) SetValidFrom(v time.Time) {
	o.ValidFrom = &v
}

// GetValidTo returns the ValidTo field value if set, zero value otherwise.
func (o *UIData) GetValidTo() time.Time {
	if o == nil || o.ValidTo == nil {
		var ret time.Time
		return ret
	}
	return *o.ValidTo
}

// GetValidToOk returns a tuple with the ValidTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UIData) GetValidToOk() (*time.Time, bool) {
	if o == nil || o.ValidTo == nil {
		return nil, false
	}
	return o.ValidTo, true
}

// HasValidTo returns a boolean if a field has been set.
func (o *UIData) HasValidTo() bool {
	if o != nil && o.ValidTo != nil {
		return true
	}

	return false
}

// SetValidTo gets a reference to the given time.Time and assigns it to the ValidTo field.
func (o *UIData) SetValidTo(v time.Time) {
	o.ValidTo = &v
}

func (o UIData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.DataKey != nil {
		toSerialize["data_key"] = o.DataKey
	}
	if o.LastUsed != nil {
		toSerialize["last_used"] = o.LastUsed
	}
	if o.OrgUid != nil {
		toSerialize["org_uid"] = o.OrgUid
	}
	if o.OwnerUid != nil {
		toSerialize["owner_uid"] = o.OwnerUid
	}
	if o.SourceUid != nil {
		toSerialize["source_uid"] = o.SourceUid
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	if o.ValidFrom != nil {
		toSerialize["valid_from"] = o.ValidFrom
	}
	if o.ValidTo != nil {
		toSerialize["valid_to"] = o.ValidTo
	}
	return json.Marshal(toSerialize)
}

type NullableUIData struct {
	value *UIData
	isSet bool
}

func (v NullableUIData) Get() *UIData {
	return v.value
}

func (v *NullableUIData) Set(val *UIData) {
	v.value = val
	v.isSet = true
}

func (v NullableUIData) IsSet() bool {
	return v.isSet
}

func (v *NullableUIData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUIData(val *UIData) *NullableUIData {
	return &NullableUIData{value: val, isSet: true}
}

func (v NullableUIData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUIData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


